{
  "swagger": "2.0",
  "info": {
    "version": "v1.1",
    "title": "Aspose Words for Cloud Web API",
    "description": "Version of Aspose.Words: 17.9.0.0 <br/> \r\n                                                   Version of Aspose.Words.Cloud: 17.8.0.0 <br/> \r\n                                                   Build number: 1"
  },
  "host": "localhost",
  "basePath": "/WordsCloud",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/words/{name}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Export the document into the specified format.",
        "operationId": "GetDocumentWithFormat",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "OutPath",
            "in": "query",
            "description": "Path to save result",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/convert": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Convert document from request content to format specified.",
        "operationId": "PutConvertDocument",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Format",
            "in": "query",
            "description": "Format to convert.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Document",
            "in": "formData",
            "description": "Converting document",
            "required": true,
            "type": "file"
          },
          {
            "name": "OutPath",
            "in": "query",
            "description": "Path for saving operation result to the local storage.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/saveAs/tiff": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Convert document to tiff with detailed settings and save result to storage.",
        "operationId": "PutDocumentSaveAsTiff",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SaveOptions",
            "in": "body",
            "description": "Tiff save options.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TiffSaveOptionsData"
            }
          },
          {
            "name": "ResultFile",
            "in": "query",
            "description": "The resulting file name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "UseAntiAliasing",
            "in": "query",
            "description": "Use antialiasing flag.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "UseHighQualityRendering",
            "in": "query",
            "description": "Use high quality flag.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ImageBrightness",
            "in": "query",
            "description": "Brightness for the generated images.",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "ImageColorMode",
            "in": "query",
            "description": "Color mode for the generated images.",
            "required": false,
            "type": "string"
          },
          {
            "name": "ImageContrast",
            "in": "query",
            "description": "The contrast for the generated images.",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "NumeralFormat",
            "in": "query",
            "description": "The images numeral format.",
            "required": false,
            "type": "string"
          },
          {
            "name": "PageCount",
            "in": "query",
            "description": "Number of pages to render.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "PageIndex",
            "in": "query",
            "description": "Page index to start rendering.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "PaperColor",
            "in": "query",
            "description": "Background image color.",
            "required": false,
            "type": "string"
          },
          {
            "name": "PixelFormat",
            "in": "query",
            "description": "The pixel format of generated images.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Resolution",
            "in": "query",
            "description": "The resolution of generated images.",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "Scale",
            "in": "query",
            "description": "Zoom factor for generated images.",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "TiffCompression",
            "in": "query",
            "description": "The compression tipe.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DmlRenderingMode",
            "in": "query",
            "description": "Optional, default is Fallback.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DmlEffectsRenderingMode",
            "in": "query",
            "description": "Optional, default is Simplified.",
            "required": false,
            "type": "string"
          },
          {
            "name": "TiffBinarizationMethod",
            "in": "query",
            "description": "Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.",
            "required": false,
            "type": "string"
          },
          {
            "name": "ZipOutput",
            "in": "query",
            "description": "Optional. A value determining zip output or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveResponse"
            }
          }
        }
      }
    },
    "/words/{name}/saveAs": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Convert document to destination format with detailed settings and save result to storage.",
        "operationId": "PostDocumentSaveAs",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SaveOptionsData",
            "in": "body",
            "description": "Save options.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveOptionsData"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{paragraphPath}/runs": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "This resource represents collection of runs in the paragraph.",
        "operationId": "GetDocumentParagraphRuns",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RunsResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds run to document, returns added paragraph's data.",
        "operationId": "PutRun",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Run",
            "in": "body",
            "description": "Run data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Run"
            }
          },
          {
            "name": "InsertBeforeNode",
            "in": "query",
            "description": "Paragraph will be inserted before node with index.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RunResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{paragraphPath}/runs/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "This resource represents run of text contained in the document.",
        "operationId": "GetDocumentParagraphRun",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RunResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates run's properties, returns updated run's data.",
        "operationId": "PostRun",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Run",
            "in": "body",
            "description": "Run data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Run"
            }
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RunResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Removes run from document.",
        "operationId": "DeleteRun",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{paragraphPath}/runs/{index}/font": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "This resource represents font of run.",
        "operationId": "GetDocumentParagraphRunFont",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FontResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates font properties, returns updated font data.",
        "operationId": "PostDocumentParagraphRunFont",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "FontDto",
            "in": "body",
            "description": "Font dto object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Font"
            }
          },
          {
            "name": "ParagraphPath",
            "in": "path",
            "description": "Path to parent paragraph.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FontResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/paragraphs": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a list of paragraphs that are contained in the document.",
        "operationId": "GetDocumentParagraphs",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node which contains paragraphs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParagraphLinkCollectionResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds paragraph to document, returns added paragraph's data.",
        "operationId": "PutParagraph",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Paragraph",
            "in": "body",
            "description": "Paragraph data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParagraphInsert"
            }
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node which contains paragraphs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "InsertBeforeNode",
            "in": "query",
            "description": "Paragraph will be inserted before node with index.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParagraphResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/paragraphs/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "This resource represents one of the paragraphs contained in the document.",
        "operationId": "GetDocumentParagraph",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node which contains paragraphs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ParagraphResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Remove paragraph from section.",
        "operationId": "DeleteParagraph",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node which contains paragraphs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/fonts/cache": {
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Resets font's cache.",
        "operationId": "ResetCache",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/hyperlinks": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document hyperlinks common info.",
        "operationId": "GetDocumentHyperlinks",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HyperlinksResponse"
            }
          }
        }
      }
    },
    "/words/{name}/hyperlinks/{hyperlinkIndex}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document hyperlink by its index.",
        "operationId": "GetDocumentHyperlinkByIndex",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "HyperlinkIndex",
            "in": "path",
            "description": "The hyperlink index.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HyperlinkResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/formfields": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get form fields from document.",
        "operationId": "GetFormFields",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node containing collection of form fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormFieldsResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds form field to paragraph, returns added form field's data.",
        "operationId": "PutFormField",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "FormField",
            "in": "body",
            "description": "From field data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormField"
            }
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node that contains collection of formfields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "InsertBeforeNode",
            "in": "query",
            "description": "Form field will be inserted before node with index.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormFieldResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/formfields/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Returns representation of an one of the form field.",
        "operationId": "GetFormField",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node that contains collection of formfields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormFieldResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates properties of form field, returns updated form field.",
        "operationId": "PostFormField",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "FormField",
            "in": "body",
            "description": "From field data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormField"
            }
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node that contains collection of formfields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FormFieldResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Removes form field from document.",
        "operationId": "DeleteFormField",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node that contains collection of formfields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/insertPageNumbers": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Insert document page numbers.",
        "operationId": "PostInsertPageNumbers",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "A document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PageNumber",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageNumber"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/comments": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get comments from document.",
        "operationId": "GetComments",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentsResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds comment to document, returns inserted comment's data.",
        "operationId": "PutComment",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Comment",
            "in": "body",
            "description": "Comment data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/comments/{commentIndex}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get comment from document.",
        "operationId": "GetComment",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "CommentIndex",
            "in": "path",
            "description": "Comment index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates the comment, returns updated comment's data.",
        "operationId": "PostComment",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "CommentIndex",
            "in": "path",
            "description": "Comment index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Comment",
            "in": "body",
            "description": "Comment data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CommentResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Remove comment from document.",
        "operationId": "DeleteComment",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "CommentIndex",
            "in": "path",
            "description": "Comment index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/tables": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a list of tables that are contained in the document.",
        "operationId": "GetTables",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableLinkCollectionResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds table to document, returns added table's data.",
        "operationId": "InsertTable",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Table",
            "in": "body",
            "description": "Table parameters/",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableInsert"
            }
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/tables/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table.",
        "operationId": "GetTable",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete a table.",
        "operationId": "DeleteTable",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/tables/{index}/properties": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table properties.",
        "operationId": "GetTableProperties",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TablePropertiesResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates a table properties.",
        "operationId": "UpdateTableProperties",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Properties",
            "in": "body",
            "description": "The properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableProperties"
            }
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TablePropertiesResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tablePath}/rows/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table row.",
        "operationId": "GetTableRow",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TablePath",
            "in": "path",
            "description": "Path to table.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableRowResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete a table row.",
        "operationId": "DeleteTableRow",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TablePath",
            "in": "path",
            "description": "Path to table.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tablePath}/rows": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds table row to table, returns added row's data.",
        "operationId": "InsertTableRow",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Row",
            "in": "body",
            "description": "Table row parameters/",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableRowInsert"
            }
          },
          {
            "name": "TablePath",
            "in": "path",
            "description": "Path to table.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableRowResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tablePath}/rows/{index}/rowformat": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table row format.",
        "operationId": "GetTableRowFormat",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TablePath",
            "in": "path",
            "description": "Path to table.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableRowFormatResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates a table row format.",
        "operationId": "UpdateTableRowFormat",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "body",
            "description": "Table row format.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableRowFormat"
            }
          },
          {
            "name": "TablePath",
            "in": "path",
            "description": "Path to table.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableRowFormatResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tableRowPath}/cells/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table cell.",
        "operationId": "GetTableCell",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TableRowPath",
            "in": "path",
            "description": "Path to table row.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableCellResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete a table cell.",
        "operationId": "DeleteTableCell",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TableRowPath",
            "in": "path",
            "description": "Path to table row.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tableRowPath}/cells": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds table cell to table, returns added cell's data.",
        "operationId": "InsertTableCell",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Cell",
            "in": "body",
            "description": "Table cell parameters/",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableCellInsert"
            }
          },
          {
            "name": "TableRowPath",
            "in": "path",
            "description": "Path to table row.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableCellResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{tableRowPath}/cells/{index}/cellformat": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a table cell format.",
        "operationId": "GetTableCellFormat",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "TableRowPath",
            "in": "path",
            "description": "Path to table row.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableCellFormatResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates a table cell format.",
        "operationId": "UpdateTableCellFormat",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "body",
            "description": "The properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableCellFormat"
            }
          },
          {
            "name": "TableRowPath",
            "in": "path",
            "description": "Path to table row.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TableCellFormatResponse"
            }
          }
        }
      }
    },
    "/words/{name}/textItems": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document text items.",
        "operationId": "GetDocumentTextItems",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TextItemsResponse"
            }
          }
        }
      }
    },
    "/words/{name}/replaceText": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Replace document text.",
        "operationId": "PostReplaceText",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ReplaceText",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceTextRequest"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReplaceTextResponse"
            }
          }
        }
      }
    },
    "/words/{name}/documentProperties": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document properties info.",
        "operationId": "GetDocumentProperties",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document's name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentPropertiesResponse"
            }
          }
        }
      }
    },
    "/words/{name}/documentProperties/{propertyName}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document property info by the property name.",
        "operationId": "GetDocumentProperty",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PropertyName",
            "in": "path",
            "description": "The property name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentPropertyResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Add new or update existing document property.",
        "operationId": "PutUpdateDocumentProperty",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PropertyName",
            "in": "path",
            "description": "The property name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Property",
            "in": "body",
            "description": "The property with new value.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentProperty"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentPropertyResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Add new or update existing document property.",
        "operationId": "PutUpdateDocumentProperty",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PropertyName",
            "in": "path",
            "description": "The property name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Property",
            "in": "body",
            "description": "The property with new value.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentProperty"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentPropertyResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete document property.",
        "operationId": "DeleteDocumentProperty",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PropertyName",
            "in": "path",
            "description": "The property name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/split": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Split document.",
        "operationId": "PostSplitDocument",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "Original document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "Format to split.",
            "required": false,
            "type": "string"
          },
          {
            "name": "From",
            "in": "query",
            "description": "Start page.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "To",
            "in": "query",
            "description": "End page.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ZipOutput",
            "in": "query",
            "description": "ZipOutput or not.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SplitDocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/footnotes": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get footnotes from document.",
        "operationId": "GetFootnotes",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of footnotes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FootnotesResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds footnote to document, returns added footnote's data.",
        "operationId": "PutFootnote",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "FootnoteDto",
            "in": "body",
            "description": "Footnote data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Footnote"
            }
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of footnotes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FootnoteResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/footnotes/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read footnote by index.",
        "operationId": "GetFootnote",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of footnotes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FootnoteResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates footnote's properties, returns updated run's data.",
        "operationId": "PostFootnote",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "FootnoteDto",
            "in": "body",
            "description": "Footnote data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Footnote"
            }
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of footnotes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FootnoteResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Removes footnote from document.",
        "operationId": "DeleteFootnote",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of footnotes.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/watermark/insertImage": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Insert document watermark image.",
        "operationId": "PostInsertDocumentWatermarkImage",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ImageFile",
            "in": "formData",
            "description": "File with image",
            "required": false,
            "type": "file"
          },
          {
            "name": "RotationAngle",
            "in": "query",
            "description": "The watermark rotation angle.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "Image",
            "in": "query",
            "description": "The image file server full name. If the name is empty the image is expected in request content.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/watermark/insertText": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Insert document watermark text.",
        "operationId": "PostInsertDocumentWatermarkText",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "WatermarkText",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WatermarkText"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/watermark": {
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete watermark (for deleting last watermark from the document).",
        "operationId": "DeleteDocumentWatermark",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/executeTemplate": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Populate document template with data.",
        "operationId": "PostExecuteTemplate",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The template document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Data",
            "in": "formData",
            "description": "Mail merge data",
            "required": true,
            "type": "string"
          },
          {
            "name": "Cleanup",
            "in": "query",
            "description": "Clean up options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "UseWholeParagraphAsRegion",
            "in": "query",
            "description": "Gets or sets a value indicating whether paragraph with TableStart or \r\nTableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. \r\n The default value is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "WithRegions",
            "in": "query",
            "description": "Merge with regions or not. True by default",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/executeMailMerge/{withRegions}": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Execute document mail merge operation.",
        "operationId": "PostDocumentExecuteMailMerge",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "WithRegions",
            "in": "path",
            "description": "With regions flag.",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "Data",
            "in": "formData",
            "description": "Mail merge data",
            "required": false,
            "type": "string"
          },
          {
            "name": "MailMergeDataFile",
            "in": "query",
            "description": "Mail merge data.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Cleanup",
            "in": "query",
            "description": "Clean up options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "UseWholeParagraphAsRegion",
            "in": "query",
            "description": "Gets or sets a value indicating whether paragraph with TableStart or \r\n            TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. \r\n            The default value is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/executeTemplate": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Populate document template with data online.",
        "operationId": "PutExecuteTemplateOnline",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Template",
            "in": "formData",
            "description": "File with template",
            "required": true,
            "type": "file"
          },
          {
            "name": "Data",
            "in": "formData",
            "description": "File with mailmerge data",
            "required": true,
            "type": "file"
          },
          {
            "name": "Cleanup",
            "in": "query",
            "description": "Clean up options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "UseWholeParagraphAsRegion",
            "in": "query",
            "description": "Gets or sets a value indicating whether paragraph with TableStart or \r\n            TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. \r\n            The default value is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "WithRegions",
            "in": "query",
            "description": "Merge with regions or not. True by default",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/executeMailMerge": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Execute document mail merge online.",
        "operationId": "PutExecuteMailMergeOnline",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Template",
            "in": "formData",
            "description": "File with template",
            "required": true,
            "type": "file"
          },
          {
            "name": "Data",
            "in": "formData",
            "description": "File with mailmerge data",
            "required": true,
            "type": "file"
          },
          {
            "name": "WithRegions",
            "in": "query",
            "description": "With regions flag.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Cleanup",
            "in": "query",
            "description": "Clean up options.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/mailMergeFieldNames": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Read document field names.",
        "operationId": "PutDocumentFieldNames",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Template",
            "in": "formData",
            "description": "File with template",
            "required": true,
            "type": "file"
          },
          {
            "name": "UseNonMergeFields",
            "in": "query",
            "description": "Use non merge fields or not.",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldNamesResponse"
            }
          }
        }
      }
    },
    "/words/{name}/mailMergeFieldNames": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document field names.",
        "operationId": "GetDocumentFieldNames",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "UseNonMergeFields",
            "in": "query",
            "description": "If true, result includes \"mustache\" field names.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldNamesResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/drawingObjects": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document drawing objects common info.",
        "operationId": "GetDocumentDrawingObjects",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawingObjectsResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds  drawing object to document, returns added  drawing object's data.",
        "operationId": "PutDrawingObject",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DrawingObject",
            "in": "formData",
            "description": "Drawing object parameters",
            "required": true,
            "type": "string"
          },
          {
            "name": "ImageFile",
            "in": "formData",
            "description": "File with image",
            "required": true,
            "type": "file"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawingObjectResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/drawingObjects/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document drawing object common info by its index or convert to format specified.",
        "operationId": "GetDocumentDrawingObjectByIndex",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawingObjectResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates drawing object, returns updated  drawing object's data.",
        "operationId": "PostDrawingObject",
        "consumes": [
          "multipart/form-data",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DrawingObject",
            "in": "formData",
            "description": "Drawing object parameters",
            "required": true,
            "type": "string"
          },
          {
            "name": "ImageFile",
            "in": "formData",
            "description": "File with image",
            "required": true,
            "type": "file"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DrawingObjectResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Removes drawing object from document.",
        "operationId": "DeleteDrawingObject",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/drawingObjects/{index}/imageData": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read drawing object image data.",
        "operationId": "GetDocumentDrawingObjectImageData",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/drawingObjects/{index}/oleData": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get drawing object OLE data.",
        "operationId": "GetDocumentDrawingObjectOleData",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/protection": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document protection common info.",
        "operationId": "GetDocumentProtection",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProtectionDataResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Protect document.",
        "operationId": "PutProtectDocument",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProtectionRequest",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProtectionRequest"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProtectionDataResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Change document protection.",
        "operationId": "PostChangeDocumentProtection",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProtectionRequest",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProtectionRequest"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProtectionDataResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Unprotect document.",
        "operationId": "DeleteUnprotectDocument",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "ProtectionRequest",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProtectionRequest"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProtectionDataResponse"
            }
          }
        }
      }
    },
    "/words/{name}/sections": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a list of sections that are contained in the document.",
        "operationId": "GetSections",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SectionLinkCollectionResponse"
            }
          }
        }
      }
    },
    "/words/{name}/sections/{sectionIndex}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get document section by index.",
        "operationId": "GetSection",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SectionIndex",
            "in": "path",
            "description": "Section index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SectionResponse"
            }
          }
        }
      }
    },
    "/words/{name}/sections/{sectionIndex}/pageSetup": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get page setup of section.",
        "operationId": "GetSectionPageSetup",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SectionIndex",
            "in": "path",
            "description": "Section index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SectionPageSetupResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Update page setup of section.",
        "operationId": "UpdateSectionPageSetup",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SectionIndex",
            "in": "path",
            "description": "Section index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "PageSetup",
            "in": "body",
            "description": "Page setup properties dto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageSetup"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SectionPageSetupResponse"
            }
          }
        }
      }
    },
    "/words/{name}/pages/{pageIndex}/render": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Renders page to specified format.",
        "operationId": "RenderPage",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "PageIndex",
            "in": "path",
            "description": "Comment index",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/paragraphs/{index}/render": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Renders paragraph to specified format.",
        "operationId": "RenderParagraph",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains paragraphs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/tables/{index}/render": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Renders table to specified format.",
        "operationId": "RenderTable",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains tables.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/drawingObjects/{index}/render": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Renders drawing object to specified format.",
        "operationId": "RenderDrawingObject",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains drawing objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/OfficeMathObjects/{index}/render": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Renders math object to specified format.",
        "operationId": "RenderMathObject",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Format",
            "in": "query",
            "description": "The destination format.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains office math objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          },
          {
            "name": "FontsLocation",
            "in": "query",
            "description": "Folder in filestorage with custom fonts.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "description": "File with result of operation",
              "type": "file"
            }
          }
        }
      }
    },
    "/words/{name}/search": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Search text in document.",
        "operationId": "Search",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Pattern",
            "in": "query",
            "description": "The regular expression used to find matches.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          }
        }
      }
    },
    "/words/{name}/appendDocument": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Append documents to original document.",
        "operationId": "PostAppendDocument",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "Original document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DocumentList",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentEntryList"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/compareDocument": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Compare document with original document.",
        "operationId": "PostCompareDocument",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "Original document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "CompareData",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompareData"
            }
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/OfficeMathObjects": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get OfficeMath objects from document.",
        "operationId": "GetOfficeMathObjects",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of OfficeMath objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OfficeMathObjectsResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/OfficeMathObjects/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read OfficeMath object by index.",
        "operationId": "GetOfficeMathObject",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of OfficeMath objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OfficeMathObjectResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Removes OfficeMath object from document.",
        "operationId": "DeleteOfficeMathObject",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of OfficeMath objects.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{sectionPath}/headersfooters": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a list of header/footers that are contained in the document.",
        "operationId": "GetHeaderFooters",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SectionPath",
            "in": "query",
            "description": "Path to parent section.",
            "required": false,
            "type": "string"
          },
          {
            "name": "FilterByType",
            "in": "query",
            "description": "List of types of headers and footers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeaderFootersResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Insert to document header or footer.",
        "operationId": "PutHeaderFooter",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "HeaderFooterType",
            "in": "body",
            "description": "Type of header/footer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SectionPath",
            "in": "query",
            "description": "Path to parent section.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeaderFooterResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete document headers and footers.",
        "operationId": "DeleteHeadersFooters",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SectionPath",
            "in": "query",
            "description": "Path to parent section.",
            "required": false,
            "type": "string"
          },
          {
            "name": "HeadersFootersTypes",
            "in": "query",
            "description": "List of types of headers and footers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/headersfooters/{headerFooterIndex}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a header/footer that is contained in the document.",
        "operationId": "GetHeaderFooter",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "HeaderFooterIndex",
            "in": "path",
            "description": "Header/footer index.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "SectionIndex",
            "in": "query",
            "description": "Section index.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "FilterByType",
            "in": "query",
            "description": "List of types of headers and footers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeaderFooterResponse"
            }
          }
        }
      }
    },
    "/words/{name}/sections/{sectionIndex}/headersfooters/{headerFooterIndex}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a header/footer that is contained in the document.",
        "operationId": "GetHeaderFooter",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "HeaderFooterIndex",
            "in": "path",
            "description": "Header/footer index.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "SectionIndex",
            "in": "path",
            "description": "Section index.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "FilterByType",
            "in": "query",
            "description": "List of types of headers and footers.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HeaderFooterResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{sectionPath}/headersfooters/{index}": {
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete header/footer from document.",
        "operationId": "DeleteHeaderFooter",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "SectionPath",
            "in": "query",
            "description": "Path to parent section.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/tasks": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Run tasks",
        "operationId": "PostRunTask",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/words/{name}/bookmarks": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document bookmarks common info.",
        "operationId": "GetDocumentBookmarks",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BookmarksResponse"
            }
          }
        }
      }
    },
    "/words/{name}/bookmarks/{bookmarkName}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document bookmark data by its name.",
        "operationId": "GetDocumentBookmarkByName",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "BookmarkName",
            "in": "path",
            "description": "The bookmark name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BookmarkResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Update document bookmark.",
        "operationId": "PostUpdateDocumentBookmark",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "BookmarkData",
            "in": "body",
            "description": "{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookmarkData"
            }
          },
          {
            "name": "BookmarkName",
            "in": "path",
            "description": "The bookmark name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BookmarkResponse"
            }
          }
        }
      }
    },
    "/words/{name}/macros": {
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Remove macros from document.",
        "operationId": "DeleteDocumentMacros",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/statistics": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document statistics.",
        "operationId": "GetDocumentStatistics",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "IncludeComments",
            "in": "query",
            "description": "Support including/excluding comments from the WordCount. Default value is \"true\".",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "IncludeFootnotes",
            "in": "query",
            "description": "Support including/excluding footnotes from the WordCount. Default value is \"false\".",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "IncludeTextInShapes",
            "in": "query",
            "description": "Support including/excluding shape's text from the WordCount. Default value is \"false\"",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StatDataResponse"
            }
          }
        }
      }
    },
    "/words/{documentName}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Read document common info.",
        "operationId": "GetDocument",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "DocumentName",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/loadWebDocument": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Loads new document from web into the file with any supported format of data.",
        "operationId": "PostLoadWebDocument",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Data",
            "in": "body",
            "description": "Parameters of loading.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadWebDocumentData"
            }
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaveResponse"
            }
          }
        }
      }
    },
    "/words/create": {
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Creates new document.\r\nDocument is created with format which is recognized from file extensions. \r\nSupported extentions: \".doc\", \".docx\", \".docm\", \".dot\", \".dotm\", \".dotx\", \".flatopc\", \".fopc\", \".flatopc_macro\", \".fopc_macro\", \".flatopc_template\", \".fopc_template\", \".flatopc_template_macro\", \".fopc_template_macro\", \".wordml\", \".wml\", \".rtf\"",
        "operationId": "PutCreateDocument",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Folder",
            "in": "query",
            "description": "The document folder.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/borders": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a collection of borders.",
        "description": "'nodePath' should refer to node with cell or row",
        "operationId": "GetBorders",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "path",
            "description": "Path to node with borders(node should be cell or row).",
            "required": true,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BordersResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Resets borders properties to default values.",
        "description": "'nodePath' should refer to node with cell or row",
        "operationId": "DeleteBorders",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "path",
            "description": "Path to node with borders(node should be cell or row).",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BordersResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/borders/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Return a border.",
        "description": "'nodePath' should refer to node with cell or row",
        "operationId": "GetBorder",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "path",
            "description": "Path to node with border(node should be cell or row).",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BorderResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates border properties.",
        "description": "'nodePath' should refer to node with cell or row",
        "operationId": "UpdateBorder",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "BorderProperties",
            "in": "body",
            "description": "Border properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Border"
            }
          },
          {
            "name": "NodePath",
            "in": "path",
            "description": "Path to node with border(node should be cell or row).",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BorderResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Resets border properties to default values.",
        "description": "'nodePath' should refer to node with cell or row",
        "operationId": "DeleteBorder",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "path",
            "description": "Path to node with border(node should be cell or row).",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BorderResponse"
            }
          }
        }
      }
    },
    "/words/{name}/updateFields": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Update (reevaluate) fields in document.",
        "operationId": "PostUpdateDocumentFields",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DocumentResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/fields": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get fields from document.",
        "operationId": "GetFields",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldsResponse"
            }
          }
        }
      },
      "put": {
        "tags": [
          "words"
        ],
        "summary": "Adds field to document, returns inserted field's data.",
        "operationId": "PutField",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Field",
            "in": "body",
            "description": "Field data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "InsertBeforeNode",
            "in": "query",
            "description": "Field will be inserted before node with id=\"nodeId\".",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Remove fields from section paragraph.",
        "operationId": "DeleteFields",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/{nodePath}/fields/{index}": {
      "get": {
        "tags": [
          "words"
        ],
        "summary": "Get field from document.",
        "operationId": "GetField",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Updates field's properties, returns updated field's data.",
        "operationId": "PostField",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded",
          "application/xml",
          "text/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Field",
            "in": "body",
            "description": "Field data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Field"
            }
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FieldResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "words"
        ],
        "summary": "Delete field from document.",
        "operationId": "DeleteField",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The file name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Index",
            "in": "path",
            "description": "Object index",
            "required": true,
            "type": "integer"
          },
          {
            "name": "NodePath",
            "in": "query",
            "description": "Path to node, which contains collection of fields.",
            "required": false,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "RevisionAuthor",
            "in": "query",
            "description": "Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.",
            "type": "string"
          },
          {
            "name": "RevisionDateTime",
            "in": "query",
            "description": "The date and time to use for revisions.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SaaSposeResponse"
            }
          }
        }
      }
    },
    "/words/{name}/revisions/acceptAll": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Accept all revisions in document",
        "operationId": "AcceptAllRevisions",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RevisionsModificationResponse"
            }
          }
        }
      }
    },
    "/words/{name}/revisions/rejectAll": {
      "post": {
        "tags": [
          "words"
        ],
        "summary": "Reject all revisions in document",
        "operationId": "RejectAllRevisions",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "The document name.",
            "required": true,
            "type": "string"
          },
          {
            "name": "DestFileName",
            "in": "query",
            "description": "Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.",
            "type": "string"
          },
          {
            "name": "Storage",
            "in": "query",
            "description": "File storage, which have to be used.",
            "type": "string"
          },
          {
            "name": "Folder",
            "in": "query",
            "description": "Original document folder.",
            "type": "string"
          },
          {
            "name": "LoadEncoding",
            "in": "query",
            "description": "Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.",
            "type": "string"
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password for opening an encrypted document.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RevisionsModificationResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "TiffSaveOptionsData": {
      "description": "Container class for tiff save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "TiffBinarizationMethod": {
              "description": "Specifies method used while converting images to 1 bpp format.",
              "type": "string"
            },
            "TiffCompression": {
              "description": "Type of compression.",
              "type": "string"
            }
          }
        }
      ]
    },
    "GraphicsQualityOptionsData": {
      "description": "Allows to specify additional System.Drawing.Graphics quality options.",
      "type": "object",
      "properties": {
        "CompositingMode": {
          "description": "Gets or sets a value that specifies how composited images are drawn to this Graphics.",
          "enum": [
            "SourceOver",
            "SourceCopy"
          ],
          "type": "string"
        },
        "CompositingQuality": {
          "description": "Gets or sets the rendering quality of composited images drawn to this Graphics.",
          "enum": [
            "Invalid",
            "Default",
            "HighSpeed",
            "HighQuality",
            "GammaCorrected",
            "AssumeLinear"
          ],
          "type": "string"
        },
        "InterpolationMode": {
          "description": "Gets or sets the interpolation mode associated with this Graphics.",
          "enum": [
            "Invalid",
            "Default",
            "Low",
            "High",
            "Bilinear",
            "Bicubic",
            "NearestNeighbor",
            "HighQualityBilinear",
            "HighQualityBicubic"
          ],
          "type": "string"
        },
        "SmoothingMode": {
          "description": "Gets or sets the rendering quality for this Graphics.",
          "enum": [
            "Invalid",
            "Default",
            "HighSpeed",
            "HighQuality",
            "None",
            "AntiAlias"
          ],
          "type": "string"
        },
        "StringFormat": {
          "$ref": "#/definitions/StringFormatData",
          "description": "Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features."
        },
        "TextRenderingHint": {
          "description": "Gets or sets the rendering mode for text associated with this Graphics.",
          "enum": [
            "SystemDefault",
            "SingleBitPerPixelGridFit",
            "SingleBitPerPixel",
            "AntiAliasGridFit",
            "AntiAlias",
            "ClearTypeGridFit"
          ],
          "type": "string"
        }
      }
    },
    "MetafileRenderingOptionsData": {
      "description": "container class for options of metafile rendering",
      "type": "object",
      "properties": {
        "EmfPlusDualRenderingMode": {
          "description": "Determines how EMF+ Dual metafiles should be rendered",
          "type": "string"
        },
        "RenderingMode": {
          "description": "Determines how metafile images should be rendered",
          "type": "string"
        },
        "UseEmfEmbeddedToWmf": {
          "description": "Determines how WMF metafiles with embedded EMF metafiles should be rendered",
          "type": "boolean"
        }
      }
    },
    "StringFormatData": {
      "description": "Allows to specify System.Drawing.StringFormat options.",
      "type": "object",
      "properties": {
        "Alignment": {
          "description": "Gets or sets horizontal alignment of the string.",
          "enum": [
            "Near",
            "Center",
            "Far"
          ],
          "type": "string"
        },
        "FormatFlags": {
          "description": "Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.",
          "enum": [
            "DirectionRightToLeft",
            "DirectionVertical",
            "FitBlackBox",
            "DisplayFormatControl",
            "NoFontFallback",
            "MeasureTrailingSpaces",
            "NoWrap",
            "LineLimit",
            "NoClip"
          ],
          "type": "string"
        },
        "HotkeyPrefix": {
          "description": "Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.",
          "enum": [
            "None",
            "Show",
            "Hide"
          ],
          "type": "string"
        },
        "LineAlignment": {
          "description": "Gets or sets the vertical alignment of the string.",
          "enum": [
            "Near",
            "Center",
            "Far"
          ],
          "type": "string"
        },
        "Trimming": {
          "description": "Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.",
          "enum": [
            "None",
            "Character",
            "Word",
            "EllipsisCharacter",
            "EllipsisWord",
            "EllipsisPath"
          ],
          "type": "string"
        }
      }
    },
    "SaveResponse": {
      "description": "Save response.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "SaveResult": {
              "$ref": "#/definitions/SaveResult",
              "description": "Save result."
            }
          }
        }
      ]
    },
    "SaveResult": {
      "description": "Result of saving.",
      "type": "object",
      "properties": {
        "SourceDocument": {
          "$ref": "#/definitions/FileLink",
          "description": "Link to source document."
        },
        "DestDocument": {
          "$ref": "#/definitions/FileLink",
          "description": "Link to destination document."
        },
        "AdditionalItems": {
          "description": "Links to additional items (css, images etc).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileLink"
          }
        }
      }
    },
    "FileLink": {
      "description": "Provides information for the file link.",
      "type": "object",
      "properties": {
        "Href": {
          "description": "The \"href\" attribute contains the link's IRI. atom:link elements MUST\r\nhave an href attribute, whose value MUST be a IRI reference",
          "type": "string"
        },
        "Rel": {
          "description": "atom:link elements MAY have a \"rel\" attribute that indicates the link\r\nrelation type.  If the \"rel\" attribute is not present, the link\r\nelement MUST be interpreted as if the link relation type is \"alternate\".",
          "type": "string"
        },
        "Type": {
          "description": "On the link element, the \"type\" attribute's value is an advisory\r\nmedia type: it is a hint about the type of the representation that is\r\nexpected to be returned when the value of the href attribute is\r\ndereferenced.  Note that the type attribute does not override the\r\nactual media type returned with the representation.",
          "type": "string"
        },
        "Title": {
          "description": "The \"title\" attribute conveys human-readable information about the\r\nlink.  The content of the \"title\" attribute is Language-Sensitive.",
          "type": "string"
        }
      }
    },
    "DocSaveOptionsData": {
      "description": "container class for doc/dot save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "Password": {
              "description": "Password",
              "type": "string"
            },
            "SaveRoutingSlip": {
              "description": "Determine whether or not save RoutingSlip data saved to output document",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "HtmlSaveOptionsData": {
      "description": "container class for html save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "PrettyFormat": {
              "description": "Specifies whether or not use pretty formats output",
              "type": "boolean"
            },
            "AllowNegativeIndent": {
              "description": "Specifies whether negative left and right indents of paragraphs are allowed (not normalized)",
              "type": "boolean"
            },
            "CssStyleSheetFileName": {
              "description": "Specifies the name of the CSS file written when the document is exported to HTML",
              "type": "string"
            },
            "CssStyleSheetType": {
              "description": "Specifies how CSS styles are exported",
              "type": "string"
            },
            "DocumentSplitCriteria": {
              "description": "Specifies how the document should be split when saving",
              "type": "string"
            },
            "DocumentSplitHeadingLevel": {
              "format": "int32",
              "description": "Specifies the maximum level of headings at which to split the document",
              "type": "integer"
            },
            "Encoding": {
              "description": "Specifies the encoding to use when exporting",
              "type": "string"
            },
            "ExportDocumentProperties": {
              "description": "Specifies whether to export built-in and custom document properties",
              "type": "boolean"
            },
            "ExportFontsAsBase64": {
              "description": "Specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.",
              "type": "boolean"
            },
            "ExportFontResources": {
              "description": "Specifies whether font resources should be exported",
              "type": "boolean"
            },
            "ExportHeadersFootersMode": {
              "description": "Specifies how headers and footers are output",
              "type": "string"
            },
            "ExportImagesAsBase64": {
              "description": "Specifies whether images are saved in Base64 format",
              "type": "boolean"
            },
            "ExportLanguageInformation": {
              "description": "Specifies whether language information is exported",
              "type": "boolean"
            },
            "ExportListLabels": {
              "description": "Controls how list labels are output",
              "type": "string"
            },
            "ExportMetafileAsRaster": {
              "description": "Specifies whether to convert metafiles into raster images when exporting",
              "type": "boolean"
            },
            "ExportOriginalUrlForLinkedImages": {
              "description": "Specifies whether original URL should be used as the URL of the linked images.\r\nDefault value is false.",
              "type": "boolean"
            },
            "ExportPageMargins": {
              "description": "Specifies whether page margins is exported to HTML, MHTML or EPUB.\r\nDefault is false.",
              "type": "boolean"
            },
            "ExportPageSetup": {
              "description": "Specifies whether page setup is exported",
              "type": "boolean"
            },
            "ExportRelativeFontSize": {
              "description": "Specifies whether font sizes should be output in relative units when saving",
              "type": "boolean"
            },
            "ExportRoundtripInformation": {
              "description": "Specifies whether to write the roundtrip information when saving to HTML\r\nDefault value is true.",
              "type": "boolean"
            },
            "ExportTextBoxAsSvg": {
              "description": "Controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.\r\n<remarks>\r\n  When set to true, exports textboxes as inline \"svg\" elements. When false, exports as \"image\" elements.\r\n</remarks>",
              "type": "boolean"
            },
            "ExportTextInputFormFieldAsText": {
              "description": "Controls how text input form fields are saved",
              "type": "boolean"
            },
            "ExportTocPageNumbers": {
              "description": "Specifies whether to write page numbers to table of contents when saving",
              "type": "boolean"
            },
            "ExportXhtmlTransitional": {
              "description": "Specifies whether to write the DOCTYPE declaration when saving",
              "type": "boolean"
            },
            "FontsFolder": {
              "description": "Specifies the physical folder where fonts are saved when exporting a document",
              "type": "string"
            },
            "FontsFolderAlias": {
              "description": "Specifies the name of the folder used to construct font URIs",
              "type": "string"
            },
            "FontResourcesSubsettingSizeThreshold": {
              "format": "int32",
              "description": "Controls which font resources need subsetting when saving",
              "type": "integer"
            },
            "HtmlVersion": {
              "description": "Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.  \r\nDefault value is Aspose.Words.Saving.HtmlVersion.Xhtml.",
              "enum": [
                "Xhtml",
                "Html5"
              ],
              "type": "string"
            },
            "ImagesFolder": {
              "description": "Specifies the physical folder where images are saved when exporting a document",
              "type": "string"
            },
            "ImagesFolderAlias": {
              "description": "Specifies the name of the folder used to construct image URIs",
              "type": "string"
            },
            "ImageResolution": {
              "format": "int32",
              "description": "Specifies the output resolution for images when exporting",
              "type": "integer"
            },
            "OfficeMathOutputMode": {
              "description": "Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.",
              "enum": [
                "Image",
                "MathML",
                "Text"
              ],
              "type": "string"
            },
            "ResourceFolder": {
              "description": "Specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.",
              "type": "string"
            },
            "ResourceFolderAlias": {
              "description": "Specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.",
              "type": "string"
            },
            "ScaleImageToShapeSize": {
              "description": "Specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting",
              "type": "boolean"
            },
            "TableWidthOutputMode": {
              "description": "Controls how table, row and cell widths are exported",
              "type": "string"
            },
            "ExportDropDownFormFieldAsText": {
              "description": "Controls how drop-down form fields are saved to HTML.\r\nDefault value is false.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "EpubSaveOptionsData": {
      "description": "Container class for epub save options.",
      "allOf": [
        {
          "$ref": "#/definitions/HtmlSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "EpubNavigationMapLevel": {
              "format": "int32",
              "description": "Specifies the maximum level of headings populated to the navigation map when exporting",
              "type": "integer"
            }
          }
        }
      ]
    },
    "FixedPageSaveOptionsData": {
      "description": "Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS, SWF, images etc).",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "JpegQuality": {
              "format": "int32",
              "description": "Determines the quality of the JPEG images inside PDF document.",
              "type": "integer"
            },
            "MetafileRenderingOptions": {
              "$ref": "#/definitions/MetafileRenderingOptionsData",
              "description": "Allows to specify metafile rendering options."
            },
            "NumeralFormat": {
              "description": "Indicates the symbol set that is used to represent numbers while rendering to fixed page formats",
              "type": "string"
            },
            "OptimizeOutput": {
              "description": "Flag indicates whether it is required to optimize output of XPS. \r\nIf this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated. \r\nNote: The accuracy of the content display may be affected if this property is set to true.  Default is false.",
              "type": "boolean"
            },
            "PageCount": {
              "format": "int32",
              "description": "Determines number of pages to render",
              "type": "integer"
            },
            "PageIndex": {
              "format": "int32",
              "description": "Determines 0-based index of the first page to render",
              "type": "integer"
            }
          }
        }
      ]
    },
    "HtmlFixedSaveOptionsData": {
      "description": "container class for fixed html save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "CssClassNamesPrefix": {
              "description": "Specifies prefix which is added to all class names in style.css file.\r\nDefault value is \"aw\".",
              "type": "string"
            },
            "ExportEmbeddedCss": {
              "description": "Specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document.",
              "type": "boolean"
            },
            "ExportEmbeddedFonts": {
              "description": "Specifies whether fonts should be embedded into Html document in Base64 format.",
              "type": "boolean"
            },
            "ExportEmbeddedImages": {
              "description": "Specifies whether images should be embedded into Html document in Base64 format.",
              "type": "boolean"
            },
            "ExportFormFields": {
              "description": "Gets or sets indication of whether form fields are exported as interactive items (as 'input' tag) rather than converted to text or graphics.",
              "type": "boolean"
            },
            "Encoding": {
              "description": "Encoding.",
              "type": "string"
            },
            "FontFormat": {
              "description": "Specifies export format of fonts",
              "type": "string"
            },
            "ResourcesFolder": {
              "description": "Specifies the physical folder where resources are saved when exporting a document",
              "type": "string"
            },
            "ResourcesFolderAlias": {
              "description": "Specifies the name of the folder used to construct resource URIs",
              "type": "string"
            },
            "ShowPageBorder": {
              "description": "Specifies whether border around pages should be shown.",
              "type": "boolean"
            },
            "PageHorizontalAlignment": {
              "description": "Specifies the horizontal alignment of pages in an HTML document.\r\nDefault value is HtmlFixedHorizontalPageAlignment.Center.",
              "type": "string"
            },
            "PageMargins": {
              "format": "double",
              "description": "Specifies the margins around pages in an HTML document.\r\nThe margins value is measured in points and should be equal to or greater than 0.\r\nDefault value is 10 points.",
              "type": "number"
            }
          }
        }
      ]
    },
    "ImageSaveOptionsData": {
      "description": "Container abstract class for image save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "ImageBrightness": {
              "format": "float",
              "description": "Brightness of image",
              "type": "number"
            },
            "ImageColorMode": {
              "description": "Color mode of image",
              "type": "string"
            },
            "ImageContrast": {
              "format": "float",
              "description": "Contrast of image",
              "type": "number"
            },
            "GraphicsQualityOptions": {
              "$ref": "#/definitions/GraphicsQualityOptionsData",
              "description": "Allows to specify additional System.Drawing.Graphics quality options."
            },
            "PixelFormat": {
              "description": "Pixel format of image",
              "type": "string"
            },
            "PaperColor": {
              "description": "Background (paper) color of image",
              "type": "string"
            },
            "Resolution": {
              "format": "float",
              "description": "Sets both horizontal and vertical resolution for the generated images, in dots per inch.\r\n<remarks>\r\nThis property has effect only when saving to raster image formats.\r\nThe default value is 96.\r\n</remarks>",
              "type": "number"
            },
            "HorizontalResolution": {
              "format": "float",
              "description": "Gets or sets the horizontal resolution for the generated images, in dots per inch.\r\n<remarks>\r\nThis property has effect only when saving to raster image formats.\r\nThe default value is 96.\r\n</remarks>",
              "type": "number"
            },
            "VerticalResolution": {
              "format": "float",
              "description": "Gets or sets the vertical resolution for the generated images, in dots per inch.\r\n<remarks>\r\nThis property has effect only when saving to raster image formats.\r\nThe default value is 96.\r\n</remarks>",
              "type": "number"
            },
            "Scale": {
              "format": "float",
              "description": "Zoom factor of image",
              "type": "number"
            },
            "UseHighQualityRendering": {
              "description": "Determine whether or not to use high quality (i.e. slow) rendering algorithms",
              "type": "boolean"
            },
            "UseAntiAliasing": {
              "description": "Determine whether or not to use anti-aliasing for rendering",
              "type": "boolean"
            },
            "UseGdiEmfRenderer": {
              "description": "Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "BmpSaveOptionsData": {
      "description": "Container class for bmp save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "EmfSaveOptionsData": {
      "description": "Container class for emf save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "GifSaveOptionsData": {
      "description": "Container class for gif save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "JpegSaveOptionsData": {
      "description": "container class for jpeg save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "PngSaveOptionsData": {
      "description": "container class for png save options.",
      "allOf": [
        {
          "$ref": "#/definitions/ImageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "MhtmlSaveOptionsData": {
      "description": "Container class for mhtml save options.",
      "allOf": [
        {
          "$ref": "#/definitions/HtmlSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "OdtSaveOptionsData": {
      "description": "container class for odt/ott save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "PrettyFormat": {
              "description": "Specifies whether or not use pretty formats output",
              "type": "boolean"
            },
            "IsStrictSchema11": {
              "description": "Specifies whether export should correspond to ODT specification 1.1 strictly",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "OoxmlSaveOptionsData": {
      "description": "container class for docx/docm/dotx/dotm/flatopc save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "PrettyFormat": {
              "description": "Specifies whether or not use pretty formats output",
              "type": "boolean"
            },
            "Compliance": {
              "description": "Specifies the OOXML version for the output document",
              "type": "string"
            },
            "Password": {
              "description": "Specifies a password to encrypt document using ECMA376 Standard encryption algorithm",
              "type": "string"
            }
          }
        }
      ]
    },
    "PclSaveOptionsData": {
      "description": "Container class for pcl save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "FalllbackFontName": {
              "description": "Name of the font that will be used if no expected font is found in printer and built-in fonts collections.",
              "type": "string"
            },
            "RasterizeTransformedElements": {
              "description": "Gets or sets a value determining whether or not complex transformed elements should be rasterized before saving to PCL document.  Default is true.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "PdfSaveOptionsData": {
      "description": "container class for pdf save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "BookmarksOutlineLevel": {
              "format": "int32",
              "description": "Specifies the level in the PDF document outline at which to display Word bookmarks",
              "type": "integer"
            },
            "CreateNoteHyperlinks": {
              "description": "Specifies whether to convert footnote/endnote references in main text story into active hyperlinks.\r\nWhen clicked the hyperlink will lead to the corresponding footnote/endnote.\r\nDefault is false.",
              "type": "boolean"
            },
            "Compliance": {
              "description": "Specifies the PDF standards compliance level for output documents",
              "type": "string"
            },
            "DigitalSignatureDetails": {
              "$ref": "#/definitions/PdfDigitalSignatureDetailsData",
              "description": "Specifies the details for signing the output PDF document"
            },
            "DisplayDocTitle": {
              "description": "A flag specifying whether the window’s title bar should display the document title taken from the Title entry of the document information dictionary.",
              "type": "boolean"
            },
            "DownsampleImages": {
              "description": "Specifies whether or not the images should be downsampled",
              "type": "boolean"
            },
            "DownsampleResolution": {
              "format": "int32",
              "description": "Specifies the resolution in pixels per inch to which the images should be downsampled",
              "type": "integer"
            },
            "DownsampleOptions": {
              "$ref": "#/definitions/DownsampleOptionsData",
              "description": "Allows to specify downsample options."
            },
            "EmbedFullFonts": {
              "description": "Controls how fonts are embedded into the resulting PDF documents",
              "type": "boolean"
            },
            "EmbedStandardWindowsFonts": {
              "description": "Determines whether or not to embed standard windows fonts Arial and Times New Roman",
              "type": "boolean"
            },
            "EncryptionDetails": {
              "$ref": "#/definitions/PdfEncryptionDetailsData",
              "description": "Specifies the details for encrypting the output PDF document"
            },
            "ExpandedOutlineLevels": {
              "format": "int32",
              "description": "Specifies how many levels in the PDF document outline to show expanded when the PDF file is viewed",
              "type": "integer"
            },
            "ExportCustomPropertiesAsMetadata": {
              "description": "Determines whether or not to export custom properties of document as Metadata",
              "type": "boolean"
            },
            "ExportDocumentStructure": {
              "description": "Determines whether or not to export document structure",
              "type": "boolean"
            },
            "FontEmbeddingMode": {
              "description": "Specifies the font embedding mode",
              "type": "string"
            },
            "HeadingsOutlineLevels": {
              "format": "int32",
              "description": "Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the PDF document outline",
              "type": "integer"
            },
            "ImageCompression": {
              "description": "Specifies compression type to be used for all images in the document",
              "type": "string"
            },
            "OpenHyperlinksInNewWindow": {
              "description": "Determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser",
              "type": "boolean"
            },
            "OutlineOptions": {
              "$ref": "#/definitions/OutlineOptionsData",
              "description": "Allows to specify outline options"
            },
            "PageMode": {
              "description": "Specifies how the PDF document should be displayed when opened in the PDF reader",
              "type": "string"
            },
            "ImageColorSpaceExportMode": {
              "description": "Specifies how the color space will be selected for the images in PDF document.",
              "type": "string"
            },
            "PreserveFormFields": {
              "description": "Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text",
              "type": "boolean"
            },
            "TextCompression": {
              "description": "Specifies compression type to be used for all textual content in the document",
              "type": "string"
            },
            "UseCoreFonts": {
              "description": "Determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts",
              "type": "boolean"
            },
            "UseBookFoldPrintingSettings": {
              "description": "Determines whether the document should be saved using a booklet printing layout",
              "type": "boolean"
            },
            "ZoomBehavior": {
              "description": "Determines what type of zoom should be applied when a document is opened with a PDF viewer",
              "type": "string"
            },
            "ZoomFactor": {
              "format": "int32",
              "description": "Determines zoom factor (in percentages) for a document",
              "type": "integer"
            },
            "CustomPropertiesExport": {
              "description": "Gets or sets a value determining the way {Aspose.Words.Properties.CustomDocumentProperties} are exported to PDF file.\r\nDefault value is {Aspose.Words.Saving.PdfCustomPropertiesExport.None}.",
              "type": "string"
            },
            "PreblendImages": {
              "description": "Gets or sets a value determining whether or not to preblend transparent images with black background color.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "PdfDigitalSignatureDetailsData": {
      "description": "container class for details of digital signature",
      "type": "object",
      "properties": {
        "CertificateFilename": {
          "description": "certificate's filename using for signing",
          "type": "string"
        },
        "HashAlgorithm": {
          "description": "hash algorithm",
          "type": "string"
        },
        "Location": {
          "description": "location of the signing",
          "type": "string"
        },
        "Reason": {
          "description": "reason for the signing",
          "type": "string"
        },
        "SignatureDate": {
          "format": "date-time",
          "description": "date of the signing",
          "type": "string"
        }
      }
    },
    "DownsampleOptionsData": {
      "description": "Container class for Downsample options",
      "type": "object",
      "properties": {
        "DownsampleImages": {
          "description": "Specifies whether images should be downsampled.",
          "type": "boolean"
        },
        "Resolution": {
          "format": "int32",
          "description": "Specifies the resolution in pixels per inch which the images should be downsampled to.",
          "type": "integer"
        },
        "ResolutionThreshold": {
          "format": "int32",
          "description": "Specifies the threshold resolution in pixels per inch.\r\nIf resolution of an image in the document is less than threshold value, \r\nthe downsampling algorithm will not be applied.\r\nA value of 0 means the threshold check is not used and all images that can be reduced in size are downsampled.",
          "type": "integer"
        }
      }
    },
    "PdfEncryptionDetailsData": {
      "description": "container class for details of encryption",
      "type": "object",
      "properties": {
        "EncryptionAlgorithm": {
          "description": "Specifies the encryption algorithm to use",
          "type": "string"
        },
        "OwnerPassword": {
          "description": "Specifies the owner password for the encrypted PDF document",
          "type": "string"
        },
        "Permissions": {
          "description": "Specifies the operations that are allowed to a user on an encrypted PDF document",
          "type": "string"
        },
        "UserPassword": {
          "description": "Specifies the user password required for opening the encrypted PDF document",
          "type": "string"
        }
      }
    },
    "OutlineOptionsData": {
      "description": "container class for outline options",
      "type": "object",
      "properties": {
        "BookmarksOutlineLevels": {
          "description": "Allows to specify individual bookmarks outline level",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BookmarksOutlineLevelData"
          }
        },
        "DefaultBookmarksOutlineLevel": {
          "format": "int32",
          "description": "Specifies the default level in the document outline at which to display Word bookmarks",
          "type": "integer"
        },
        "ExpandedOutlineLevels": {
          "format": "int32",
          "description": "Specifies how many levels in the document outline to show expanded when the file is viewed",
          "type": "integer"
        },
        "HeadingsOutlineLevels": {
          "format": "int32",
          "description": "Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the document outline",
          "type": "integer"
        }
      }
    },
    "BookmarksOutlineLevelData": {
      "description": "container class for individual bookmarks outline level",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Specify the bookmark's name",
          "type": "string"
        },
        "BookmarksOutlineLevel": {
          "format": "int32",
          "description": "Specify the bookmark's level",
          "type": "integer"
        }
      }
    },
    "PsSaveOptionsData": {
      "description": "container class for ps save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "UseBookFoldPrintingSettings": {
              "description": "Determines whether the document should be saved using a booklet printing layout",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "RtfSaveOptionsData": {
      "description": "container class for rtf save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "PrettyFormat": {
              "description": "Specifies whether or not use pretty formats output",
              "type": "boolean"
            },
            "ExportCompactSize": {
              "description": "Allows to make output RTF documents smaller in size, but if they contain RTL (right-to-left) text, it will not be displayed correctly",
              "type": "boolean"
            },
            "ExportImagesForOldReaders": {
              "description": "Specifies whether the keywords for \"old readers\" are written to RTF or not",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SvgSaveOptionsData": {
      "description": "container class for svg save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "ExportEmbeddedImages": {
              "description": "Specified whether images should be embedded into SVG document as base64",
              "type": "boolean"
            },
            "FitToViewPort": {
              "description": "Specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.",
              "type": "boolean"
            },
            "ResourcesFolder": {
              "description": "Specifies the physical folder where resources (images) are saved when exporting",
              "type": "string"
            },
            "ResourcesFolderAlias": {
              "description": "Specifies the name of the folder used to construct image URIs",
              "type": "string"
            },
            "ShowPageBorder": {
              "description": "Show/hide page stepper",
              "type": "boolean"
            },
            "TextOutputMode": {
              "description": "Determines how text should be rendered",
              "type": "string"
            }
          }
        }
      ]
    },
    "SwfSaveOptionsData": {
      "description": "container class for swf save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "AllowReadMode": {
              "description": "Allows to enable read mode",
              "type": "boolean"
            },
            "BookmarksOutlineLevel": {
              "format": "int32",
              "description": "Specifies the level in the SWF document outline at which to display Word bookmarks",
              "type": "integer"
            },
            "Compressed": {
              "description": "Specifies whether the generated SWF document should be compressed or not",
              "type": "boolean"
            },
            "EnableContextMenu": {
              "description": "Enable/disable context menu",
              "type": "boolean"
            },
            "ExpandedOutlineLevels": {
              "format": "int32",
              "description": "Specifies how many levels in the SWF document outline to show expanded when the SWF file is viewed",
              "type": "integer"
            },
            "HeadingsOutlineLevels": {
              "format": "int32",
              "description": "Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the SWF document outline",
              "type": "integer"
            },
            "LeftPaneControlFlags": {
              "description": "Control flags used to configure appearance of left panel of SWF viewer",
              "type": "string"
            },
            "LogoImageBytes": {
              "description": "Image that will be displayed as logo in the top right corner of the viewer as string in base64 format",
              "type": "string"
            },
            "LogoLink": {
              "description": "Specifies the full hyperlink address for a logo",
              "type": "string"
            },
            "OutlineOptions": {
              "$ref": "#/definitions/OutlineOptionsData",
              "description": "Allows to specify outline options"
            },
            "ShowBottomPane": {
              "description": "Show/hide bottom pane",
              "type": "boolean"
            },
            "ShowFullScreen": {
              "description": "Show/hide fullscreen button",
              "type": "boolean"
            },
            "ShowLeftPane": {
              "description": "Show/hide left pane",
              "type": "boolean"
            },
            "ShowPageBorder": {
              "description": "Specifies whether border around pages should be shown",
              "type": "boolean"
            },
            "ShowPageStepper": {
              "description": "Show/hide page stepper",
              "type": "boolean"
            },
            "ShowSearch": {
              "description": "Show/hide search section",
              "type": "boolean"
            },
            "ShowTopPane": {
              "description": "Show/hide whole top pane",
              "type": "boolean"
            },
            "StartOpenLeftPane": {
              "description": "Start with opened left pane",
              "type": "boolean"
            },
            "ToolTipsFontName": {
              "description": "Specifies a font used for tooltips in SWF viewer",
              "type": "string"
            },
            "TopPaneControlFlags": {
              "description": "Control flags used to configure appearance of top panel of SWF viewer",
              "type": "string"
            },
            "ViewerIncluded": {
              "description": "Specifies whether the generated SWF document should include the integrated document viewer or not",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "TextSaveOptionsData": {
      "description": "Container class for text save options.",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "Encoding": {
              "description": "Specifies the encoding to use when exporting in plain text format",
              "type": "string"
            },
            "ExportHeadersFooters": {
              "description": "Specifies whether to output headers and footers when exporting in plain text format",
              "type": "boolean"
            },
            "ForcePageBreaks": {
              "description": "Allows to specify whether the page breaks should be preserved during export.\r\nThe default value is false.",
              "type": "boolean"
            },
            "ParagraphBreak": {
              "description": "Specifies the string to use as a paragraph break when exporting in plain text format",
              "type": "string"
            },
            "PreserveTableLayout": {
              "description": "Specifies whether the program should attempt to preserve layout of tables when saving in the plain text format",
              "type": "boolean"
            },
            "SimplifyListLabels": {
              "description": "Specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "WordMLSaveOptionsData": {
      "description": "container class for wml save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "PrettyFormat": {
              "description": "Specifies whether or not use pretty formats output",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "XamlFixedSaveOptionsData": {
      "description": "container class for xaml fixed save options",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "ResourcesFolder": {
              "description": "Specifies the physical folder where resources (images and fonts) are saved when exporting a document to fixed page Xaml format.\r\nDefault is null.",
              "type": "string"
            },
            "ResourcesFolderAlias": {
              "description": "Specifies the name of the folder used to construct image URIs written into an fixed page Xaml document.\r\nDefault is null.",
              "type": "string"
            }
          }
        }
      ]
    },
    "XamlFlowSaveOptionsData": {
      "description": "container class for xaml flow save options",
      "allOf": [
        {
          "$ref": "#/definitions/SaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "ImagesFolder": {
              "description": "Specifies the physical folder where images are saved when exporting",
              "type": "string"
            },
            "ImagesFolderAlias": {
              "description": "Specifies the name of the folder used to construct image URIs",
              "type": "string"
            }
          }
        }
      ]
    },
    "XpsSaveOptionsData": {
      "description": "Container class for xps save options.",
      "allOf": [
        {
          "$ref": "#/definitions/FixedPageSaveOptionsData"
        },
        {
          "type": "object",
          "properties": {
            "BookmarksOutlineLevel": {
              "format": "int32",
              "description": "Specifies the level in the XPS document outline at which to display Word bookmarks.",
              "type": "integer"
            },
            "HeadingsOutlineLevels": {
              "format": "int32",
              "description": "Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the XPS document outline.",
              "type": "integer"
            },
            "OutlineOptions": {
              "$ref": "#/definitions/OutlineOptionsData",
              "description": "Allows to specify outline options"
            },
            "UseBookFoldPrintingSettings": {
              "description": "Determines whether the document should be saved using a booklet printing layout",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "SaveOptionsData": {
      "description": "base container class for save options data",
      "type": "object",
      "properties": {
        "ColorMode": {
          "description": "Gets or sets a value determining how colors are rendered.\r\n{ Normal | Grayscale}",
          "type": "string"
        },
        "SaveFormat": {
          "description": "format of save",
          "type": "string"
        },
        "FileName": {
          "description": "name of destination file",
          "type": "string"
        },
        "DmlRenderingMode": {
          "description": "Gets or sets a value determining how DrawingML shapes are rendered.\r\n{ Fallback | DrawingML }",
          "type": "string"
        },
        "DmlEffectsRenderingMode": {
          "description": "Gets or sets a value determining how DrawingML effects are rendered.\r\n{ Simplified | None | Fine }",
          "type": "string"
        },
        "ZipOutput": {
          "description": "Controls zip output or not.\r\nDefault value is false.",
          "type": "boolean"
        },
        "UpdateSdtContent": {
          "description": "Gets or sets value determining whether content of {Aspose.Words.Markup.StructuredDocumentTag} is updated before saving.",
          "type": "boolean"
        },
        "UpdateFields": {
          "description": "Gets or sets a value determining if fields should be updated before saving the document to a fixed page format.\r\nDefault value for this property is <b>true</b>",
          "type": "boolean"
        }
      },
      "discriminator": "SaveOptionsDataType"
    },
    "RunsResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/{paragraphPath}/runs",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Runs": {
              "$ref": "#/definitions/Runs",
              "description": "Collection of runs."
            }
          }
        }
      ]
    },
    "Runs": {
      "description": "Represents DTO for collection of runs.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Run"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "Run": {
      "description": "Run element",
      "type": "object",
      "properties": {
        "Text": {
          "description": "Run's text",
          "type": "string"
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "WordsApiLink": {
      "description": "Provides information for the words api resource link.",
      "type": "object",
      "properties": {
        "Href": {
          "description": "The \"href\" attribute contains the link's IRI. atom:link elements MUST\r\nhave an href attribute, whose value MUST be a IRI reference",
          "type": "string"
        },
        "Rel": {
          "description": "atom:link elements MAY have a \"rel\" attribute that indicates the link\r\nrelation type.  If the \"rel\" attribute is not present, the link\r\nelement MUST be interpreted as if the link relation type is \"alternate\".",
          "type": "string"
        },
        "Type": {
          "description": "On the link element, the \"type\" attribute's value is an advisory\r\nmedia type: it is a hint about the type of the representation that is\r\nexpected to be returned when the value of the href attribute is\r\ndereferenced.  Note that the type attribute does not override the\r\nactual media type returned with the representation.",
          "type": "string"
        },
        "Title": {
          "description": "The \"title\" attribute conveys human-readable information about the\r\nlink.  The content of the \"title\" attribute is Language-Sensitive.",
          "type": "string"
        }
      }
    },
    "RunResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs/{0}/runs/{1}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Run": {
              "$ref": "#/definitions/Run",
              "description": "Run"
            }
          }
        }
      ]
    },
    "WordsApiErrorResponse": {
      "description": "Response for Api error",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Message": {
              "description": "Error message.",
              "type": "string"
            }
          }
        }
      ]
    },
    "BookmarkResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Bookmark": {
              "$ref": "#/definitions/Bookmark"
            }
          }
        }
      ]
    },
    "Bookmark": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "BookmarksResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Bookmarks": {
              "$ref": "#/definitions/Bookmarks"
            }
          }
        }
      ]
    },
    "Bookmarks": {
      "type": "object",
      "properties": {
        "BookmarkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bookmark"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "CommentResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/comments/0",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Comment": {
              "$ref": "#/definitions/Comment",
              "description": "Comment information"
            }
          }
        }
      ]
    },
    "Comment": {
      "description": "Comment.",
      "type": "object",
      "properties": {
        "RangeStart": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Link to comment range start node."
        },
        "RangeEnd": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Link to comment range end node."
        },
        "Author": {
          "description": "Returns or sets the author name for a comment.",
          "type": "string"
        },
        "Initial": {
          "description": "Returns or sets the initials of the user associated with a specific comment.",
          "type": "string"
        },
        "DateTime": {
          "format": "date-time",
          "description": "Gets the date and time that the comment was made.",
          "type": "string"
        },
        "Text": {
          "description": "This is a convenience property that allows to easily get or set text of the comment.",
          "type": "string"
        },
        "Content": {
          "$ref": "#/definitions/StoryChildNodes",
          "description": "Content of comment"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "DocumentPosition": {
      "description": "Represents a position in the document tree.",
      "type": "object",
      "properties": {
        "Node": {
          "$ref": "#/definitions/NodeLink",
          "description": "Link to  node."
        },
        "Offset": {
          "format": "int32",
          "description": "Offset into the node.",
          "type": "integer"
        }
      }
    },
    "StoryChildNodes": {
      "description": "Child nodes of {Aspose.Words.Story} or {Aspose.Words.InlineStory}",
      "type": "object",
      "properties": {
        "ChildNodes": {
          "description": "Child nodes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeLink"
          }
        }
      }
    },
    "NodeLink": {
      "description": "Reference to node",
      "type": "object",
      "properties": {
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "CommentsResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/comments",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Comments": {
              "$ref": "#/definitions/CommentsCollection",
              "description": "Collection of comments."
            }
          }
        }
      ]
    },
    "CommentsCollection": {
      "description": "Collection of comments.",
      "type": "object",
      "properties": {
        "CommentList": {
          "description": "Collection of comments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "BorderResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET {nodeWithBorders}/borders.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Border": {
              "$ref": "#/definitions/Border",
              "description": "Table."
            }
          }
        }
      ]
    },
    "Border": {
      "description": "Represents a border of an object.",
      "type": "object",
      "properties": {
        "BorderType": {
          "description": "Gets or sets the border type.",
          "enum": [
            "None",
            "Bottom",
            "Left",
            "Right",
            "Top",
            "Horizontal",
            "Vertical",
            "DiagonalDown",
            "DiagonalUp"
          ],
          "type": "string"
        },
        "Color": {
          "$ref": "#/definitions/XmlColor",
          "description": "Gets or sets the border color."
        },
        "DistanceFromText": {
          "format": "double",
          "description": "Gets or sets distance of the border from text or from the page edge in points.",
          "type": "number"
        },
        "LineStyle": {
          "description": "Gets or sets the border style.",
          "enum": [
            "None",
            "Single",
            "Thick",
            "Double",
            "Hairline",
            "Dot",
            "DashLargeGap",
            "DotDash",
            "DotDotDash",
            "Triple",
            "ThinThickSmallGap",
            "ThickThinSmallGap",
            "ThinThickThinSmallGap",
            "ThinThickMediumGap",
            "ThickThinMediumGap",
            "ThinThickThinMediumGap",
            "ThinThickLargeGap",
            "ThickThinLargeGap",
            "ThinThickThinLargeGap",
            "Wave",
            "DoubleWave",
            "DashSmallGap",
            "DashDotStroker",
            "Emboss3D",
            "Engrave3D",
            "Outset",
            "Inset"
          ],
          "type": "string"
        },
        "LineWidth": {
          "format": "double",
          "description": "Gets or sets the border width in points.",
          "type": "number"
        },
        "Shadow": {
          "description": "Gets or sets a value indicating whether the border has a shadow.",
          "type": "boolean"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "XmlColor": {
      "description": "Utility class for {System.Drawing.Color} serialization",
      "type": "object",
      "properties": {
        "Web": {
          "description": "HTML string color representation",
          "type": "string"
        },
        "Alpha": {
          "format": "int32",
          "description": "Alpha component of color structure",
          "type": "integer"
        }
      }
    },
    "BordersResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET {nodeWithBorders}/borders.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Borders": {
              "$ref": "#/definitions/BordersCollection",
              "description": "Table."
            }
          }
        }
      ]
    },
    "BordersCollection": {
      "description": "Collection of borders.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of comments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Border"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "DrawingObjectResponse": {
      "description": "Response for \"drawingObjects/n\" resource.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "DrawingObject": {
              "$ref": "#/definitions/DrawingObject",
              "description": "Drawing object."
            }
          }
        }
      ]
    },
    "DrawingObject": {
      "description": "Represents Drawing Object DTO.",
      "type": "object",
      "properties": {
        "RenderLinks": {
          "description": "A list of links that originate from this {Aspose.Words.Cloud.DTO.DocumentElements.DrawingObjects.DrawingObjectDto}.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WordsApiLink"
          }
        },
        "Width": {
          "format": "double",
          "description": "Width of the drawing objects in points.",
          "type": "number"
        },
        "Height": {
          "format": "double",
          "description": "Height of the drawing object in points.",
          "type": "number"
        },
        "OleDataLink": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to ole object. Can be null if shape does not have ole data."
        },
        "ImageDataLink": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to image data. Can be null if shape does not have an image."
        },
        "RelativeHorizontalPosition": {
          "description": "Specifies where the distance to the image is measured from.",
          "enum": [
            "Margin",
            "Page",
            "Column",
            "Character",
            "LeftMargin",
            "RightMargin",
            "InsideMargin",
            "OutsideMargin",
            "Default"
          ],
          "type": "string"
        },
        "Left": {
          "format": "double",
          "description": "Distance in points from the origin to the left side of the image.",
          "type": "number"
        },
        "RelativeVerticalPosition": {
          "description": "Specifies where the distance to the image measured from.",
          "enum": [
            "Margin",
            "Page",
            "Paragraph",
            "Line",
            "TopMargin",
            "BottomMargin",
            "InsideMargin",
            "OutsideMargin",
            "TableDefault",
            "TextFrameDefault"
          ],
          "type": "string"
        },
        "Top": {
          "format": "double",
          "description": "Distance in points from the origin to the top side of the image.",
          "type": "number"
        },
        "WrapType": {
          "description": "Specifies how to wrap text around the image.",
          "enum": [
            "None",
            "Inline",
            "TopBottom",
            "Square",
            "Tight",
            "Through"
          ],
          "type": "string"
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "DrawingObjectsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "DrawingObjects": {
              "$ref": "#/definitions/DrawingObjectCollection"
            }
          }
        }
      ]
    },
    "DrawingObjectCollection": {
      "description": "Represents drawing objects collection DTO.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of DrawingObjects links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkElement"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "LinkElement": {
      "description": "Reference to document.",
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FieldResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs/{0}/fields/{1}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Field": {
              "$ref": "#/definitions/Field",
              "description": "Field information"
            }
          }
        }
      ]
    },
    "Field": {
      "description": "Field",
      "type": "object",
      "properties": {
        "Result": {
          "description": "Field result",
          "type": "string"
        },
        "LocaleId": {
          "description": "Gets or sets LCID of the field.",
          "type": "string"
        },
        "FieldCode": {
          "description": "Field code",
          "type": "string"
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FieldsResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/{nodePath}/fields",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Fields": {
              "$ref": "#/definitions/FieldCollection",
              "description": "Collection of fields."
            }
          }
        }
      ]
    },
    "FieldCollection": {
      "description": "Represents DTO for collection of fields.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of fields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FontResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs/{0}/runs/{1}/font",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Font": {
              "$ref": "#/definitions/Font",
              "description": "Font"
            }
          }
        }
      ]
    },
    "Font": {
      "description": "Font element",
      "type": "object",
      "properties": {
        "AllCaps": {
          "description": "True if the font is formatted as all capital letters.",
          "type": "boolean"
        },
        "Bidi": {
          "description": "Specifies whether the contents of this run shall have right-to-left characteristics.",
          "type": "boolean"
        },
        "Bold": {
          "description": "True if the font is formatted as bold.",
          "type": "boolean"
        },
        "BoldBi": {
          "description": "True if the right-to-left text is formatted as bold.",
          "type": "boolean"
        },
        "Border": {
          "$ref": "#/definitions/Border",
          "description": "Border object that specifies border for the font."
        },
        "Color": {
          "$ref": "#/definitions/XmlColor",
          "description": "Gets or sets the color of the font."
        },
        "ComplexScript": {
          "description": "Specifies whether the contents of this run shall be treated as complex script text regardless\r\nof their Unicode character values when determining the formatting for this run.",
          "type": "boolean"
        },
        "DoubleStrikeThrough": {
          "description": "True if the font is formatted as double strikethrough text.",
          "type": "boolean"
        },
        "Emboss": {
          "description": "True if the font is formatted as embossed.",
          "type": "boolean"
        },
        "Engrave": {
          "description": "True if the font is formatted as engraved.",
          "type": "boolean"
        },
        "Hidden": {
          "description": "True if the font is formatted as hidden text.",
          "type": "boolean"
        },
        "HighlightColor": {
          "$ref": "#/definitions/XmlColor",
          "description": "Gets or sets the highlight (marker) color."
        },
        "Italic": {
          "description": "True if the font is formatted as italic.",
          "type": "boolean"
        },
        "ItalicBi": {
          "description": "True if the right-to-left text is formatted as italic.",
          "type": "boolean"
        },
        "Kerning": {
          "format": "double",
          "description": "Gets or sets the font size at which kerning starts.",
          "type": "number"
        },
        "LocaleId": {
          "format": "int32",
          "description": "Gets or sets the locale identifier (language) of the formatted characters.",
          "type": "integer"
        },
        "LocaleIdBi": {
          "format": "int32",
          "description": "Gets or sets the locale identifier (language) of the formatted right-to-left characters.",
          "type": "integer"
        },
        "LocaleIdFarEast": {
          "format": "int32",
          "description": "Gets or sets the locale identifier (language) of the formatted Asian characters.",
          "type": "integer"
        },
        "Name": {
          "description": "Gets or sets the name of the font",
          "type": "string"
        },
        "NameAscii": {
          "description": "Returns or sets the font used for Latin text (characters with character codes from 0 (zero) through 127).",
          "type": "string"
        },
        "NameBi": {
          "description": "Returns or sets the name of the font in a right-to-left language document.",
          "type": "string"
        },
        "NameFarEast": {
          "description": "Returns or sets an East Asian font name.",
          "type": "string"
        },
        "NameOther": {
          "description": "Returns or sets the font used for characters with character codes from 128 through 255.",
          "type": "string"
        },
        "NoProofing": {
          "description": "True when the formatted characters are not to be spell checked.",
          "type": "boolean"
        },
        "Outline": {
          "description": "True if the font is formatted as outline.",
          "type": "boolean"
        },
        "Position": {
          "format": "double",
          "description": "Gets or sets the position of text (in points) relative to the base line.\r\nA positive number raises the text, and a negative number lowers it.",
          "type": "number"
        },
        "Scaling": {
          "format": "int32",
          "description": "Gets or sets character width scaling in percent.",
          "type": "integer"
        },
        "Shadow": {
          "description": "True if the font is formatted as shadowed.",
          "type": "boolean"
        },
        "Size": {
          "format": "double",
          "description": "Gets or sets the font size in points.",
          "type": "number"
        },
        "SizeBi": {
          "format": "double",
          "description": "Gets or sets the font size in points used in a right-to-left document.",
          "type": "number"
        },
        "SmallCaps": {
          "description": "True if the font is formatted as small capital letters.",
          "type": "boolean"
        },
        "Spacing": {
          "format": "double",
          "description": "Returns or sets the spacing (in points) between characters.",
          "type": "number"
        },
        "StrikeThrough": {
          "description": "True if the font is formatted as strikethrough text.",
          "type": "boolean"
        },
        "StyleIdentifier": {
          "description": "Gets or sets the locale independent style identifier of the character style applied to this formatting.",
          "enum": [
            "BookTitle",
            "CommentReference",
            "DefaultParagraphFont",
            "Emphasis",
            "EndnoteReference",
            "FollowedHyperlink",
            "FootnoteReference",
            "HtmlAcronym",
            "HtmlCite",
            "HtmlCode",
            "HtmlDefinition",
            "HtmlKeyboard",
            "HtmlSample",
            "HtmlTypewriter",
            "HtmlVariable",
            "Hyperlink",
            "IntenseEmphasis",
            "IntenseReference",
            "LineNumber",
            "PageNumber",
            "PlaceholderText",
            "Strong",
            "SubtleEmphasis",
            "SubtleReference",
            "BalloonText",
            "BodyText",
            "BodyText2",
            "BodyText3",
            "BodyText1I",
            "BodyText1I2",
            "BodyTextInd",
            "BodyTextInd2",
            "BodyTextInd3",
            "Closing",
            "CommentSubject",
            "CommentText",
            "Date",
            "DocumentMap",
            "EmailSignature",
            "EndnoteText",
            "Footer",
            "FootnoteText",
            "Header",
            "Heading1",
            "Heading2",
            "Heading3",
            "Heading4",
            "Heading5",
            "Heading6",
            "Heading7",
            "Heading8",
            "Heading9",
            "HtmlAddress",
            "HtmlTopOfForm",
            "HtmlBottomOfForm",
            "HtmlPreformatted",
            "IntenseQuote",
            "Macro",
            "MessageHeader",
            "NoteHeading",
            "PlainText",
            "Quote",
            "Salutation",
            "Signature",
            "Subtitle",
            "Title",
            "Bibliography",
            "BlockText",
            "Caption",
            "EnvelopeAddress",
            "EnvelopeReturn",
            "Index1",
            "Index2",
            "Index3",
            "Index4",
            "Index5",
            "Index6",
            "Index7",
            "Index8",
            "Index9",
            "IndexHeading",
            "List",
            "List2",
            "List3",
            "List4",
            "List5",
            "ListBullet",
            "ListBullet2",
            "ListBullet3",
            "ListBullet4",
            "ListBullet5",
            "ListContinue",
            "ListContinue2",
            "ListContinue3",
            "ListContinue4",
            "ListContinue5",
            "ListNumber",
            "ListNumber2",
            "ListNumber3",
            "ListNumber4",
            "ListNumber5",
            "ListParagraph",
            "NoSpacing",
            "Normal",
            "NormalWeb",
            "NormalIndent",
            "TableOfAuthorities",
            "TableOfFigures",
            "ToaHeading",
            "Toc1",
            "Toc2",
            "Toc3",
            "Toc4",
            "Toc5",
            "Toc6",
            "Toc7",
            "Toc8",
            "Toc9",
            "TocHeading",
            "Revision",
            "OutlineList1",
            "OutlineList2",
            "OutlineList3",
            "NoList",
            "ColorfulGrid",
            "ColorfulGridAccent1",
            "ColorfulGridAccent2",
            "ColorfulGridAccent3",
            "ColorfulGridAccent4",
            "ColorfulGridAccent5",
            "ColorfulGridAccent6",
            "ColorfulList",
            "ColorfulListAccent1",
            "ColorfulListAccent2",
            "ColorfulListAccent3",
            "ColorfulListAccent4",
            "ColorfulListAccent5",
            "ColorfulListAccent6",
            "ColorfulShading",
            "ColorfulShadingAccent1",
            "ColorfulShadingAccent2",
            "ColorfulShadingAccent3",
            "ColorfulShadingAccent4",
            "ColorfulShadingAccent5",
            "ColorfulShadingAccent6",
            "DarkList",
            "DarkListAccent1",
            "DarkListAccent2",
            "DarkListAccent3",
            "DarkListAccent4",
            "DarkListAccent5",
            "DarkListAccent6",
            "LightGrid",
            "LightGridAccent1",
            "LightGridAccent2",
            "LightGridAccent3",
            "LightGridAccent4",
            "LightGridAccent5",
            "LightGridAccent6",
            "LightList",
            "LightListAccent1",
            "LightListAccent2",
            "LightListAccent3",
            "LightListAccent4",
            "LightListAccent5",
            "LightListAccent6",
            "LightShading",
            "LightShadingAccent1",
            "LightShadingAccent2",
            "LightShadingAccent3",
            "LightShadingAccent4",
            "LightShadingAccent5",
            "LightShadingAccent6",
            "MediumGrid1",
            "MediumGrid1Accent1",
            "MediumGrid1Accent2",
            "MediumGrid1Accent3",
            "MediumGrid1Accent4",
            "MediumGrid1Accent5",
            "MediumGrid1Accent6",
            "MediumGrid2",
            "MediumGrid2Accent1",
            "MediumGrid2Accent2",
            "MediumGrid2Accent3",
            "MediumGrid2Accent4",
            "MediumGrid2Accent5",
            "MediumGrid2Accent6",
            "MediumGrid3",
            "MediumGrid3Accent1",
            "MediumGrid3Accent2",
            "MediumGrid3Accent3",
            "MediumGrid3Accent4",
            "MediumGrid3Accent5",
            "MediumGrid3Accent6",
            "MediumList1",
            "MediumList1Accent1",
            "MediumList1Accent2",
            "MediumList1Accent3",
            "MediumList1Accent4",
            "MediumList1Accent5",
            "MediumList1Accent6",
            "MediumList2",
            "MediumList2Accent1",
            "MediumList2Accent2",
            "MediumList2Accent3",
            "MediumList2Accent4",
            "MediumList2Accent5",
            "MediumList2Accent6",
            "MediumShading1",
            "MediumShading1Accent1",
            "MediumShading1Accent2",
            "MediumShading1Accent3",
            "MediumShading1Accent4",
            "MediumShading1Accent5",
            "MediumShading1Accent6",
            "MediumShading2",
            "MediumShading2Accent1",
            "MediumShading2Accent2",
            "MediumShading2Accent3",
            "MediumShading2Accent4",
            "MediumShading2Accent5",
            "MediumShading2Accent6",
            "Table3DEffects1",
            "Table3DEffects2",
            "Table3DEffects3",
            "TableClassic1",
            "TableClassic2",
            "TableClassic3",
            "TableClassic4",
            "TableColorful1",
            "TableColorful2",
            "TableColorful3",
            "TableColumns1",
            "TableColumns2",
            "TableColumns3",
            "TableColumns4",
            "TableColumns5",
            "TableContemporary",
            "TableElegant",
            "TableGrid",
            "TableGrid1",
            "TableGrid2",
            "TableGrid3",
            "TableGrid4",
            "TableGrid5",
            "TableGrid6",
            "TableGrid7",
            "TableGrid8",
            "TableList1",
            "TableList2",
            "TableList3",
            "TableList4",
            "TableList5",
            "TableList6",
            "TableList7",
            "TableList8",
            "TableNormal",
            "TableProfessional",
            "TableSimple1",
            "TableSimple2",
            "TableSimple3",
            "TableSubtle1",
            "TableSubtle2",
            "TableTheme",
            "TableWeb1",
            "TableWeb2",
            "TableWeb3",
            "PlainTable1",
            "PlainTable2",
            "PlainTable3",
            "PlainTable4",
            "PlainTable5",
            "TableGridLight",
            "GridTable1Light",
            "GridTable2",
            "GridTable3",
            "GridTable4",
            "GridTable5Dark",
            "GridTable6Colorful",
            "GridTable7Colorful",
            "GridTable1LightAccent1",
            "GridTable2Accent1",
            "GridTable3Accent1",
            "GridTable4Accent1",
            "GridTable5DarkAccent1",
            "GridTable6ColorfulAccent1",
            "GridTable7ColorfulAccent1",
            "GridTable1LightAccent2",
            "GridTable2Accent2",
            "GridTable3Accent2",
            "GridTable4Accent2",
            "GridTable5DarkAccent2",
            "GridTable6ColorfulAccent2",
            "GridTable7ColorfulAccent2",
            "GridTable1LightAccent3",
            "GridTable2Accent3",
            "GridTable3Accent3",
            "GridTable4Accent3",
            "GridTable5DarkAccent3",
            "GridTable6ColorfulAccent3",
            "GridTable7ColorfulAccent3",
            "GridTable1LightAccent4",
            "GridTable2Accent4",
            "GridTable3Accent4",
            "GridTable4Accent4",
            "GridTable5DarkAccent4",
            "GridTable6ColorfulAccent4",
            "GridTable7ColorfulAccent4",
            "GridTable1LightAccent5",
            "GridTable2Accent5",
            "GridTable3Accent5",
            "GridTable4Accent5",
            "GridTable5DarkAccent5",
            "GridTable6ColorfulAccent5",
            "GridTable7ColorfulAccent5",
            "GridTable1LightAccent6",
            "GridTable2Accent6",
            "GridTable3Accent6",
            "GridTable4Accent6",
            "GridTable5DarkAccent6",
            "GridTable6ColorfulAccent6",
            "GridTable7ColorfulAccent6",
            "ListTable1Light",
            "ListTable2",
            "ListTable3",
            "ListTable4",
            "ListTable5Dark",
            "ListTable6Colorful",
            "ListTable7Colorful",
            "ListTable1LightAccent1",
            "ListTable2Accent1",
            "ListTable3Accent1",
            "ListTable4Accent1",
            "ListTable5DarkAccent1",
            "ListTable6ColorfulAccent1",
            "ListTable7ColorfulAccent1",
            "ListTable1LightAccent2",
            "ListTable2Accent2",
            "ListTable3Accent2",
            "ListTable4Accent2",
            "ListTable5DarkAccent2",
            "ListTable6ColorfulAccent2",
            "ListTable7ColorfulAccent2",
            "ListTable1LightAccent3",
            "ListTable2Accent3",
            "ListTable3Accent3",
            "ListTable4Accent3",
            "ListTable5DarkAccent3",
            "ListTable6ColorfulAccent3",
            "ListTable7ColorfulAccent3",
            "ListTable1LightAccent4",
            "ListTable2Accent4",
            "ListTable3Accent4",
            "ListTable4Accent4",
            "ListTable5DarkAccent4",
            "ListTable6ColorfulAccent4",
            "ListTable7ColorfulAccent4",
            "ListTable1LightAccent5",
            "ListTable2Accent5",
            "ListTable3Accent5",
            "ListTable4Accent5",
            "ListTable5DarkAccent5",
            "ListTable6ColorfulAccent5",
            "ListTable7ColorfulAccent5",
            "ListTable1LightAccent6",
            "ListTable2Accent6",
            "ListTable3Accent6",
            "ListTable4Accent6",
            "ListTable5DarkAccent6",
            "ListTable6ColorfulAccent6",
            "ListTable7ColorfulAccent6",
            "User",
            "Nil"
          ],
          "type": "string"
        },
        "StyleName": {
          "description": "Gets or sets the name of the character style applied to this formatting.",
          "type": "string"
        },
        "Subscript": {
          "description": "True if the font is formatted as subscript.",
          "type": "boolean"
        },
        "Superscript": {
          "description": "True if the font is formatted as superscript.",
          "type": "boolean"
        },
        "TextEffect": {
          "description": "Gets or sets the font animation effect.",
          "enum": [
            "None",
            "LasVegasLights",
            "BlinkingBackground",
            "SparkleText",
            "MarchingBlackAnts",
            "MarchingRedAnts",
            "Shimmer"
          ],
          "type": "string"
        },
        "Underline": {
          "description": "Gets or sets the type of underline applied to the font.",
          "enum": [
            "None",
            "Single",
            "Words",
            "Double",
            "Dotted",
            "Thick",
            "Dash",
            "DashLong",
            "DotDash",
            "DotDotDash",
            "Wavy",
            "DottedHeavy",
            "DashHeavy",
            "DashLongHeavy",
            "DotDashHeavy",
            "DotDotDashHeavy",
            "WavyHeavy",
            "WavyDouble"
          ],
          "type": "string"
        },
        "UnderlineColor": {
          "$ref": "#/definitions/XmlColor",
          "description": "Gets or sets the color of the underline applied to the font."
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FootnoteResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/footnote/0",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Footnote": {
              "$ref": "#/definitions/Footnote",
              "description": "Footnote information"
            }
          }
        }
      ]
    },
    "Footnote": {
      "description": "Footnote.",
      "type": "object",
      "properties": {
        "Position": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Link to comment range start node."
        },
        "FootnoteType": {
          "description": "Returns a value that specifies whether this is a footnote or endnote.",
          "enum": [
            "Footnote",
            "Endnote"
          ],
          "type": "string"
        },
        "ReferenceMark": {
          "description": "Gets/sets custom reference mark to be used for this footnote.\r\nDefault value is {System.String.Empty}, meaning auto-numbered footnotes are used.",
          "type": "string"
        },
        "Text": {
          "description": "This is a convenience property that allows to easily get or set text of the footnote.",
          "type": "string"
        },
        "Content": {
          "$ref": "#/definitions/StoryChildNodes",
          "description": "Content of footnote."
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FootnotesResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/footnotes",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Footnotes": {
              "$ref": "#/definitions/FootnoteCollection",
              "description": "Collection of footnotes."
            }
          }
        }
      ]
    },
    "FootnoteCollection": {
      "description": "Collection of footnotes.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of foonotes links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Footnote"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FormFieldsResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/{nodePath}/formfields",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "FormFields": {
              "$ref": "#/definitions/FormFieldCollection",
              "description": "Collection of form fields."
            }
          }
        }
      ]
    },
    "FormFieldCollection": {
      "description": "Represents DTO for collection of formfields.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of formfields",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormField"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "FormFieldCheckbox": {
      "description": "FormField checkbox element",
      "allOf": [
        {
          "$ref": "#/definitions/FormField"
        },
        {
          "type": "object",
          "properties": {
            "IsCheckBoxExactSize": {
              "description": "Gets or sets the boolean value that indicates whether the size of the textbox is automatic or specified explicitly.",
              "type": "boolean"
            },
            "CheckBoxSize": {
              "format": "double",
              "description": "Gets or sets the size of the checkbox in points. Has effect only when {Aspose.Words.Cloud.DTO.DocumentElements.FormFields.FormFieldCheckbox.IsCheckBoxExactSize} is true.",
              "type": "number"
            },
            "Checked": {
              "description": "Gets or sets the checked status of the check box form field.",
              "type": "boolean"
            }
          }
        }
      ]
    },
    "FormFieldDropDown": {
      "description": "FormField dropdownlist element",
      "allOf": [
        {
          "$ref": "#/definitions/FormField"
        },
        {
          "type": "object",
          "properties": {
            "DropDownSelectedIndex": {
              "format": "int32",
              "description": "Gets or sets the index specifying the currently selected item in a dropdown form field.",
              "type": "integer"
            },
            "DropDownItems": {
              "description": "Provides access to the items of a dropdown form field.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "FormFieldTextInput": {
      "description": "FormField text input element",
      "allOf": [
        {
          "$ref": "#/definitions/FormField"
        },
        {
          "type": "object",
          "properties": {
            "TextInputFormat": {
              "description": "Returns or sets the text formatting for a text form field.",
              "type": "string"
            },
            "TextInputType": {
              "description": "Gets or sets the type of a text form field.",
              "enum": [
                "Regular",
                "Number",
                "Date",
                "CurrentDate",
                "CurrentTime",
                "Calculated"
              ],
              "type": "string"
            },
            "TextInputDefault": {
              "description": "Gets or sets the default string or a calculation expression of a text form field.",
              "type": "string"
            },
            "MaxLength": {
              "format": "int32",
              "description": "Maximum length for the text field. Zero when the length is not limited.",
              "type": "integer"
            }
          }
        }
      ]
    },
    "FormField": {
      "description": "FromField",
      "type": "object",
      "properties": {
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "Name": {
          "description": "Gets or sets the form field name.",
          "type": "string"
        },
        "Enabled": {
          "description": "True if a form field is enabled.",
          "type": "boolean"
        },
        "StatusText": {
          "description": "Returns or sets the text that's displayed in the status bar when a form field has the focus.",
          "type": "string"
        },
        "OwnStatus": {
          "description": "Specifies the source of the text that's displayed in the status bar when a form field has the focus.",
          "type": "boolean"
        },
        "HelpText": {
          "description": "Returns or sets the text that's displayed in a message box when the form field has the focus and the user presses F1.",
          "type": "string"
        },
        "OwnHelp": {
          "description": "Specifies the source of the text that's displayed in a message box when a form field has the focus and the user presses F1.",
          "type": "boolean"
        },
        "CalculateOnExit": {
          "description": "True if references to the specified form field are automatically updated whenever the field is exited.",
          "type": "boolean"
        },
        "EntryMacro": {
          "description": "Returns or sets an entry macro name for the form field.",
          "type": "string"
        },
        "ExitMacro": {
          "description": "Returns or sets an exit macro name for the form field.",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      },
      "discriminator": "FormFieldType"
    },
    "FormFieldResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs/{0}/formfields/{1}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "FormField": {
              "$ref": "#/definitions/FormField",
              "description": "Field information"
            }
          }
        }
      ]
    },
    "HeaderFooterResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/headersfooters/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "HeaderFooter": {
              "$ref": "#/definitions/HeaderFooter",
              "description": "HeaderFooter"
            }
          }
        }
      ]
    },
    "HeaderFooter": {
      "description": "Section element",
      "type": "object",
      "properties": {
        "Paragraphs": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to Paragraphs resource"
        },
        "DrawingObjects": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to DrawingObjects resource"
        },
        "Type": {
          "description": "Paragraph's text",
          "enum": [
            "HeaderEven",
            "HeaderPrimary",
            "FooterEven",
            "FooterPrimary",
            "HeaderFirst",
            "FooterFirst"
          ],
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "HeaderFootersResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/headersfooters",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "HeaderFooters": {
              "$ref": "#/definitions/HeaderFooterLinkCollection",
              "description": "Collection of headers/footers"
            }
          }
        }
      ]
    },
    "HeaderFooterLinkCollection": {
      "description": "Collection of links to header/footers",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of section's links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HeaderFooterLink"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "HeaderFooterLink": {
      "description": "HeaderFooter link element",
      "type": "object",
      "properties": {
        "Type": {
          "description": "Paragraph's text",
          "enum": [
            "HeaderEven",
            "HeaderPrimary",
            "FooterEven",
            "FooterPrimary",
            "HeaderFirst",
            "FooterFirst"
          ],
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "HyperlinkResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Hyperlink": {
              "$ref": "#/definitions/Hyperlink"
            }
          }
        }
      ]
    },
    "Hyperlink": {
      "description": "Hyperlink element.",
      "type": "object",
      "properties": {
        "DisplayText": {
          "description": "Hypelink's display text",
          "type": "string"
        },
        "Value": {
          "description": "Value",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "HyperlinksResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Hyperlinks": {
              "$ref": "#/definitions/Hyperlinks"
            }
          }
        }
      ]
    },
    "Hyperlinks": {
      "type": "object",
      "properties": {
        "HyperlinkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hyperlink"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "OfficeMathObjectResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/officeMathObjects/0",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "OfficeMathObject": {
              "$ref": "#/definitions/OfficeMathObject",
              "description": "OfficeMathObject information"
            }
          }
        }
      ]
    },
    "OfficeMathObject": {
      "description": "OfficeMath object.",
      "type": "object",
      "properties": {
        "Content": {
          "$ref": "#/definitions/StoryChildNodes",
          "description": "Content of footnote."
        },
        "DisplayType": {
          "description": "Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text\r\nor displayed on its own line.",
          "enum": [
            "Display",
            "Inline"
          ],
          "type": "string"
        },
        "Justification": {
          "description": "Gets/sets Office Math justification.",
          "enum": [
            "CenterGroup",
            "Center",
            "Left",
            "Right",
            "Inline",
            "Default"
          ],
          "type": "string"
        },
        "MathObjectType": {
          "description": "Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object.",
          "enum": [
            "OMath",
            "OMathPara",
            "Accent",
            "Bar",
            "BorderBox",
            "Box",
            "Delimiter",
            "Degree",
            "Argument",
            "Array",
            "Fraction",
            "Denominator",
            "Numerator",
            "Function",
            "FunctionName",
            "GroupCharacter",
            "Limit",
            "LowerLimit",
            "UpperLimit",
            "Matrix",
            "MatrixRow",
            "NAry",
            "Phantom",
            "Radical",
            "SubscriptPart",
            "SuperscriptPart",
            "PreSubSuperscript",
            "Subscript",
            "SubSuperscript",
            "Supercript"
          ],
          "type": "string"
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "OfficeMathObjectsResponse": {
      "description": "This response should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/OfficeMathObjects",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "OfficeMathObjects": {
              "$ref": "#/definitions/OfficeMathObjectsCollection",
              "description": "Collection of OfficeMath objects."
            }
          }
        }
      ]
    },
    "OfficeMathObjectsCollection": {
      "description": "Collection of OfficeMath objects.",
      "type": "object",
      "properties": {
        "List": {
          "description": "Collection of OfficeMath objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfficeMathObject"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "ParagraphLinkCollectionResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Paragraphs": {
              "$ref": "#/definitions/ParagraphLinkCollection",
              "description": "Collection of paragraphs"
            }
          }
        }
      ]
    },
    "ParagraphLinkCollection": {
      "description": "Collection of links to paragraphs",
      "type": "object",
      "properties": {
        "ParagraphLinkList": {
          "description": "Collection of paragraph's links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParagraphLink"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "ParagraphLink": {
      "description": "Paragraph link element",
      "type": "object",
      "properties": {
        "Text": {
          "description": "Paragraph's text",
          "type": "string"
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "ParagraphResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/paragraphs/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Paragraph": {
              "$ref": "#/definitions/Paragraph",
              "description": "Paragraph"
            }
          }
        }
      ]
    },
    "Paragraph": {
      "description": "Paragraph element",
      "type": "object",
      "properties": {
        "ChildNodes": {
          "description": "Child nodes",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SectionLinkCollectionResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/sections",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Sections": {
              "$ref": "#/definitions/SectionLinkCollection",
              "description": "Collection of sections"
            }
          }
        }
      ]
    },
    "SectionLinkCollection": {
      "description": "Collection of links to sections",
      "type": "object",
      "properties": {
        "SectionLinkList": {
          "description": "Collection of section's links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionLink"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SectionLink": {
      "description": "Section link element",
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SectionPageSetupResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/sections/{0}/PageSetup",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "PageSetup": {
              "$ref": "#/definitions/PageSetup",
              "description": "Section"
            }
          }
        }
      ]
    },
    "PageSetup": {
      "description": "Represents the page setup properties of a section.",
      "type": "object",
      "properties": {
        "Bidi": {
          "description": "Specifies that this section contains bidirectional (complex scripts) text.",
          "type": "boolean"
        },
        "BorderAlwaysInFront": {
          "description": "Specifies where the page border is positioned relative to intersecting texts and objects.",
          "type": "boolean"
        },
        "BorderAppliesTo": {
          "description": "Specifies which pages the page border is printed on.",
          "enum": [
            "AllPages",
            "FirstPage",
            "OtherPages"
          ],
          "type": "string"
        },
        "BorderDistanceFrom": {
          "description": "Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from\r\nthe text it surrounds.",
          "enum": [
            "Text",
            "PageEdge"
          ],
          "type": "string"
        },
        "BottomMargin": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body\r\ntext.",
          "type": "number"
        },
        "DifferentFirstPageHeaderFooter": {
          "description": "<b>True</b> if a different header or footer is used on the first page.",
          "type": "boolean"
        },
        "FirstPageTray": {
          "format": "int32",
          "description": "Gets or sets the paper tray (bin) to use for the first page of a section.\r\nThe value is implementation (printer) specific.",
          "type": "integer"
        },
        "FooterDistance": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the footer and the bottom of the page.",
          "type": "number"
        },
        "Gutter": {
          "format": "double",
          "description": "Gets or sets the amount of extra space added to the margin for document binding.",
          "type": "number"
        },
        "HeaderDistance": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the header and the top of the page.",
          "type": "number"
        },
        "LeftMargin": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.",
          "type": "number"
        },
        "LineNumberCountBy": {
          "format": "int32",
          "description": "Returns or sets the numeric increment for line numbers.",
          "type": "integer"
        },
        "LineNumberDistanceFromText": {
          "format": "double",
          "description": "Gets or sets distance between the right edge of line numbers and the left edge of the document.",
          "type": "number"
        },
        "LineNumberRestartMode": {
          "description": "Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new\r\npage or section or runs continuously.",
          "enum": [
            "RestartPage",
            "RestartSection",
            "Continuous"
          ],
          "type": "string"
        },
        "LineStartingNumber": {
          "format": "int32",
          "description": "Gets or sets the starting line number.",
          "type": "integer"
        },
        "Orientation": {
          "description": "Returns or sets the orientation of the page.",
          "enum": [
            "Portrait",
            "Landscape"
          ],
          "type": "string"
        },
        "OtherPagesTray": {
          "format": "int32",
          "description": "Gets or sets the paper tray (bin) to be used for all but the first page of a section.\r\nThe value is implementation (printer) specific.",
          "type": "integer"
        },
        "PageHeight": {
          "format": "double",
          "description": "Returns or sets the height of the page in points.",
          "type": "number"
        },
        "PageNumberStyle": {
          "description": "Gets or sets the page number format.",
          "enum": [
            "Arabic",
            "UppercaseRoman",
            "LowercaseRoman",
            "UppercaseLetter",
            "LowercaseLetter",
            "Ordinal",
            "Number",
            "OrdinalText",
            "Hex",
            "ChicagoManual",
            "Kanji",
            "KanjiDigit",
            "AiueoHalfWidth",
            "IrohaHalfWidth",
            "ArabicFullWidth",
            "ArabicHalfWidth",
            "KanjiTraditional",
            "KanjiTraditional2",
            "NumberInCircle",
            "DecimalFullWidth",
            "Aiueo",
            "Iroha",
            "LeadingZero",
            "Bullet",
            "Ganada",
            "Chosung",
            "GB1",
            "GB2",
            "GB3",
            "GB4",
            "Zodiac1",
            "Zodiac2",
            "Zodiac3",
            "TradChinNum1",
            "TradChinNum2",
            "TradChinNum3",
            "TradChinNum4",
            "SimpChinNum1",
            "SimpChinNum2",
            "SimpChinNum3",
            "SimpChinNum4",
            "HanjaRead",
            "HanjaReadDigit",
            "Hangul",
            "Hanja",
            "Hebrew1",
            "Arabic1",
            "Hebrew2",
            "Arabic2",
            "HindiLetter1",
            "HindiLetter2",
            "HindiArabic",
            "HindiCardinalText",
            "ThaiLetter",
            "ThaiArabic",
            "ThaiCardinalText",
            "VietCardinalText",
            "NumberInDash",
            "NumInDash",
            "LowercaseRussian",
            "UppercaseRussian",
            "None",
            "Custom"
          ],
          "type": "string"
        },
        "PageStartingNumber": {
          "format": "int32",
          "description": "Gets or sets the starting page number of the section.",
          "type": "integer"
        },
        "PageWidth": {
          "format": "double",
          "description": "Returns or sets the width of the page in points.",
          "type": "number"
        },
        "PaperSize": {
          "description": "Returns or sets the paper size.",
          "enum": [
            "A3",
            "A4",
            "A5",
            "B4",
            "B5",
            "Executive",
            "Folio",
            "Ledger",
            "Legal",
            "Letter",
            "EnvelopeDL",
            "Quarto",
            "Statement",
            "Tabloid",
            "Paper10x14",
            "Paper11x17",
            "Custom"
          ],
          "type": "string"
        },
        "RestartPageNumbering": {
          "description": "<b>True</b> if page numbering restarts at the beginning of the section.",
          "type": "boolean"
        },
        "RightMargin": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body\r\ntext.",
          "type": "number"
        },
        "RtlGutter": {
          "description": "Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a\r\nleft-to-right language.",
          "type": "boolean"
        },
        "SectionStart": {
          "description": "Returns or sets the type of section break for the specified object.",
          "enum": [
            "Continuous",
            "NewColumn",
            "NewPage",
            "EvenPage",
            "OddPage"
          ],
          "type": "string"
        },
        "SuppressEndnotes": {
          "description": "<b>True</b> if endnotes are printed at the end of the next section that doesn't suppress endnotes.\r\n                Suppressed endnotes are printed before the endnotes in that section.",
          "type": "boolean"
        },
        "TopMargin": {
          "format": "double",
          "description": "Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.",
          "type": "number"
        },
        "VerticalAlignment": {
          "description": "Returns or sets the vertical alignment of text on each page in a document or section.",
          "enum": [
            "Bottom",
            "Center",
            "Justify",
            "Top"
          ],
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SectionResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/sections/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Section": {
              "$ref": "#/definitions/Section",
              "description": "Section"
            }
          }
        }
      ]
    },
    "Section": {
      "description": "Section element",
      "type": "object",
      "properties": {
        "Paragraphs": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to Paragraphs resource"
        },
        "PageSetup": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to PageSetup resource"
        },
        "HeaderFooters": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to HeaderFooters resource"
        },
        "Tables": {
          "$ref": "#/definitions/LinkElement",
          "description": "Link to Tables resource"
        },
        "ChildNodes": {
          "description": "Child nodes.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableCellFormatResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}/rows/{1}/cells/{2}/cellformat",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "CellFormat": {
              "$ref": "#/definitions/TableCellFormat",
              "description": "Table."
            }
          }
        }
      ]
    },
    "TableCellFormat": {
      "description": "Represents all formatting for a table row.",
      "type": "object",
      "properties": {
        "BottomPadding": {
          "format": "double",
          "description": "Returns or sets the amount of space (in points) to add below the contents of cell.",
          "type": "number"
        },
        "FitText": {
          "description": "If true, fits text in the cell, compressing each paragraph to the width of the cell.",
          "type": "boolean"
        },
        "HorizontalMerge": {
          "description": "Specifies how the cell is merged horizontally with other cells in the row.",
          "enum": [
            "None",
            "First",
            "Previous"
          ],
          "type": "string"
        },
        "LeftPadding": {
          "format": "double",
          "description": "Returns or sets the amount of space (in points) to add to the left of the contents of cell.",
          "type": "number"
        },
        "Orientation": {
          "description": "Returns or sets the orientation of text in a table cell.",
          "enum": [
            "Horizontal",
            "Downward",
            "Upward",
            "HorizontalRotatedFarEast",
            "VerticalFarEast",
            "VerticalRotatedFarEast"
          ],
          "type": "string"
        },
        "PreferredWidth": {
          "$ref": "#/definitions/PreferredWidth",
          "description": "Returns or sets the preferred width of the cell."
        },
        "RightPadding": {
          "format": "double",
          "description": "Returns or sets the amount of space (in points) to add to the right of the contents of cell.",
          "type": "number"
        },
        "TopPadding": {
          "format": "double",
          "description": "Returns or sets the amount of space (in points) to add above the contents of cell.",
          "type": "number"
        },
        "VerticalAlignment": {
          "description": "Returns or sets the vertical alignment of text in the cell.",
          "enum": [
            "Top",
            "Center",
            "Bottom"
          ],
          "type": "string"
        },
        "VerticalMerge": {
          "description": "Specifies how the cell is merged with other cells vertically.",
          "enum": [
            "None",
            "First",
            "Previous"
          ],
          "type": "string"
        },
        "Width": {
          "format": "double",
          "description": "Gets the width of the cell in points.",
          "type": "number"
        },
        "WrapText": {
          "description": "If true, wrap text for the cell.",
          "type": "boolean"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "PreferredWidth": {
      "description": "Preferred width.",
      "type": "object",
      "properties": {
        "Type": {
          "description": "Gets the unit of measure used for this preferred width value.",
          "enum": [
            "Auto",
            "Percent",
            "Points"
          ],
          "type": "string"
        },
        "Value": {
          "format": "double",
          "description": "Gets or sets the preferred width value. The unit of measure is specified in the {Aspose.Words.Cloud.DTO.DocumentElements.Tables.PreferredWidthDto.Type} property.",
          "type": "number"
        }
      }
    },
    "TableCellResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Cell": {
              "$ref": "#/definitions/TableCell",
              "description": "Table cell."
            }
          }
        }
      ]
    },
    "TableCell": {
      "description": "Table cell element.",
      "type": "object",
      "properties": {
        "ChildNodes": {
          "description": "Child nodes.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableLinkCollectionResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Tables": {
              "$ref": "#/definitions/TableLinkCollection",
              "description": "Collection of tables."
            }
          }
        }
      ]
    },
    "TableLinkCollection": {
      "description": "Collection of links to tables",
      "type": "object",
      "properties": {
        "TableLinkList": {
          "description": "Collection of table's links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableLink"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableLink": {
      "description": "Table link element",
      "type": "object",
      "properties": {
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TablePropertiesResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}/properties",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Properties": {
              "$ref": "#/definitions/TableProperties",
              "description": "Table."
            }
          }
        }
      ]
    },
    "TableProperties": {
      "description": "Represents the table properties.",
      "type": "object",
      "properties": {
        "Alignment": {
          "description": "Specifies how an inline table is aligned in the document.",
          "enum": [
            "Left",
            "Center",
            "Right"
          ],
          "type": "string"
        },
        "AllowAutoFit": {
          "description": "Allows Microsoft Word and Aspose.Words to automatically resize cells in a table to fit their contents.",
          "type": "boolean"
        },
        "Bidi": {
          "description": "Gets or sets whether this is a right-to-left table.",
          "type": "boolean"
        },
        "BottomPadding": {
          "format": "double",
          "description": "Gets or sets the amount of space (in points) to add below the contents of cells.",
          "type": "number"
        },
        "CellSpacing": {
          "format": "double",
          "description": "Gets or sets the amount of space (in points) between the cells.",
          "type": "number"
        },
        "LeftIndent": {
          "format": "double",
          "description": "Gets or sets the value that represents the left indent of the table.",
          "type": "number"
        },
        "LeftPadding": {
          "format": "double",
          "description": "Gets or sets the amount of space (in points) to add to the left of the contents of cells.",
          "type": "number"
        },
        "PreferredWidth": {
          "$ref": "#/definitions/PreferredWidth",
          "description": "Gets or sets the table preferred width. \r\n<para>Preferred width can be specified as a percentage, number of points or a special \"auto\" value.</para>"
        },
        "RightPadding": {
          "format": "double",
          "description": "Gets or sets the amount of space (in points) to add to the right of the contents of cells.",
          "type": "number"
        },
        "StyleIdentifier": {
          "description": "Gets or sets the locale independent style identifier of the table style applied to this table.",
          "enum": [
            "BookTitle",
            "CommentReference",
            "DefaultParagraphFont",
            "Emphasis",
            "EndnoteReference",
            "FollowedHyperlink",
            "FootnoteReference",
            "HtmlAcronym",
            "HtmlCite",
            "HtmlCode",
            "HtmlDefinition",
            "HtmlKeyboard",
            "HtmlSample",
            "HtmlTypewriter",
            "HtmlVariable",
            "Hyperlink",
            "IntenseEmphasis",
            "IntenseReference",
            "LineNumber",
            "PageNumber",
            "PlaceholderText",
            "Strong",
            "SubtleEmphasis",
            "SubtleReference",
            "BalloonText",
            "BodyText",
            "BodyText2",
            "BodyText3",
            "BodyText1I",
            "BodyText1I2",
            "BodyTextInd",
            "BodyTextInd2",
            "BodyTextInd3",
            "Closing",
            "CommentSubject",
            "CommentText",
            "Date",
            "DocumentMap",
            "EmailSignature",
            "EndnoteText",
            "Footer",
            "FootnoteText",
            "Header",
            "Heading1",
            "Heading2",
            "Heading3",
            "Heading4",
            "Heading5",
            "Heading6",
            "Heading7",
            "Heading8",
            "Heading9",
            "HtmlAddress",
            "HtmlTopOfForm",
            "HtmlBottomOfForm",
            "HtmlPreformatted",
            "IntenseQuote",
            "Macro",
            "MessageHeader",
            "NoteHeading",
            "PlainText",
            "Quote",
            "Salutation",
            "Signature",
            "Subtitle",
            "Title",
            "Bibliography",
            "BlockText",
            "Caption",
            "EnvelopeAddress",
            "EnvelopeReturn",
            "Index1",
            "Index2",
            "Index3",
            "Index4",
            "Index5",
            "Index6",
            "Index7",
            "Index8",
            "Index9",
            "IndexHeading",
            "List",
            "List2",
            "List3",
            "List4",
            "List5",
            "ListBullet",
            "ListBullet2",
            "ListBullet3",
            "ListBullet4",
            "ListBullet5",
            "ListContinue",
            "ListContinue2",
            "ListContinue3",
            "ListContinue4",
            "ListContinue5",
            "ListNumber",
            "ListNumber2",
            "ListNumber3",
            "ListNumber4",
            "ListNumber5",
            "ListParagraph",
            "NoSpacing",
            "Normal",
            "NormalWeb",
            "NormalIndent",
            "TableOfAuthorities",
            "TableOfFigures",
            "ToaHeading",
            "Toc1",
            "Toc2",
            "Toc3",
            "Toc4",
            "Toc5",
            "Toc6",
            "Toc7",
            "Toc8",
            "Toc9",
            "TocHeading",
            "Revision",
            "OutlineList1",
            "OutlineList2",
            "OutlineList3",
            "NoList",
            "ColorfulGrid",
            "ColorfulGridAccent1",
            "ColorfulGridAccent2",
            "ColorfulGridAccent3",
            "ColorfulGridAccent4",
            "ColorfulGridAccent5",
            "ColorfulGridAccent6",
            "ColorfulList",
            "ColorfulListAccent1",
            "ColorfulListAccent2",
            "ColorfulListAccent3",
            "ColorfulListAccent4",
            "ColorfulListAccent5",
            "ColorfulListAccent6",
            "ColorfulShading",
            "ColorfulShadingAccent1",
            "ColorfulShadingAccent2",
            "ColorfulShadingAccent3",
            "ColorfulShadingAccent4",
            "ColorfulShadingAccent5",
            "ColorfulShadingAccent6",
            "DarkList",
            "DarkListAccent1",
            "DarkListAccent2",
            "DarkListAccent3",
            "DarkListAccent4",
            "DarkListAccent5",
            "DarkListAccent6",
            "LightGrid",
            "LightGridAccent1",
            "LightGridAccent2",
            "LightGridAccent3",
            "LightGridAccent4",
            "LightGridAccent5",
            "LightGridAccent6",
            "LightList",
            "LightListAccent1",
            "LightListAccent2",
            "LightListAccent3",
            "LightListAccent4",
            "LightListAccent5",
            "LightListAccent6",
            "LightShading",
            "LightShadingAccent1",
            "LightShadingAccent2",
            "LightShadingAccent3",
            "LightShadingAccent4",
            "LightShadingAccent5",
            "LightShadingAccent6",
            "MediumGrid1",
            "MediumGrid1Accent1",
            "MediumGrid1Accent2",
            "MediumGrid1Accent3",
            "MediumGrid1Accent4",
            "MediumGrid1Accent5",
            "MediumGrid1Accent6",
            "MediumGrid2",
            "MediumGrid2Accent1",
            "MediumGrid2Accent2",
            "MediumGrid2Accent3",
            "MediumGrid2Accent4",
            "MediumGrid2Accent5",
            "MediumGrid2Accent6",
            "MediumGrid3",
            "MediumGrid3Accent1",
            "MediumGrid3Accent2",
            "MediumGrid3Accent3",
            "MediumGrid3Accent4",
            "MediumGrid3Accent5",
            "MediumGrid3Accent6",
            "MediumList1",
            "MediumList1Accent1",
            "MediumList1Accent2",
            "MediumList1Accent3",
            "MediumList1Accent4",
            "MediumList1Accent5",
            "MediumList1Accent6",
            "MediumList2",
            "MediumList2Accent1",
            "MediumList2Accent2",
            "MediumList2Accent3",
            "MediumList2Accent4",
            "MediumList2Accent5",
            "MediumList2Accent6",
            "MediumShading1",
            "MediumShading1Accent1",
            "MediumShading1Accent2",
            "MediumShading1Accent3",
            "MediumShading1Accent4",
            "MediumShading1Accent5",
            "MediumShading1Accent6",
            "MediumShading2",
            "MediumShading2Accent1",
            "MediumShading2Accent2",
            "MediumShading2Accent3",
            "MediumShading2Accent4",
            "MediumShading2Accent5",
            "MediumShading2Accent6",
            "Table3DEffects1",
            "Table3DEffects2",
            "Table3DEffects3",
            "TableClassic1",
            "TableClassic2",
            "TableClassic3",
            "TableClassic4",
            "TableColorful1",
            "TableColorful2",
            "TableColorful3",
            "TableColumns1",
            "TableColumns2",
            "TableColumns3",
            "TableColumns4",
            "TableColumns5",
            "TableContemporary",
            "TableElegant",
            "TableGrid",
            "TableGrid1",
            "TableGrid2",
            "TableGrid3",
            "TableGrid4",
            "TableGrid5",
            "TableGrid6",
            "TableGrid7",
            "TableGrid8",
            "TableList1",
            "TableList2",
            "TableList3",
            "TableList4",
            "TableList5",
            "TableList6",
            "TableList7",
            "TableList8",
            "TableNormal",
            "TableProfessional",
            "TableSimple1",
            "TableSimple2",
            "TableSimple3",
            "TableSubtle1",
            "TableSubtle2",
            "TableTheme",
            "TableWeb1",
            "TableWeb2",
            "TableWeb3",
            "PlainTable1",
            "PlainTable2",
            "PlainTable3",
            "PlainTable4",
            "PlainTable5",
            "TableGridLight",
            "GridTable1Light",
            "GridTable2",
            "GridTable3",
            "GridTable4",
            "GridTable5Dark",
            "GridTable6Colorful",
            "GridTable7Colorful",
            "GridTable1LightAccent1",
            "GridTable2Accent1",
            "GridTable3Accent1",
            "GridTable4Accent1",
            "GridTable5DarkAccent1",
            "GridTable6ColorfulAccent1",
            "GridTable7ColorfulAccent1",
            "GridTable1LightAccent2",
            "GridTable2Accent2",
            "GridTable3Accent2",
            "GridTable4Accent2",
            "GridTable5DarkAccent2",
            "GridTable6ColorfulAccent2",
            "GridTable7ColorfulAccent2",
            "GridTable1LightAccent3",
            "GridTable2Accent3",
            "GridTable3Accent3",
            "GridTable4Accent3",
            "GridTable5DarkAccent3",
            "GridTable6ColorfulAccent3",
            "GridTable7ColorfulAccent3",
            "GridTable1LightAccent4",
            "GridTable2Accent4",
            "GridTable3Accent4",
            "GridTable4Accent4",
            "GridTable5DarkAccent4",
            "GridTable6ColorfulAccent4",
            "GridTable7ColorfulAccent4",
            "GridTable1LightAccent5",
            "GridTable2Accent5",
            "GridTable3Accent5",
            "GridTable4Accent5",
            "GridTable5DarkAccent5",
            "GridTable6ColorfulAccent5",
            "GridTable7ColorfulAccent5",
            "GridTable1LightAccent6",
            "GridTable2Accent6",
            "GridTable3Accent6",
            "GridTable4Accent6",
            "GridTable5DarkAccent6",
            "GridTable6ColorfulAccent6",
            "GridTable7ColorfulAccent6",
            "ListTable1Light",
            "ListTable2",
            "ListTable3",
            "ListTable4",
            "ListTable5Dark",
            "ListTable6Colorful",
            "ListTable7Colorful",
            "ListTable1LightAccent1",
            "ListTable2Accent1",
            "ListTable3Accent1",
            "ListTable4Accent1",
            "ListTable5DarkAccent1",
            "ListTable6ColorfulAccent1",
            "ListTable7ColorfulAccent1",
            "ListTable1LightAccent2",
            "ListTable2Accent2",
            "ListTable3Accent2",
            "ListTable4Accent2",
            "ListTable5DarkAccent2",
            "ListTable6ColorfulAccent2",
            "ListTable7ColorfulAccent2",
            "ListTable1LightAccent3",
            "ListTable2Accent3",
            "ListTable3Accent3",
            "ListTable4Accent3",
            "ListTable5DarkAccent3",
            "ListTable6ColorfulAccent3",
            "ListTable7ColorfulAccent3",
            "ListTable1LightAccent4",
            "ListTable2Accent4",
            "ListTable3Accent4",
            "ListTable4Accent4",
            "ListTable5DarkAccent4",
            "ListTable6ColorfulAccent4",
            "ListTable7ColorfulAccent4",
            "ListTable1LightAccent5",
            "ListTable2Accent5",
            "ListTable3Accent5",
            "ListTable4Accent5",
            "ListTable5DarkAccent5",
            "ListTable6ColorfulAccent5",
            "ListTable7ColorfulAccent5",
            "ListTable1LightAccent6",
            "ListTable2Accent6",
            "ListTable3Accent6",
            "ListTable4Accent6",
            "ListTable5DarkAccent6",
            "ListTable6ColorfulAccent6",
            "ListTable7ColorfulAccent6",
            "User",
            "Nil"
          ],
          "type": "string"
        },
        "StyleName": {
          "description": "Gets or sets the name of the table style applied to this table.",
          "type": "string"
        },
        "StyleOptions": {
          "description": "Gets or sets bit flags that specify how a table style is applied to this table.",
          "enum": [
            "None",
            "FirstRow",
            "LastRow",
            "FirstColumn",
            "LastColumn",
            "RowBands",
            "ColumnBands",
            "Default2003",
            "Default"
          ],
          "type": "string"
        },
        "TextWrapping": {
          "description": "Get or sets TextWrapping {Aspose.Words.Cloud.DTO.DocumentElements.Tables.TablePropertiesDto.TextWrapping} for table.",
          "enum": [
            "None",
            "Around",
            "Default"
          ],
          "type": "string"
        },
        "TopPadding": {
          "format": "double",
          "description": "Gets or sets the amount of space (in points) to add above the contents of cells.",
          "type": "number"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Table": {
              "$ref": "#/definitions/Table",
              "description": "Table."
            }
          }
        }
      ]
    },
    "Table": {
      "description": "Table element",
      "type": "object",
      "properties": {
        "TableRowList": {
          "description": "Collection of table's rows.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableRow"
          }
        },
        "TableProperties": {
          "$ref": "#/definitions/TableProperties",
          "description": "Table properties."
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableRow": {
      "description": "Table row element.",
      "type": "object",
      "properties": {
        "TableCellList": {
          "description": "Collection of table's rows.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableCell"
          }
        },
        "RowFormat": {
          "$ref": "#/definitions/TableRowFormat",
          "description": "Provides access to the formatting properties of the row."
        },
        "NodeId": {
          "description": "Node id",
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableRowFormat": {
      "description": "Represents all formatting for a table row.",
      "type": "object",
      "properties": {
        "Height": {
          "format": "double",
          "description": "Gets or sets the height of the table row in points.",
          "type": "number"
        },
        "HeightRule": {
          "description": "Gets or sets the rule for determining the height of the table row.",
          "enum": [
            "AtLeast",
            "Exactly",
            "Auto"
          ],
          "type": "string"
        },
        "AllowBreakAcrossPages": {
          "description": "True if the text in a table row is allowed to split across a page break.",
          "type": "boolean"
        },
        "HeadingFormat": {
          "description": "True if the row is repeated as a table heading on every page when the table spans more than one page.",
          "type": "boolean"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TableRowFormatResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}/rows/{1}/rowformat",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "RowFormat": {
              "$ref": "#/definitions/TableRowFormat",
              "description": "Table."
            }
          }
        }
      ]
    },
    "TableRowResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/tables/{0}",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Row": {
              "$ref": "#/definitions/TableRow",
              "description": "Table row."
            }
          }
        }
      ]
    },
    "DocumentPropertiesResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "DocumentProperties": {
              "$ref": "#/definitions/DocumentProperties"
            }
          }
        }
      ]
    },
    "DocumentProperties": {
      "description": "Collection of document properties.",
      "type": "object",
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentProperty"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "DocumentProperty": {
      "description": "Words document property DTO.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the document property.",
          "type": "string"
        },
        "Value": {
          "description": "String value of the document property.",
          "type": "string"
        },
        "BuiltIn": {
          "description": "Flag indicates whether the property is built-in or not.\r\nIf true the property is built-in, if false the property is custom.",
          "type": "boolean"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "DocumentPropertyResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "DocumentProperty": {
              "$ref": "#/definitions/DocumentProperty"
            }
          }
        }
      ]
    },
    "DocumentResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Document": {
              "$ref": "#/definitions/Document"
            }
          }
        }
      ]
    },
    "Document": {
      "description": "Represents Words document DTO.",
      "type": "object",
      "properties": {
        "Links": {
          "description": "A list of links that originate from this document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "FileName": {
          "description": "Gets the name of the file.",
          "type": "string"
        },
        "SourceFormat": {
          "description": "Gets the original format of the document.",
          "enum": [
            "Unknown",
            "Doc",
            "Dot",
            "DocPreWord60",
            "Docx",
            "Docm",
            "Dotx",
            "Dotm",
            "FlatOpc",
            "Rtf",
            "WordML",
            "Html",
            "Mhtml",
            "Epub",
            "Text",
            "Odt",
            "Ott",
            "Pdf",
            "Xps",
            "Swf",
            "Tiff",
            "Svg"
          ],
          "type": "string"
        },
        "IsEncrypted": {
          "description": "Returns true if the document is encrypted and requires a password to open.",
          "type": "boolean"
        },
        "IsSigned": {
          "description": "Returns true if the document contains a digital signature. This property merely informs that a \r\ndigital signature is present on a document, but it does not specify whether the signature is valid or not.",
          "type": "boolean"
        },
        "DocumentProperties": {
          "$ref": "#/definitions/DocumentProperties",
          "description": "Returns document properties."
        }
      }
    },
    "Link": {
      "description": "Provides information for the object link.\r\nThis is supposed to be an atom:link, therefore it should have all attributes specified here http://tools.ietf.org/html/rfc4287#section-4.2.7",
      "type": "object",
      "properties": {
        "Href": {
          "description": "The \"href\" attribute contains the link's IRI. atom:link elements MUST\r\nhave an href attribute, whose value MUST be a IRI reference",
          "type": "string"
        },
        "Rel": {
          "description": "atom:link elements MAY have a \"rel\" attribute that indicates the link\r\nrelation type.  If the \"rel\" attribute is not present, the link\r\nelement MUST be interpreted as if the link relation type is \"alternate\".",
          "type": "string"
        },
        "Type": {
          "description": "On the link element, the \"type\" attribute's value is an advisory\r\nmedia type: it is a hint about the type of the representation that is\r\nexpected to be returned when the value of the href attribute is\r\ndereferenced.  Note that the type attribute does not override the\r\nactual media type returned with the representation.",
          "type": "string"
        },
        "Title": {
          "description": "The \"title\" attribute conveys human-readable information about the\r\nlink.  The content of the \"title\" attribute is Language-Sensitive.",
          "type": "string"
        }
      }
    },
    "FieldNamesResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "FieldNames": {
              "$ref": "#/definitions/FieldNames"
            }
          }
        }
      ]
    },
    "FieldNames": {
      "description": "Represents a collection of merge fields within a document.",
      "type": "object",
      "properties": {
        "Names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "ProtectionDataResponse": {
      "description": "Response for the request of data about protection",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "ProtectionData": {
              "$ref": "#/definitions/ProtectionData",
              "description": "Protection's data of the document"
            },
            "DocumentLink": {
              "$ref": "#/definitions/FileLink",
              "description": "Link to the document"
            }
          }
        }
      ]
    },
    "ProtectionData": {
      "description": "Container for the data about protection of the document",
      "type": "object",
      "properties": {
        "ProtectionType": {
          "description": "Type of the protection",
          "type": "string"
        }
      }
    },
    "ProtectionResponse": {
      "description": "Response for the request on changing protection of the document",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "ProtectionResult": {
              "description": "Result of the changing of protection",
              "type": "boolean"
            },
            "DocumentLink": {
              "$ref": "#/definitions/FileLink",
              "description": "Link to the document"
            }
          }
        }
      ]
    },
    "ReplaceTextResponse": {
      "description": "Response for \"Replace text\" action.",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Matches": {
              "format": "int32",
              "description": "Number of occurrences of the captured text in the document.",
              "type": "integer"
            },
            "DocumentLink": {
              "$ref": "#/definitions/FileLink",
              "description": "Link to the document."
            }
          }
        }
      ]
    },
    "RevisionsModificationResponse": {
      "description": "response of the modification operations for the revisions collection (now these are acceptAll and rejectAll)",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "Result": {
              "$ref": "#/definitions/ModificationOperationResult",
              "description": "result of the modification operations for the revisions collection"
            }
          }
        }
      ]
    },
    "ModificationOperationResult": {
      "description": "result of the operation which modifies the original document and saves the result",
      "type": "object",
      "properties": {
        "Source": {
          "$ref": "#/definitions/FileLink",
          "description": "Link to the source document (source for the modification operation)"
        },
        "Dest": {
          "$ref": "#/definitions/FileLink",
          "description": "Link to the dest document (result of the modification operation)"
        }
      }
    },
    "SearchResponse": {
      "description": "This resonse should be returned by the service when handling:\r\nGET http://api.aspose.com/v1.1/words/Test.doc/search",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "SearchingPattern": {
              "description": "A regular expression pattern used to find matches.",
              "type": "string"
            },
            "SearchResults": {
              "$ref": "#/definitions/SearchResultsCollection",
              "description": "Collection of search results."
            }
          }
        }
      ]
    },
    "SearchResultsCollection": {
      "description": "Collection of search results.",
      "type": "object",
      "properties": {
        "ResultsList": {
          "description": "Collection of comments",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SearchResult": {
      "description": "Result of search operation.",
      "type": "object",
      "properties": {
        "RangeStart": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Link to result range start node."
        },
        "RangeEnd": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Link to result range end node."
        }
      }
    },
    "SplitDocumentResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "SplitResult": {
              "$ref": "#/definitions/SplitDocumentResult"
            }
          }
        }
      ]
    },
    "SplitDocumentResult": {
      "type": "object",
      "properties": {
        "SourceDocument": {
          "$ref": "#/definitions/FileLink"
        },
        "Pages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileLink"
          }
        },
        "ZippedPages": {
          "$ref": "#/definitions/FileLink"
        }
      }
    },
    "StatDataResponse": {
      "description": "Response for the request of the document's statistical data",
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "StatData": {
              "$ref": "#/definitions/DocumentStatData",
              "description": "Statistical data of the document"
            },
            "DocumentLink": {
              "$ref": "#/definitions/FileLink",
              "description": "Link to the document"
            }
          }
        }
      ]
    },
    "DocumentStatData": {
      "description": "Container for the document's statistical data",
      "type": "object",
      "properties": {
        "WordCount": {
          "format": "int32",
          "description": "Total count of words in the document",
          "type": "integer"
        },
        "ParagraphCount": {
          "format": "int32",
          "description": "Total count of paragraphs in the document",
          "type": "integer"
        },
        "PageCount": {
          "format": "int32",
          "description": "Total count of pages in the document",
          "type": "integer"
        },
        "FootnotesStatData": {
          "$ref": "#/definitions/FootnotesStatData",
          "description": "Detailed statistics of footnotes"
        },
        "PageStatData": {
          "description": "Detailed statistics of all pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageStatData"
          }
        }
      }
    },
    "FootnotesStatData": {
      "description": "Container for the footnotes statistical data",
      "type": "object",
      "properties": {
        "WordCount": {
          "format": "int32",
          "description": "Total count of words in footnotes",
          "type": "integer"
        },
        "ParagraphCount": {
          "format": "int32",
          "description": "Total count of paragraphs in footnotes",
          "type": "integer"
        }
      }
    },
    "PageStatData": {
      "description": "Container for the page's statistical data",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number",
          "type": "integer"
        },
        "WordCount": {
          "format": "int32",
          "description": "Total count of words in the page",
          "type": "integer"
        },
        "ParagraphCount": {
          "format": "int32",
          "description": "Total count of paragraphs in the page",
          "type": "integer"
        },
        "FootnotesStatData": {
          "$ref": "#/definitions/FootnotesStatData",
          "description": "Detailed statistics of footnotes"
        }
      }
    },
    "TextItemsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/SaaSposeResponse"
        },
        {
          "type": "object",
          "properties": {
            "TextItems": {
              "$ref": "#/definitions/TextItems"
            }
          }
        }
      ]
    },
    "TextItems": {
      "description": "Represents text items DTO.",
      "type": "object",
      "properties": {
        "List": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextItem"
          }
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "TextItem": {
      "description": "Represents text DTO.",
      "type": "object",
      "properties": {
        "Text": {
          "type": "string"
        },
        "link": {
          "$ref": "#/definitions/WordsApiLink",
          "description": "Link to the document."
        }
      }
    },
    "SaaSposeResponse": {
      "description": "Base class for all responses.",
      "type": "object",
      "properties": {
        "Code": {
          "format": "int32",
          "description": "Response status code.",
          "type": "integer",
          "readOnly": true
        },
        "Status": {
          "description": "Response status.",
          "type": "string"
        }
      },
      "discriminator": "SaaSposeResponseType"
    },
    "ParagraphInsert": {
      "description": "Paragraph element",
      "type": "object",
      "properties": {
        "Text": {
          "description": "Paragraph's text",
          "type": "string"
        }
      }
    },
    "PageNumber": {
      "description": "Class is used for insert page number request building.",
      "type": "object",
      "properties": {
        "Format": {
          "description": "Page number format, e.g. \"{PAGE} of {NUMPAGES}\".",
          "type": "string"
        },
        "Alignment": {
          "description": "Text alignment, possible values are left, right, center or justify.",
          "type": "string"
        },
        "IsTop": {
          "description": "If true the page number is added at the top of the page, else at the bottom.",
          "type": "boolean"
        },
        "SetPageNumberOnFirstPage": {
          "description": "If true the page number is added on first page too.",
          "type": "boolean"
        }
      }
    },
    "TableInsert": {
      "description": "Table element",
      "type": "object",
      "properties": {
        "Postion": {
          "$ref": "#/definitions/DocumentPosition",
          "description": "Table will be inserted before specified position."
        },
        "ColumnsCount": {
          "format": "int32",
          "description": "Count of columns. Default is 2.",
          "type": "integer"
        },
        "RowsCount": {
          "format": "int32",
          "description": "Count of rows. Default is 2.",
          "type": "integer"
        }
      }
    },
    "TableRowInsert": {
      "description": "Table row element",
      "type": "object",
      "properties": {
        "InsertAfter": {
          "format": "int32",
          "description": "Table row will be inserted after row with specified 0-based index.",
          "type": "integer"
        },
        "ColumnsCount": {
          "format": "int32",
          "description": "Count of columns. Default is 1.",
          "type": "integer"
        }
      }
    },
    "TableCellInsert": {
      "description": "Table cell element",
      "type": "object",
      "properties": {
        "InsertAfter": {
          "format": "int32",
          "description": "Table cell will be inserted after cell with specified 0-based index.",
          "type": "integer"
        }
      }
    },
    "ReplaceTextRequest": {
      "description": "Class for document replace text request building.",
      "type": "object",
      "properties": {
        "OldValue": {
          "description": "Old text value (or regex pattern {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.IsOldValueRegex}) to replace.",
          "type": "string"
        },
        "NewValue": {
          "description": "New text value to replace by.",
          "type": "string"
        },
        "IsMatchCase": {
          "description": "Flag, true means the search is case-sensitive; false means the search is not case-sensitive.",
          "type": "boolean"
        },
        "IsMatchWholeWord": {
          "description": "Flag, means that only whole word matched are replaced.",
          "type": "boolean"
        },
        "IsOldValueRegex": {
          "description": "Flag, means that {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.OldValue} contains regex expression.",
          "type": "boolean"
        }
      }
    },
    "WatermarkText": {
      "description": "Class for insert watermark text request building.",
      "type": "object",
      "properties": {
        "Text": {
          "description": "The watermark text.",
          "type": "string"
        },
        "RotationAngle": {
          "format": "double",
          "description": "The watermark rotation angle.",
          "type": "number"
        }
      }
    },
    "ProtectionRequest": {
      "description": "Request on changing of protection",
      "type": "object",
      "properties": {
        "Password": {
          "description": "Current password",
          "type": "string"
        },
        "NewPassword": {
          "description": "New password",
          "type": "string"
        },
        "ProtectionType": {
          "description": "New type of protection",
          "type": "string"
        }
      }
    },
    "DocumentEntryList": {
      "type": "object",
      "properties": {
        "DocumentEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentEntry"
          }
        }
      }
    },
    "DocumentEntry": {
      "type": "object",
      "properties": {
        "Href": {
          "type": "string"
        },
        "ImportFormatMode": {
          "type": "string"
        }
      }
    },
    "CompareData": {
      "description": "Container class for compare documents",
      "type": "object",
      "properties": {
        "ComparingWithDocument": {
          "description": "Path to document to compare at the server.",
          "type": "string"
        },
        "Author": {
          "description": "Initials of the author to use for revisions.",
          "type": "string"
        },
        "DateTime": {
          "format": "date-time",
          "description": "The date and time to use for revisions.",
          "type": "string"
        }
      }
    },
    "BookmarkData": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Text": {
          "type": "string"
        }
      }
    },
    "LoadWebDocumentData": {
      "description": "Contains data for load web document",
      "type": "object",
      "properties": {
        "LoadingDocumentUrl": {
          "description": "Web document url",
          "type": "string"
        },
        "SaveOptions": {
          "$ref": "#/definitions/SaveOptionsData",
          "description": "Save options"
        }
      }
    }
  }
}