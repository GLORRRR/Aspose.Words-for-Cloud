#import <Foundation/Foundation.h>
#import "ASPSaveResponse.h"
#import "ASPLoadWebDocumentData.h"
#import "ASPFieldNamesResponse.h"
#import "ASPResponseMessage.h"
#import "ASPSaveOptionsData.h"
#import "ASPTiffSaveOptionsData.h"
#import "ASPDocumentResponse.h"
#import "ASPDocumentEntryList.h"
#import "ASPBookmarksResponse.h"
#import "ASPBookmarkResponse.h"
#import "ASPBookmarkData.h"
#import "ASPCommentsResponse.h"
#import "ASPCommentResponse.h"
#import "ASPComment.h"
#import "ASPBaseResponse.h"
#import "ASPDocumentPropertiesResponse.h"
#import "ASPDocumentPropertyResponse.h"
#import "ASPDocumentProperty.h"
#import "ASPDrawingObjectResponse.h"
#import "ASPDrawingObjectsResponse.h"
#import "ASPHyperlinksResponse.h"
#import "ASPHyperlinkResponse.h"
#import "ASPPageNumber.h"
#import "ASPWatermarkText.h"
#import "ASPParagraphLinkCollectionResponse.h"
#import "ASPParagraphResponse.h"
#import "ASPRunResponse.h"
#import "ASPFontResponse.h"
#import "ASPFont.h"
#import "ASPProtectionDataResponse.h"
#import "ASPProtectionRequest.h"
#import "ASPReplaceTextRequest.h"
#import "ASPReplaceTextResponse.h"
#import "ASPRevisionsModificationResponse.h"
#import "ASPSearchResponse.h"
#import "ASPSectionLinkCollectionResponse.h"
#import "ASPSectionResponse.h"
#import "ASPSectionPageSetupResponse.h"
#import "ASPPageSetup.h"
#import "ASPField.h"
#import "ASPFieldResponse.h"
#import "ASPFormField.h"
#import "ASPFormFieldResponse.h"
#import "ASPSplitDocumentResponse.h"
#import "ASPStatDataResponse.h"
#import "ASPTextItemsResponse.h"
#import "ASPObject.h"
#import "ASPApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPWordsApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPWordsApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
///
///
/// Convert document from request content to format specified.
/// 
///
/// @param file 
/// @param format Format to convert.
/// @param outPath Path for saving operation result to the local storage.
/// @param replaceResourcesHostTo Controls wherefrom Aspose.Words loads external resource when importing a document from HTML or MHTML.
/// 
///
/// @return NSURL*
-(NSNumber*) putConvertDocumentWithCompletionBlock :(NSURL*) file 
     format:(NSString*) format 
     outPath:(NSString*) outPath 
     replaceResourcesHostTo:(NSString*) replaceResourcesHostTo 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Execute document mail merge online.
/// 
///
/// @param withRegions With regions flag.
/// @param file 
/// @param data 
/// @param cleanup Clean up options.
/// 
///
/// @return NSURL*
-(NSNumber*) putExecuteMailMergeOnlineWithCompletionBlock :(NSNumber*) withRegions 
     file:(NSURL*) file 
     data:(NSURL*) data 
     cleanup:(NSString*) cleanup 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Populate document template with data online.
/// 
///
/// @param file 
/// @param data 
/// @param cleanup Clean up options.
/// @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. The default value is true.
/// @param withRegions Merge with regions or not. True by default
/// 
///
/// @return NSURL*
-(NSNumber*) putExecuteTemplateOnlineWithCompletionBlock :(NSURL*) file 
     data:(NSURL*) data 
     cleanup:(NSString*) cleanup 
     useWholeParagraphAsRegion:(NSNumber*) useWholeParagraphAsRegion 
     withRegions:(NSNumber*) withRegions 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Load new document from web into the file with any supported format of data.
/// 
///
/// @param data 
/// 
///
/// @return ASPSaveResponse*
-(NSNumber*) postLoadWebDocumentWithCompletionBlock :(ASPLoadWebDocumentData*) data 
    
    completionHandler: (void (^)(ASPSaveResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document field names.
/// 
///
/// @param useNonMergeFields 
/// 
///
/// @return ASPFieldNamesResponse*
-(NSNumber*) putDocumentFieldNamesWithCompletionBlock :(NSNumber*) useNonMergeFields 
    
    completionHandler: (void (^)(ASPFieldNamesResponse* output, NSError* error))completionBlock;
    


///
///
/// Run tasks
/// 
///
/// @param file 
/// 
///
/// @return ASPResponseMessage*
-(NSNumber*) postRunTaskWithCompletionBlock :(NSURL*) file 
    
    completionHandler: (void (^)(ASPResponseMessage* output, NSError* error))completionBlock;


///
///
/// Read document common info.
///
///
/// @param name The file name.
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return ASPDocumentResponse*
-(NSNumber*) getDocumentWithCompletionBlock :(NSString*) name
                                     storage:(NSString*) storage
                                      folder:(NSString*) folder

                           completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;


///
///
/// 
/// 
///
/// @param name 
/// @param format 
/// @param storage 
/// @param folder 
/// @param outPath 
/// 
///
/// @return NSURL*
-(NSNumber*) getDocumentWithFormatWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Convert document to destination format with detailed settings and save result to storage.
/// 
///
/// @param name The document name.
/// @param saveOptionsData Save options.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSaveResponse*
-(NSNumber*) postDocumentSaveAsWithCompletionBlock :(NSString*) name 
     saveOptionsData:(ASPSaveOptionsData*) saveOptionsData 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSaveResponse* output, NSError* error))completionBlock;
    


///
///
/// Convert document to tiff with detailed settings and save result to storage.
/// 
///
/// @param name The document name.
/// @param saveOptions Tiff save options.
/// @param resultFile The resulting file name.
/// @param useAntiAliasing Use antialiasing flag.
/// @param useHighQualityRendering Use high quality flag.
/// @param imageBrightness Brightness for the generated images.
/// @param imageColorMode Color mode for the generated images.
/// @param imageContrast The contrast for the generated images.
/// @param numeralFormat The images numeral format.
/// @param pageCount Number of pages to render.
/// @param pageIndex Page index to start rendering.
/// @param paperColor Background image color.
/// @param pixelFormat The pixel format of generated images.
/// @param resolution The resolution of generated images.
/// @param scale Zoom factor for generated images.
/// @param tiffCompression The compression tipe.
/// @param dmlRenderingMode Optional, default is Fallback.
/// @param dmlEffectsRenderingMode Optional, default is Simplified.
/// @param tiffBinarizationMethod Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.
/// @param storage The document storage.
/// @param folder The document folder.
/// @param zipOutput Optional. A value determining zip output or not.
/// 
///
/// @return ASPSaveResponse*
-(NSNumber*) putDocumentSaveAsTiffWithCompletionBlock :(NSString*) name 
     saveOptions:(ASPTiffSaveOptionsData*) saveOptions 
     resultFile:(NSString*) resultFile 
     useAntiAliasing:(NSNumber*) useAntiAliasing 
     useHighQualityRendering:(NSNumber*) useHighQualityRendering 
     imageBrightness:(NSNumber*) imageBrightness 
     imageColorMode:(NSString*) imageColorMode 
     imageContrast:(NSNumber*) imageContrast 
     numeralFormat:(NSString*) numeralFormat 
     pageCount:(NSNumber*) pageCount 
     pageIndex:(NSNumber*) pageIndex 
     paperColor:(NSString*) paperColor 
     pixelFormat:(NSString*) pixelFormat 
     resolution:(NSNumber*) resolution 
     scale:(NSNumber*) scale 
     tiffCompression:(NSString*) tiffCompression 
     dmlRenderingMode:(NSString*) dmlRenderingMode 
     dmlEffectsRenderingMode:(NSString*) dmlEffectsRenderingMode 
     tiffBinarizationMethod:(NSString*) tiffBinarizationMethod 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     zipOutput:(NSNumber*) zipOutput 
    
    completionHandler: (void (^)(ASPSaveResponse* output, NSError* error))completionBlock;
    


///
///
/// Append documents to original document.
/// 
///
/// @param name Original document name.
/// @param documentList {DocumentEntryList} with a list of documents to append.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage Original document storage.
/// @param folder Original document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postAppendDocumentWithCompletionBlock :(NSString*) name 
     documentList:(ASPDocumentEntryList*) documentList 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document bookmarks common info.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBookmarksResponse*
-(NSNumber*) getDocumentBookmarksWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBookmarksResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document bookmark data by its name.
/// 
///
/// @param name The document name.
/// @param bookmarkName The bookmark name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBookmarkResponse*
-(NSNumber*) getDocumentBookmarkByNameWithCompletionBlock :(NSString*) name 
     bookmarkName:(NSString*) bookmarkName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBookmarkResponse* output, NSError* error))completionBlock;
    


///
///
/// Update document bookmark.
/// 
///
/// @param name The document name.
/// @param bookmarkName The bookmark name.
/// @param bookmarkData {BookmarkData} with new bookmark data.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBookmarkResponse*
-(NSNumber*) postUpdateDocumentBookmarkWithCompletionBlock :(NSString*) name 
     bookmarkName:(NSString*) bookmarkName 
     bookmarkData:(ASPBookmarkData*) bookmarkData 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBookmarkResponse* output, NSError* error))completionBlock;
    


///
///
/// Get comments from document.
/// 
///
/// @param name The file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentsResponse*
-(NSNumber*) getCommentsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentsResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds comment to document, returns inserted comment's data.
/// 
///
/// @param name The document name.
/// @param comment Comment data.
/// @param fileName Destination file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentResponse*
-(NSNumber*) putCommentWithCompletionBlock :(NSString*) name 
     comment:(ASPComment*) comment 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentResponse* output, NSError* error))completionBlock;
    


///
///
/// Get comment from document.
/// 
///
/// @param name The file name.
/// @param commentIndex Comment index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentResponse*
-(NSNumber*) getCommentWithCompletionBlock :(NSString*) name 
     commentIndex:(NSNumber*) commentIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates the comment, returns updated comment's data.
/// 
///
/// @param name The document name.
/// @param commentIndex Comment index
/// @param comment Comment data.
/// @param fileName Destination file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentResponse*
-(NSNumber*) postCommentWithCompletionBlock :(NSString*) name 
     commentIndex:(NSNumber*) commentIndex 
     comment:(ASPComment*) comment 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove comment from document.
/// 
///
/// @param name The file name.
/// @param commentIndex Comment index
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteCommentWithCompletionBlock :(NSString*) name 
     commentIndex:(NSNumber*) commentIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document properties info.
/// 
///
/// @param name The document&#39;s name.
/// @param storage The document&#39;s storage.
/// @param folder The document&#39;s folder.
/// 
///
/// @return ASPDocumentPropertiesResponse*
-(NSNumber*) getDocumentPropertiesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document property info by the property name.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) getDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Add new or update existing document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param _property The property with new value.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) putUpdateDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     _property:(ASPDocumentProperty*) _property 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document drawing objects common info.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDrawingObjectsResponse*
-(NSNumber*) getDocumentDrawingObjectsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDrawingObjectsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document drawing object common info by its index.
///
///
/// @param name The document name.
/// @param objectIndex The drawing object index.
/// @param storage The document storage.
/// @param folder The document folder full path.
///
///
/// @return ASPDrawingObjectResponse*
-(NSNumber*) getDocumentDrawingObjectByIndexWithCompletionBlock :(NSString*) name
                                                     objectIndex:(NSNumber*) objectIndex
                                                         storage:(NSString*) storage
                                                          folder:(NSString*) folder

                                               completionHandler: (void (^)(ASPDrawingObjectResponse* output, NSError* error))completionBlock;



///
///
/// 
/// 
///
/// @param name 
/// @param objectIndex 
/// @param format 
/// @param storage 
/// @param folder 
/// 
///
/// @return NSURL*
-(NSNumber*) getDocumentDrawingObjectByIndexWithFormatWithCompletionBlock :(NSString*) name 
     objectIndex:(NSNumber*) objectIndex 
     format:(NSString*) format 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Read drawing object image data.
/// 
///
/// @param name The document name.
/// @param objectIndex The drawing object index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return NSURL*
-(NSNumber*) getDocumentDrawingObjectImageDataWithCompletionBlock :(NSString*) name 
     objectIndex:(NSNumber*) objectIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Get drawing object OLE data.
/// 
///
/// @param name The document name.
/// @param objectIndex The object index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return NSURL*
-(NSNumber*) getDocumentDrawingObjectOleDataWithCompletionBlock :(NSString*) name 
     objectIndex:(NSNumber*) objectIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Execute document mail merge operation.
/// 
///
/// @param name The document name.
/// @param withRegions With regions flag.
/// @param file 
/// @param mailMergeDataFile Mail merge data.
/// @param cleanup Clean up options.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields. The default value is true.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postDocumentExecuteMailMergeWithCompletionBlock :(NSString*) name 
     withRegions:(NSNumber*) withRegions 
     file:(NSURL*) file 
     mailMergeDataFile:(NSString*) mailMergeDataFile 
     cleanup:(NSString*) cleanup 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     useWholeParagraphAsRegion:(NSNumber*) useWholeParagraphAsRegion 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Populate document template with data.
/// 
///
/// @param name The template document name.
/// @param file 
/// @param cleanup Clean up options.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// @param useWholeParagraphAsRegion Gets or sets a value indicating whether paragraph with TableStart or TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.  The default value is true.
/// @param withRegions Merge with regions or not. True by default
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postExecuteTemplateWithCompletionBlock :(NSString*) name 
     file:(NSURL*) file 
     cleanup:(NSString*) cleanup 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     useWholeParagraphAsRegion:(NSNumber*) useWholeParagraphAsRegion 
     withRegions:(NSNumber*) withRegions 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove fields from document.
/// 
///
/// @param name The file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteDocumentFieldsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete document headers and footers.
/// 
///
/// @param name The document name.
/// @param headersFootersTypes List of types of headers and footers.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteHeadersFootersWithCompletionBlock :(NSString*) name 
     headersFootersTypes:(NSString*) headersFootersTypes 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document hyperlinks common info.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPHyperlinksResponse*
-(NSNumber*) getDocumentHyperlinksWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinksResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document hyperlink by its index.
/// 
///
/// @param name The document name.
/// @param hyperlinkIndex The hyperlink index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPHyperlinkResponse*
-(NSNumber*) getDocumentHyperlinkByIndexWithCompletionBlock :(NSString*) name 
     hyperlinkIndex:(NSNumber*) hyperlinkIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinkResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert document page numbers.
/// 
///
/// @param name A document name.
/// @param pageNumber {PageNumber} with the page numbers settings.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postInsertPageNumbersWithCompletionBlock :(NSString*) name 
     pageNumber:(ASPPageNumber*) pageNumber 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert document watermark image.
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param rotationAngle The watermark rotation angle.
/// @param image The image file server full name. If the name is empty the image is expected in request content.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postInsertWatermarkImageWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     rotationAngle:(NSNumber*) rotationAngle 
     image:(NSString*) image 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert document watermark text.
/// 
///
/// @param name The document name.
/// @param watermarkText {WatermarkText} with the watermark data.If the parameter is provided the query string parameters are ignored.
/// @param text The text to insert.
/// @param rotationAngle The text rotation angle.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postInsertWatermarkTextWithCompletionBlock :(NSString*) name 
     watermarkText:(ASPWatermarkText*) watermarkText 
     text:(NSString*) text 
     rotationAngle:(NSNumber*) rotationAngle 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove macros from document.
/// 
///
/// @param name The file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteDocumentMacrosWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document field names.
/// 
///
/// @param name The document name.
/// @param useNonMergeFields 
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPFieldNamesResponse*
-(NSNumber*) getDocumentFieldNamesWithCompletionBlock :(NSString*) name 
     useNonMergeFields:(NSNumber*) useNonMergeFields 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFieldNamesResponse* output, NSError* error))completionBlock;
    


///
///
/// Return a list of paragraphs that are contained in the document.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPParagraphLinkCollectionResponse*
-(NSNumber*) getDocumentParagraphsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPParagraphLinkCollectionResponse* output, NSError* error))completionBlock;
    


///
///
/// This resource represents one of the paragraphs contained in the document.
/// 
///
/// @param name The document name.
/// @param index Paragraph index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPParagraphResponse*
-(NSNumber*) getDocumentParagraphWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPParagraphResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove fields from paragraph.
/// 
///
/// @param name The file name.
/// @param index Paragraph index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteParagraphFieldsWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// This resource represents one of the paragraphs contained in the document.
/// 
///
/// @param name The document name.
/// @param index Paragraph index
/// @param runIndex Run index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRunResponse*
-(NSNumber*) getDocumentParagraphRunWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     runIndex:(NSNumber*) runIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRunResponse* output, NSError* error))completionBlock;
    


///
///
/// This resource represents one of the paragraphs contained in the document.
/// 
///
/// @param name The document name.
/// @param index Paragraph index
/// @param runIndex Run index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPFontResponse*
-(NSNumber*) getDocumentParagraphRunFontWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     runIndex:(NSNumber*) runIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFontResponse* output, NSError* error))completionBlock;
    


///
///
/// This resource represents one of the paragraphs contained in the document.
/// 
///
/// @param name The document name.
/// @param index Paragraph index
/// @param runIndex Run index
/// @param font Font object
/// @param storage The document storage.
/// @param folder The document folder.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// 
///
/// @return ASPFontResponse*
-(NSNumber*) postDocumentParagraphRunFontWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     runIndex:(NSNumber*) runIndex 
     font:(ASPFont*) font 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     filename:(NSString*) filename 
    
    completionHandler: (void (^)(ASPFontResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document protection common info.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPProtectionDataResponse*
-(NSNumber*) getDocumentProtectionWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPProtectionDataResponse* output, NSError* error))completionBlock;
    


///
///
/// Protect document.
/// 
///
/// @param name The document name.
/// @param protectionRequest {ProtectionRequest} with protection settings.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPProtectionDataResponse*
-(NSNumber*) putProtectDocumentWithCompletionBlock :(NSString*) name 
     protectionRequest:(ASPProtectionRequest*) protectionRequest 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPProtectionDataResponse* output, NSError* error))completionBlock;
    


///
///
/// Change document protection.
/// 
///
/// @param name The document name.
/// @param protectionRequest {ProtectionRequest} with protection settings.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPProtectionDataResponse*
-(NSNumber*) postChangeDocumentProtectionWithCompletionBlock :(NSString*) name 
     protectionRequest:(ASPProtectionRequest*) protectionRequest 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPProtectionDataResponse* output, NSError* error))completionBlock;
    


///
///
/// Unprotect document.
/// 
///
/// @param name The document name.
/// @param protectionRequest {ProtectionRequest} with protection settings.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPProtectionDataResponse*
-(NSNumber*) deleteUnprotectDocumentWithCompletionBlock :(NSString*) name 
     protectionRequest:(ASPProtectionRequest*) protectionRequest 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPProtectionDataResponse* output, NSError* error))completionBlock;
    


///
///
/// Replace document text.
/// 
///
/// @param name The document name.
/// @param replaceText {ReplaceTextResponse} with the replace operation settings.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPReplaceTextResponse*
-(NSNumber*) postReplaceTextWithCompletionBlock :(NSString*) name 
     replaceText:(ASPReplaceTextRequest*) replaceText 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPReplaceTextResponse* output, NSError* error))completionBlock;
    


///
///
/// Accept all revisions in document
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRevisionsModificationResponse*
-(NSNumber*) acceptAllRevisionsWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRevisionsModificationResponse* output, NSError* error))completionBlock;
    


///
///
/// Reject all revisions in document
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRevisionsModificationResponse*
-(NSNumber*) rejectAllRevisionsWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRevisionsModificationResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param pattern 
/// @param storage 
/// @param folder 
/// 
///
/// @return ASPSearchResponse*
-(NSNumber*) getWordsSearchWithCompletionBlock :(NSString*) name 
     pattern:(NSString*) pattern 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSearchResponse* output, NSError* error))completionBlock;
    


///
///
/// Return a list of sections that are contained in the document.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSectionLinkCollectionResponse*
-(NSNumber*) getSectionsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSectionLinkCollectionResponse* output, NSError* error))completionBlock;
    


///
///
/// Get document section by index.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSectionResponse*
-(NSNumber*) getSectionWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSectionResponse* output, NSError* error))completionBlock;
    


///
///
/// Remove fields from section.
/// 
///
/// @param name The file name.
/// @param sectionIndex Section index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteSectionFieldsWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get page setup of section.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSectionPageSetupResponse*
-(NSNumber*) getSectionPageSetupWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSectionPageSetupResponse* output, NSError* error))completionBlock;
    


///
///
/// Update page setup of section.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index
/// @param pageSetup Page setup properties
/// @param storage The document storage.
/// @param folder The document folder.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
/// 
///
/// @return ASPSectionPageSetupResponse*
-(NSNumber*) updateSectionPageSetupWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     pageSetup:(ASPPageSetup*) pageSetup 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     filename:(NSString*) filename 
    
    completionHandler: (void (^)(ASPSectionPageSetupResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param sectionIndex 
/// @param paragraphIndex 
/// @param field 
/// @param insertBeforeNode 
/// @param destFileName 
/// @param storage 
/// @param folder 
/// 
///
/// @return ASPFieldResponse*
-(NSNumber*) putFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     field:(ASPField*) field 
     insertBeforeNode:(NSString*) insertBeforeNode 
     destFileName:(NSString*) destFileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param sectionIndex 
/// @param paragraphIndex 
/// @param fieldIndex 
/// @param storage 
/// @param folder 
/// 
///
/// @return ASPFieldResponse*
-(NSNumber*) getFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     fieldIndex:(NSNumber*) fieldIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param sectionIndex 
/// @param paragraphIndex 
/// @param fieldIndex 
/// @param field 
/// @param destFileName 
/// @param storage 
/// @param folder 
/// 
///
/// @return ASPFieldResponse*
-(NSNumber*) postFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     fieldIndex:(NSNumber*) fieldIndex 
     field:(ASPField*) field 
     destFileName:(NSString*) destFileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds form field to paragraph, returns added form field's data.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index.
/// @param paragraphIndex Paragraph index.
/// @param formField From field data.
/// @param insertBeforeNode Form field will be inserted before node with index.
/// @param destFileName Destination file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPFormFieldResponse*
-(NSNumber*) putFormFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     formField:(ASPFormField*) formField 
     insertBeforeNode:(NSString*) insertBeforeNode 
     destFileName:(NSString*) destFileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFormFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// Returns representation of an one of the form field.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index.
/// @param paragraphIndex Paragraph index.
/// @param formfieldIndex Form field index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPFormFieldResponse*
-(NSNumber*) getFormFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     formfieldIndex:(NSNumber*) formfieldIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFormFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates form field's properties, returns updated form field's data.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index.
/// @param paragraphIndex Paragraph index.
/// @param formfieldIndex Form field index.
/// @param formField From field data.
/// @param destFileName Destination file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPFormFieldResponse*
-(NSNumber*) postFormFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     formfieldIndex:(NSNumber*) formfieldIndex 
     formField:(ASPFormField*) formField 
     destFileName:(NSString*) destFileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFormFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// Removes form field from document.
/// 
///
/// @param name The document name.
/// @param sectionIndex Section index.
/// @param paragraphIndex Paragraph index.
/// @param formfieldIndex Form field index.
/// @param destFileName Destination file name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteFormFieldWithCompletionBlock :(NSString*) name 
     sectionIndex:(NSNumber*) sectionIndex 
     paragraphIndex:(NSNumber*) paragraphIndex 
     formfieldIndex:(NSNumber*) formfieldIndex 
     destFileName:(NSString*) destFileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Split document.
/// 
///
/// @param name Original document name.
/// @param format Format to split.
/// @param from Start page.
/// @param to End page.
/// @param zipOutput ZipOutput or not.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSplitDocumentResponse*
-(NSNumber*) postSplitDocumentWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     from:(NSNumber*) from 
     to:(NSNumber*) to 
     zipOutput:(NSNumber*) zipOutput 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSplitDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document statistics.
/// 
///
/// @param name The document name.
/// @param includeComments Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;.
/// @param includeFootnotes Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;.
/// @param includeTextInShapes Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot;
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPStatDataResponse*
-(NSNumber*) getDocumentStatisticsWithCompletionBlock :(NSString*) name 
     includeComments:(NSNumber*) includeComments 
     includeFootnotes:(NSNumber*) includeFootnotes 
     includeTextInShapes:(NSNumber*) includeTextInShapes 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPStatDataResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document text items.
/// 
///
/// @param name The document name.
/// @param storage Document&#39;s storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) getDocumentTextItemsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Update (reevaluate) fields in document.
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postUpdateDocumentFieldsWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete watermark (for deleting last watermark from the document).
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) deleteDocumentWatermarkWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert document watermark image.
/// 
///
/// @param name The document name.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param rotationAngle The watermark rotation angle.
/// @param image The image file server full name. If the name is empty the image is expected in request content.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postInsertDocumentWatermarkImageWithCompletionBlock :(NSString*) name 
     filename:(NSString*) filename 
     rotationAngle:(NSNumber*) rotationAngle 
     image:(NSString*) image 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert document watermark text.
/// 
///
/// @param name The document name.
/// @param watermarkText {WatermarkText} with the watermark data.If the parameter is provided the query string parameters are ignored.
/// @param filename Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document
/// @param text The text to insert.
/// @param rotationAngle The text rotation angle.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentResponse*
-(NSNumber*) postInsertDocumentWatermarkTextWithCompletionBlock :(NSString*) name 
     watermarkText:(ASPWatermarkText*) watermarkText 
     filename:(NSString*) filename 
     text:(NSString*) text 
     rotationAngle:(NSNumber*) rotationAngle 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentResponse* output, NSError* error))completionBlock;
    



@end
