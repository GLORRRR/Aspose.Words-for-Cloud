// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aspose.Words.Cloud.Sdk.BddTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MailMergeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MailMerge.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MailMerge", "In order to create personalized documents a user\r\nshould be able to perform mail " +
                    "merge", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "MailMerge")))
            {
                Aspose.Words.Cloud.Sdk.BddTests.Features.MailMergeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ExecuteTemplate(string templateName, string body, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplate"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.And("document name is Guid value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestExecuteTemplateData.txt")]
        public virtual void ExecuteTemplate_TestExecuteTemplate_Doc()
        {
            this.ExecuteTemplate("TestExecuteTemplate.doc", "TestExecuteTemplateData.txt", ((string[])(null)));
        }
        
        public virtual void ExecuteTemplateWithCustomOutput(string templateName, string body, string destinationFileName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplateWithCustomOut"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template With Custom Output", @__tags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And(string.Format("I have specified a destFileName {0}", destinationFileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("document name is equal to destFileName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Custom Output")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithCustomOut")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestExecuteTemplateData.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationFileName", "ExecutedTemplate.doc")]
        public virtual void ExecuteTemplateWithCustomOutput_TestExecuteTemplate_Doc()
        {
            this.ExecuteTemplateWithCustomOutput("TestExecuteTemplate.doc", "TestExecuteTemplateData.txt", "ExecutedTemplate.doc", ((string[])(null)));
        }
        
        public virtual void ExecuteTemplateWithRegions(string templateName, string body, string destinationFileName, string useRegions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplateWithRegions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template With Regions", @__tags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And(string.Format("I have specified a destFileName {0}", destinationFileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And(string.Format("I have specified withRegions {0}", useRegions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.And("document name is equal to destFileName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Regions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithRegions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestExecuteTemplateData.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationFileName", "ExecutedTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UseRegions", "true")]
        public virtual void ExecuteTemplateWithRegions_TestExecuteTemplate_Doc()
        {
            this.ExecuteTemplateWithRegions("TestExecuteTemplate.doc", "TestExecuteTemplateData.txt", "ExecutedTemplate.doc", "true", ((string[])(null)));
        }
        
        public virtual void ExecuteTemplateWithRegionsAndNotUseWholeParagraphAsRegion(string templateName, string body, string destinationFileName, string useRegions, string useWholeParagraphAsRegion, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplateWithRegionsAndNotUseWholeParagraphAsRegion"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template With Regions And Not UseWholeParagraphAsRegion", @__tags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And(string.Format("I have specified a destFileName {0}", destinationFileName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And(string.Format("I have specified withRegions {0}", useRegions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And(string.Format("I have specified useWholeParagraphAsRegion {0}", useWholeParagraphAsRegion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And("document name is equal to destFileName", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Regions And Not UseWholeParagraphAsRegion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithRegionsAndNotUseWholeParagraphAsRegion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestExecuteTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestExecuteTemplateData.txt")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DestinationFileName", "ExecutedTemplate.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UseRegions", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UseWholeParagraphAsRegion", "false")]
        public virtual void ExecuteTemplateWithRegionsAndNotUseWholeParagraphAsRegion_TestExecuteTemplate_Doc()
        {
            this.ExecuteTemplateWithRegionsAndNotUseWholeParagraphAsRegion("TestExecuteTemplate.doc", "TestExecuteTemplateData.txt", "ExecutedTemplate.doc", "true", "false", ((string[])(null)));
        }
        
        public virtual void ExecuteTemplateWithImages(string templateName, string body, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplateWithImages"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template With Images", @__tags);
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("document name is Guid value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("image should be rendered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Images")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithImages")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "TestMailMergeWithImages.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestMailMergeWithImages.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestDataWithRemoteScaledImages.xml")]
        public virtual void ExecuteTemplateWithImages_TestMailMergeWithImages_Doc()
        {
            this.ExecuteTemplateWithImages("TestMailMergeWithImages.doc", "TestDataWithRemoteScaledImages.xml", ((string[])(null)));
        }
        
        public virtual void ExecuteTemplateWithCleanupOptions(string templateName, string body, string cleanup, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ExecuteTemplateWithCleanupOptions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Template With Cleanup Options", @__tags);
#line 74
this.ScenarioSetup(scenarioInfo);
#line 75
 testRunner.Given(string.Format("I have specified a template {0} with mustache syntax", templateName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 76
 testRunner.And(string.Format("I have specified a body {0}", body), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And(string.Format("I have specified a cleanup option {0}", cleanup), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.When("I execute template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("document with merged values should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
 testRunner.And("document name is Guid value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.And("unused option is cleaned up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Cleanup Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithCleanupOptions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestMailMergeWithCleanupOptions.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestCleanupOptionsData.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Cleanup", "UnusedRegions")]
        public virtual void ExecuteTemplateWithCleanupOptions_Variant0()
        {
            this.ExecuteTemplateWithCleanupOptions("TestMailMergeWithCleanupOptions.doc", "TestCleanupOptionsData.xml", "UnusedRegions", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Cleanup Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithCleanupOptions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestMailMergeWithCleanupOptions.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestCleanupOptionsData.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Cleanup", "UnusedFields")]
        public virtual void ExecuteTemplateWithCleanupOptions_Variant1()
        {
            this.ExecuteTemplateWithCleanupOptions("TestMailMergeWithCleanupOptions.doc", "TestCleanupOptionsData.xml", "UnusedFields", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Template With Cleanup Options")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "MailMerge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ExecuteTemplateWithCleanupOptions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:TemplateName", "TestMailMergeWithCleanupOptions.doc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Body", "TestCleanupOptionsData.xml")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Cleanup", "EmptyParagraphs")]
        public virtual void ExecuteTemplateWithCleanupOptions_Variant2()
        {
            this.ExecuteTemplateWithCleanupOptions("TestMailMergeWithCleanupOptions.doc", "TestCleanupOptionsData.xml", "EmptyParagraphs", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
