/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.com.aspose;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTORevisionsModificationResponse</returns>
        AsposeWordsCloudDTORevisionsModificationResponse AcceptAllRevisions (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Accept all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> AcceptAllRevisionsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Resets border properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommonBorderResponse DeleteBorder (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Resets border properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> DeleteBorderWithHttpInfo (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Resets borders properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommonBordersResponse DeleteBorders (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Resets borders properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> DeleteBordersWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteComment (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteCommentWithHttpInfo (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove macros from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDocumentMacros (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove macros from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentMacrosWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDocumentProperty (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentPropertyWithHttpInfo (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete watermark (for deleting last watermark from the document).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse DeleteDocumentWatermark (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> DeleteDocumentWatermarkWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes drawing object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDrawingObject (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes drawing object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDrawingObjectWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteField (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove fields from section paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFields (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove fields from section paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldsWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes footnote from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFootnote (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes footnote from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFootnoteWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes form field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFormField (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes form field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFormFieldWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete header/footer from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteHeaderFooter (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete header/footer from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeaderFooterWithHttpInfo (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete document headers and footers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteHeadersFooters (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete document headers and footers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeadersFootersWithHttpInfo (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes OfficeMath object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteOfficeMathObject (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes OfficeMath object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteOfficeMathObjectWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove paragraph from section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteParagraph (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove paragraph from section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteParagraphWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes run from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteRun (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes run from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteRunWithHttpInfo (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTable (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTableCell (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableCellWithHttpInfo (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTableRow (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableRowWithHttpInfo (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        AsposeWordsCloudDTOProtectionDataResponse DeleteUnprotectDocument (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> DeleteUnprotectDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a border.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommonBorderResponse GetBorder (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a border.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> GetBorderWithHttpInfo (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a collection of borders.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommonBordersResponse GetBorders (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a collection of borders.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> GetBordersWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommentsCommentResponse GetComment (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> GetCommentWithHttpInfo (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get comments from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse GetComments (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get comments from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> GetCommentsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse GetDocument (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> GetDocumentWithHttpInfo (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document bookmark data by its name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse GetDocumentBookmarkByName (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document bookmark data by its name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> GetDocumentBookmarkByNameWithHttpInfo (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document bookmarks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse GetDocumentBookmarks (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document bookmarks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> GetDocumentBookmarksWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse GetDocumentDrawingObjectByIndex (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> GetDocumentDrawingObjectByIndexWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read drawing object image data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentDrawingObjectImageData (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read drawing object image data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentDrawingObjectImageDataWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get drawing object OLE data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentDrawingObjectOleData (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get drawing object OLE data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentDrawingObjectOleDataWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document drawing objects common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse GetDocumentDrawingObjects (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document drawing objects common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> GetDocumentDrawingObjectsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOFieldNamesResponse</returns>
        AsposeWordsCloudDTOFieldNamesResponse GetDocumentFieldNames (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOFieldNamesResponse</returns>
        ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> GetDocumentFieldNamesWithHttpInfo (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document hyperlink by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse GetDocumentHyperlinkByIndex (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document hyperlink by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> GetDocumentHyperlinkByIndexWithHttpInfo (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document hyperlinks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse GetDocumentHyperlinks (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document hyperlinks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> GetDocumentHyperlinksWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents one of the paragraphs contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse GetDocumentParagraph (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> GetDocumentParagraphWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents run of text contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        AsposeWordsCloudDTODocumentElementsRunsRunResponse GetDocumentParagraphRun (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents run of text contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> GetDocumentParagraphRunWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents font of run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        AsposeWordsCloudDTODocumentElementsFontElementFontResponse GetDocumentParagraphRunFont (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents font of run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> GetDocumentParagraphRunFontWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents collection of runs in the paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        AsposeWordsCloudDTODocumentElementsRunsRunsResponse GetDocumentParagraphRuns (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents collection of runs in the paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> GetDocumentParagraphRunsWithHttpInfo (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of paragraphs that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse GetDocumentParagraphs (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of paragraphs that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> GetDocumentParagraphsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document properties info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        AsposeWordsCloudDTODocumentPropertiesResponse GetDocumentProperties (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document properties info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse> GetDocumentPropertiesWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document property info by the property name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        AsposeWordsCloudDTODocumentPropertyResponse GetDocumentProperty (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document property info by the property name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> GetDocumentPropertyWithHttpInfo (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document protection common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        AsposeWordsCloudDTOProtectionDataResponse GetDocumentProtection (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document protection common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> GetDocumentProtectionWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOStatDataResponse</returns>
        AsposeWordsCloudDTOStatDataResponse GetDocumentStatistics (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOStatDataResponse</returns>
        ApiResponse<AsposeWordsCloudDTOStatDataResponse> GetDocumentStatisticsWithHttpInfo (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOTextItemsResponse</returns>
        AsposeWordsCloudDTOTextItemsResponse GetDocumentTextItems (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOTextItemsResponse</returns>
        ApiResponse<AsposeWordsCloudDTOTextItemsResponse> GetDocumentTextItemsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Export the document into the specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentWithFormat (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Export the document into the specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentWithFormatWithHttpInfo (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Get field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFieldsFieldResponse GetField (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> GetFieldWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse GetFields (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> GetFieldsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read footnote by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse GetFootnote (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read footnote by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> GetFootnoteWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get footnotes from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse GetFootnotes (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get footnotes from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> GetFootnotesWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Returns representation of an one of the form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse GetFormField (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Returns representation of an one of the form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> GetFormFieldWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get form fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse GetFormFields (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get form fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> GetFormFieldsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse GetHeaderFooter (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooterWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse GetHeaderFooter_0 (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooter_0WithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of header/footers that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse GetHeaderFooters (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of header/footers that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> GetHeaderFootersWithHttpInfo (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read OfficeMath object by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse GetOfficeMathObject (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read OfficeMath object by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> GetOfficeMathObjectWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get OfficeMath objects from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse GetOfficeMathObjects (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get OfficeMath objects from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> GetOfficeMathObjectsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get document section by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        AsposeWordsCloudDTODocumentElementsSectionsSectionResponse GetSection (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get document section by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> GetSectionWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse GetSectionPageSetup (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> GetSectionPageSetupWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of sections that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse GetSections (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of sections that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> GetSectionsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableResponse GetTable (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> GetTableWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableCellResponse GetTableCell (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> GetTableCellWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse GetTableCellFormat (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> GetTableCellFormatWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse GetTableProperties (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> GetTablePropertiesWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableRowResponse GetTableRow (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> GetTableRowWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse GetTableRowFormat (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> GetTableRowFormatWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of tables that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse GetTables (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of tables that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> GetTablesWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds table to document, returns added table&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableResponse InsertTable (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table to document, returns added table&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> InsertTableWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableCellResponse InsertTableCell (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> InsertTableCellWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds table row to table, returns added row&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableRowResponse InsertTableRow (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> InsertTableRowWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Append documents to original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostAppendDocument (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Append documents to original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostAppendDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Change document protection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        AsposeWordsCloudDTOProtectionDataResponse PostChangeDocumentProtection (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Change document protection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> PostChangeDocumentProtectionWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommentsCommentResponse PostComment (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PostCommentWithHttpInfo (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Compare document with original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostCompareDocument (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Compare document with original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostCompareDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Execute document mail merge operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostDocumentExecuteMailMerge (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Execute document mail merge operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostDocumentExecuteMailMergeWithHttpInfo (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates font properties, returns updated font data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        AsposeWordsCloudDTODocumentElementsFontElementFontResponse PostDocumentParagraphRunFont (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates font properties, returns updated font data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> PostDocumentParagraphRunFontWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        AsposeWordsCloudDTOSaveResponse PostDocumentSaveAs (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        ApiResponse<AsposeWordsCloudDTOSaveResponse> PostDocumentSaveAsWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse PostDrawingObject (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PostDrawingObjectWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Populate document template with data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostExecuteTemplate (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Populate document template with data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostExecuteTemplateWithHttpInfo (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFieldsFieldResponse PostField (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PostFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse PostFootnote (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PostFootnoteWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates properties of form field, returns updated form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse PostFormField (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates properties of form field, returns updated form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PostFormFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document watermark image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostInsertDocumentWatermarkImage (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document watermark image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkImageWithHttpInfo (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document watermark text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostInsertDocumentWatermarkText (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document watermark text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkTextWithHttpInfo (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document page numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostInsertPageNumbers (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document page numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostInsertPageNumbersWithHttpInfo (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Loads new document from web into the file with any supported format of data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        AsposeWordsCloudDTOSaveResponse PostLoadWebDocument (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null);

        /// <summary>
        /// Loads new document from web into the file with any supported format of data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        ApiResponse<AsposeWordsCloudDTOSaveResponse> PostLoadWebDocumentWithHttpInfo (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null);
        /// <summary>
        /// Replace document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        AsposeWordsCloudDTOReplaceReplaceTextResponse PostReplaceText (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Replace document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse> PostReplaceTextWithHttpInfo (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        AsposeWordsCloudDTODocumentElementsRunsRunResponse PostRun (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PostRunWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Run tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Object</returns>
        Object PostRunTask (string version);

        /// <summary>
        /// Run tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> PostRunTaskWithHttpInfo (string version);
        /// <summary>
        /// Split document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSplitDocumentResponse</returns>
        AsposeWordsCloudDTOSplitDocumentResponse PostSplitDocument (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Split document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSplitDocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse> PostSplitDocumentWithHttpInfo (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Update document bookmark.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse PostUpdateDocumentBookmark (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Update document bookmark.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> PostUpdateDocumentBookmarkWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Update (reevaluate) fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PostUpdateDocumentFields (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Update (reevaluate) fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PostUpdateDocumentFieldsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommentsCommentResponse PutComment (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PutCommentWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PutConvertDocument (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null);

        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PutConvertDocumentWithHttpInfo (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null);
        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        AsposeWordsCloudDTODocumentResponse PutCreateDocument (string version, string fileName = null, string folder = null, string storage = null);

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentResponse> PutCreateDocumentWithHttpInfo (string version, string fileName = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>AsposeWordsCloudDTOFieldNamesResponse</returns>
        AsposeWordsCloudDTOFieldNamesResponse PutDocumentFieldNames (string version, System.IO.Stream template, bool? useNonMergeFields = null);

        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOFieldNamesResponse</returns>
        ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> PutDocumentFieldNamesWithHttpInfo (string version, System.IO.Stream template, bool? useNonMergeFields = null);
        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        AsposeWordsCloudDTOSaveResponse PutDocumentSaveAsTiff (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        ApiResponse<AsposeWordsCloudDTOSaveResponse> PutDocumentSaveAsTiffWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse PutDrawingObject (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PutDrawingObjectWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Execute document mail merge online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PutExecuteMailMergeOnline (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null);

        /// <summary>
        /// Execute document mail merge online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PutExecuteMailMergeOnlineWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null);
        /// <summary>
        /// Populate document template with data online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PutExecuteTemplateOnline (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null);

        /// <summary>
        /// Populate document template with data online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PutExecuteTemplateOnlineWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null);
        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFieldsFieldResponse PutField (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PutFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse PutFootnote (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PutFootnoteWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse PutFormField (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PutFormFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert to document header or footer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse PutHeaderFooter (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert to document header or footer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> PutHeaderFooterWithHttpInfo (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse PutParagraph (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> PutParagraphWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        AsposeWordsCloudDTOProtectionDataResponse PutProtectDocument (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> PutProtectDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        AsposeWordsCloudDTODocumentElementsRunsRunResponse PutRun (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PutRunWithHttpInfo (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        AsposeWordsCloudDTODocumentPropertyResponse PutUpdateDocumentProperty (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentPropertyWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        AsposeWordsCloudDTODocumentPropertyResponse PutUpdateDocumentProperty_0 (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentProperty_0WithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Reject all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTORevisionsModificationResponse</returns>
        AsposeWordsCloudDTORevisionsModificationResponse RejectAllRevisions (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Reject all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> RejectAllRevisionsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Renders drawing object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RenderDrawingObject (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders drawing object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RenderDrawingObjectWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders math object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RenderMathObject (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders math object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RenderMathObjectWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders page to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RenderPage (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders page to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RenderPageWithHttpInfo (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders paragraph to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RenderParagraph (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders paragraph to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RenderParagraphWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders table to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RenderTable (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders table to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RenderTableWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Resets font&#39;s cache.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        AsposeWordsCloudDTOCommonSaaSposeResponse ResetCache (string version);

        /// <summary>
        /// Resets font&#39;s cache.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> ResetCacheWithHttpInfo (string version);
        /// <summary>
        /// Search text in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSearchSearchResponse</returns>
        AsposeWordsCloudDTOSearchSearchResponse Search (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Search text in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSearchSearchResponse</returns>
        ApiResponse<AsposeWordsCloudDTOSearchSearchResponse> SearchWithHttpInfo (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates border properties.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        AsposeWordsCloudDTODocumentElementsCommonBorderResponse UpdateBorder (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates border properties.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> UpdateBorderWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Update page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse UpdateSectionPageSetup (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Update page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> UpdateSectionPageSetupWithHttpInfo (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse UpdateTableCellFormat (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> UpdateTableCellFormatWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse UpdateTableProperties (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> UpdateTablePropertiesWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse UpdateTableRowFormat (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> UpdateTableRowFormatWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTORevisionsModificationResponse> AcceptAllRevisionsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Accept all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTORevisionsModificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>> AcceptAllRevisionsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Resets border properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> DeleteBorderAsync (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Resets border properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> DeleteBorderAsyncWithHttpInfo (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Resets borders properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> DeleteBordersAsync (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Resets borders properties to default values.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBordersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>> DeleteBordersAsyncWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteCommentAsync (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove macros from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentMacrosAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove macros from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDocumentMacrosAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentPropertyAsync (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete watermark (for deleting last watermark from the document).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> DeleteDocumentWatermarkAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> DeleteDocumentWatermarkAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes drawing object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDrawingObjectAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes drawing object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDrawingObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove fields from section paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldsAsync (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove fields from section paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes footnote from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFootnoteAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes footnote from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFootnoteAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes form field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFormFieldAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes form field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFormFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete header/footer from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeaderFooterAsync (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete header/footer from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteHeaderFooterAsyncWithHttpInfo (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete document headers and footers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeadersFootersAsync (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete document headers and footers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteHeadersFootersAsyncWithHttpInfo (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes OfficeMath object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteOfficeMathObjectAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes OfficeMath object from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteOfficeMathObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Remove paragraph from section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteParagraphAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Remove paragraph from section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteParagraphAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Removes run from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteRunAsync (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Removes run from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteRunAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableCellAsync (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableCellAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Delete a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableRowAsync (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Delete a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableRowAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> DeleteUnprotectDocumentAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Unprotect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> DeleteUnprotectDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a border.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> GetBorderAsync (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a border.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> GetBorderAsyncWithHttpInfo (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a collection of borders.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> GetBordersAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a collection of borders.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBordersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>> GetBordersAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> GetCommentAsync (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get comment from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> GetCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get comments from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> GetCommentsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get comments from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse>> GetCommentsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> GetDocumentAsync (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> GetDocumentAsyncWithHttpInfo (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document bookmark data by its name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> GetDocumentBookmarkByNameAsync (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document bookmark data by its name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>> GetDocumentBookmarkByNameAsyncWithHttpInfo (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document bookmarks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> GetDocumentBookmarksAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document bookmarks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse>> GetDocumentBookmarksAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> GetDocumentDrawingObjectByIndexAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> GetDocumentDrawingObjectByIndexAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read drawing object image data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentDrawingObjectImageDataAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read drawing object image data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentDrawingObjectImageDataAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get drawing object OLE data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentDrawingObjectOleDataAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get drawing object OLE data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentDrawingObjectOleDataAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document drawing objects common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> GetDocumentDrawingObjectsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document drawing objects common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse>> GetDocumentDrawingObjectsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOFieldNamesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOFieldNamesResponse> GetDocumentFieldNamesAsync (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOFieldNamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>> GetDocumentFieldNamesAsyncWithHttpInfo (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document hyperlink by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> GetDocumentHyperlinkByIndexAsync (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document hyperlink by its index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse>> GetDocumentHyperlinkByIndexAsyncWithHttpInfo (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document hyperlinks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> GetDocumentHyperlinksAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document hyperlinks common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse>> GetDocumentHyperlinksAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents one of the paragraphs contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> GetDocumentParagraphAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>> GetDocumentParagraphAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents run of text contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> GetDocumentParagraphRunAsync (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents run of text contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> GetDocumentParagraphRunAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents font of run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> GetDocumentParagraphRunFontAsync (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents font of run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFontElementFontResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>> GetDocumentParagraphRunFontAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// This resource represents collection of runs in the paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> GetDocumentParagraphRunsAsync (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// This resource represents collection of runs in the paragraph.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse>> GetDocumentParagraphRunsAsyncWithHttpInfo (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of paragraphs that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> GetDocumentParagraphsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of paragraphs that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse>> GetDocumentParagraphsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document properties info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertiesResponse> GetDocumentPropertiesAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document properties info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document property info by the property name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> GetDocumentPropertyAsync (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document property info by the property name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document protection common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> GetDocumentProtectionAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document protection common info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> GetDocumentProtectionAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOStatDataResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOStatDataResponse> GetDocumentStatisticsAsync (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOStatDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOStatDataResponse>> GetDocumentStatisticsAsyncWithHttpInfo (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOTextItemsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOTextItemsResponse> GetDocumentTextItemsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read document text items.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOTextItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOTextItemsResponse>> GetDocumentTextItemsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Export the document into the specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentWithFormatAsync (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Export the document into the specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentWithFormatAsyncWithHttpInfo (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Get field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> GetFieldAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get field from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> GetFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> GetFieldsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse>> GetFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read footnote by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> GetFootnoteAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read footnote by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> GetFootnoteAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get footnotes from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> GetFootnotesAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get footnotes from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse>> GetFootnotesAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Returns representation of an one of the form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> GetFormFieldAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Returns representation of an one of the form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> GetFormFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get form fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> GetFormFieldsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get form fields from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse>> GetFormFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooterAsync (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> GetHeaderFooterAsyncWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooter_0Async (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a header/footer that is contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> GetHeaderFooter_0AsyncWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of header/footers that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> GetHeaderFootersAsync (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of header/footers that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse>> GetHeaderFootersAsyncWithHttpInfo (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Read OfficeMath object by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> GetOfficeMathObjectAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Read OfficeMath object by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse>> GetOfficeMathObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get OfficeMath objects from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> GetOfficeMathObjectsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get OfficeMath objects from document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse>> GetOfficeMathObjectsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get document section by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> GetSectionAsync (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get document section by index.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse>> GetSectionAsyncWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Get page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> GetSectionPageSetupAsync (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Get page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>> GetSectionPageSetupAsyncWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of sections that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> GetSectionsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of sections that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse>> GetSectionsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableResponse> GetTableAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>> GetTableAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> GetTableCellAsync (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table cell.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>> GetTableCellAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> GetTableCellFormatAsync (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>> GetTableCellFormatAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> GetTablePropertiesAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>> GetTablePropertiesAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> GetTableRowAsync (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table row.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>> GetTableRowAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> GetTableRowFormatAsync (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>> GetTableRowFormatAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Return a list of tables that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> GetTablesAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Return a list of tables that are contained in the document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse>> GetTablesAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds table to document, returns added table&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableResponse> InsertTableAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table to document, returns added table&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>> InsertTableAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> InsertTableCellAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>> InsertTableCellAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds table row to table, returns added row&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> InsertTableRowAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>> InsertTableRowAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Append documents to original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostAppendDocumentAsync (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Append documents to original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Change document protection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> PostChangeDocumentProtectionAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Change document protection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> PostChangeDocumentProtectionAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PostCommentAsync (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> PostCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Compare document with original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostCompareDocumentAsync (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Compare document with original document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostCompareDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Execute document mail merge operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostDocumentExecuteMailMergeAsync (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Execute document mail merge operation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostDocumentExecuteMailMergeAsyncWithHttpInfo (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates font properties, returns updated font data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> PostDocumentParagraphRunFontAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates font properties, returns updated font data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFontElementFontResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>> PostDocumentParagraphRunFontAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PostDocumentSaveAsAsync (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PostDocumentSaveAsAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PostDrawingObjectAsync (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> PostDrawingObjectAsyncWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Populate document template with data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostExecuteTemplateAsync (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Populate document template with data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostExecuteTemplateAsyncWithHttpInfo (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PostFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> PostFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PostFootnoteAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> PostFootnoteAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates properties of form field, returns updated form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PostFormFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates properties of form field, returns updated form field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> PostFormFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document watermark image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkImageAsync (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document watermark image.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertDocumentWatermarkImageAsyncWithHttpInfo (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document watermark text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkTextAsync (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document watermark text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertDocumentWatermarkTextAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert document page numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertPageNumbersAsync (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert document page numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertPageNumbersAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Loads new document from web into the file with any supported format of data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PostLoadWebDocumentAsync (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null);

        /// <summary>
        /// Loads new document from web into the file with any supported format of data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PostLoadWebDocumentAsyncWithHttpInfo (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null);
        /// <summary>
        /// Replace document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOReplaceReplaceTextResponse> PostReplaceTextAsync (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Replace document text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOReplaceReplaceTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse>> PostReplaceTextAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PostRunAsync (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> PostRunAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Run tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> PostRunTaskAsync (string version);

        /// <summary>
        /// Run tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostRunTaskAsyncWithHttpInfo (string version);
        /// <summary>
        /// Split document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSplitDocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOSplitDocumentResponse> PostSplitDocumentAsync (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Split document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSplitDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse>> PostSplitDocumentAsyncWithHttpInfo (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Update document bookmark.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> PostUpdateDocumentBookmarkAsync (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Update document bookmark.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>> PostUpdateDocumentBookmarkAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Update (reevaluate) fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostUpdateDocumentFieldsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Update (reevaluate) fields in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostUpdateDocumentFieldsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PutCommentAsync (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> PutCommentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PutConvertDocumentAsync (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null);

        /// <summary>
        /// Convert document from request content to format specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutConvertDocumentAsyncWithHttpInfo (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null);
        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PutCreateDocumentAsync (string version, string fileName = null, string folder = null, string storage = null);

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string version, string fileName = null, string folder = null, string storage = null);
        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOFieldNamesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOFieldNamesResponse> PutDocumentFieldNamesAsync (string version, System.IO.Stream template, bool? useNonMergeFields = null);

        /// <summary>
        /// Read document field names.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOFieldNamesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>> PutDocumentFieldNamesAsyncWithHttpInfo (string version, System.IO.Stream template, bool? useNonMergeFields = null);
        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PutDocumentSaveAsTiffAsync (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PutDocumentSaveAsTiffAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PutDrawingObjectAsync (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> PutDrawingObjectAsyncWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Execute document mail merge online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PutExecuteMailMergeOnlineAsync (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null);

        /// <summary>
        /// Execute document mail merge online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutExecuteMailMergeOnlineAsyncWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null);
        /// <summary>
        /// Populate document template with data online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PutExecuteTemplateOnlineAsync (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null);

        /// <summary>
        /// Populate document template with data online.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutExecuteTemplateOnlineAsyncWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null);
        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PutFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> PutFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PutFootnoteAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> PutFootnoteAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PutFormFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> PutFormFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Insert to document header or footer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> PutHeaderFooterAsync (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Insert to document header or footer.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> PutHeaderFooterAsyncWithHttpInfo (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> PutParagraphAsync (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>> PutParagraphAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> PutProtectDocumentAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Protect document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> PutProtectDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PutRunAsync (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> PutRunAsyncWithHttpInfo (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentPropertyAsync (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> PutUpdateDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentProperty_0Async (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Add new or update existing document property.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> PutUpdateDocumentProperty_0AsyncWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Reject all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTORevisionsModificationResponse> RejectAllRevisionsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Reject all revisions in document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTORevisionsModificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>> RejectAllRevisionsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Renders drawing object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RenderDrawingObjectAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders drawing object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderDrawingObjectAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders math object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RenderMathObjectAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders math object to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderMathObjectAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders page to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RenderPageAsync (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders page to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderPageAsyncWithHttpInfo (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders paragraph to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RenderParagraphAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders paragraph to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderParagraphAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Renders table to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RenderTableAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);

        /// <summary>
        /// Renders table to specified format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderTableAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null);
        /// <summary>
        /// Resets font&#39;s cache.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> ResetCacheAsync (string version);

        /// <summary>
        /// Resets font&#39;s cache.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> ResetCacheAsyncWithHttpInfo (string version);
        /// <summary>
        /// Search text in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSearchSearchResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTOSearchSearchResponse> SearchAsync (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);

        /// <summary>
        /// Search text in document.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSearchSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSearchSearchResponse>> SearchAsyncWithHttpInfo (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null);
        /// <summary>
        /// Updates border properties.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> UpdateBorderAsync (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates border properties.
        /// </summary>
        /// <remarks>
        /// &#39;nodePath&#39; should refer to node with cell or row
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> UpdateBorderAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Update page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> UpdateSectionPageSetupAsync (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Update page setup of section.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>> UpdateSectionPageSetupAsyncWithHttpInfo (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> UpdateTableCellFormatAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table cell format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>> UpdateTableCellFormatAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> UpdateTablePropertiesAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>> UpdateTablePropertiesAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        /// <summary>
        /// Updates a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> UpdateTableRowFormatAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);

        /// <summary>
        /// Updates a table row format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>> UpdateTableRowFormatAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WordsApi : IWordsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WordsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WordsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public AsposeWordsCloudDTORevisionsModificationResponse AcceptAllRevisions (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> localVarResponse = AcceptAllRevisionsWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public ApiResponse< AsposeWordsCloudDTORevisionsModificationResponse > AcceptAllRevisionsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->AcceptAllRevisions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->AcceptAllRevisions");

            var localVarPath = "/v{version}/words/{name}/revisions/acceptAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptAllRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTORevisionsModificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTORevisionsModificationResponse)));
        }

        /// <summary>
        /// Accept all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTORevisionsModificationResponse> AcceptAllRevisionsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> localVarResponse = await AcceptAllRevisionsAsyncWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTORevisionsModificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>> AcceptAllRevisionsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->AcceptAllRevisions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->AcceptAllRevisions");

            var localVarPath = "/v{version}/words/{name}/revisions/acceptAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptAllRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTORevisionsModificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTORevisionsModificationResponse)));
        }

        /// <summary>
        /// Resets border properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommonBorderResponse DeleteBorder (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = DeleteBorderWithHttpInfo(version, name, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resets border properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommonBorderResponse > DeleteBorderWithHttpInfo (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Resets border properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> DeleteBorderAsync (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = await DeleteBorderAsyncWithHttpInfo(version, name, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resets border properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> DeleteBorderAsyncWithHttpInfo (string version, string name, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Resets borders properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommonBordersResponse DeleteBorders (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> localVarResponse = DeleteBordersWithHttpInfo(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resets borders properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommonBordersResponse > DeleteBordersWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteBorders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteBorders");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteBorders");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBordersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBordersResponse)));
        }

        /// <summary>
        /// Resets borders properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> DeleteBordersAsync (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> localVarResponse = await DeleteBordersAsyncWithHttpInfo(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resets borders properties to default values. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBordersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>> DeleteBordersAsyncWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteBorders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteBorders");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteBorders");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBordersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBordersResponse)));
        }

        /// <summary>
        /// Remove comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteComment (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteCommentWithHttpInfo(version, name, commentIndex, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteCommentWithHttpInfo (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->DeleteComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteCommentAsync (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteCommentAsyncWithHttpInfo(version, name, commentIndex, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->DeleteComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove macros from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDocumentMacros (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteDocumentMacrosWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove macros from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteDocumentMacrosWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentMacros");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentMacros");

            var localVarPath = "/v{version}/words/{name}/macros";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentMacros", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove macros from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentMacrosAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteDocumentMacrosAsyncWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove macros from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDocumentMacrosAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentMacros");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentMacros");

            var localVarPath = "/v{version}/words/{name}/macros";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentMacros", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDocumentProperty (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteDocumentPropertyWithHttpInfo(version, name, propertyName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteDocumentPropertyWithHttpInfo (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->DeleteDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDocumentPropertyAsync (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteDocumentPropertyAsyncWithHttpInfo(version, name, propertyName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->DeleteDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse DeleteDocumentWatermark (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = DeleteDocumentWatermarkWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > DeleteDocumentWatermarkWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentWatermark");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentWatermark");

            var localVarPath = "/v{version}/words/{name}/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> DeleteDocumentWatermarkAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await DeleteDocumentWatermarkAsyncWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete watermark (for deleting last watermark from the document). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> DeleteDocumentWatermarkAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDocumentWatermark");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDocumentWatermark");

            var localVarPath = "/v{version}/words/{name}/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocumentWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Removes drawing object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteDrawingObject (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteDrawingObjectWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes drawing object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteDrawingObjectWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes drawing object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteDrawingObjectAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteDrawingObjectAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes drawing object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteDrawingObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteField (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteFieldWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteFieldWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteFieldAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove fields from section paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFields (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteFieldsWithHttpInfo(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove fields from section paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteFieldsWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove fields from section paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFieldsAsync (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteFieldsAsyncWithHttpInfo(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove fields from section paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes footnote from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFootnote (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteFootnoteWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes footnote from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteFootnoteWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes footnote from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFootnoteAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteFootnoteAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes footnote from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFootnoteAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes form field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteFormField (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteFormFieldWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes form field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteFormFieldWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes form field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteFormFieldAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteFormFieldAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes form field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteFormFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete header/footer from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteHeaderFooter (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteHeaderFooterWithHttpInfo(version, name, index, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete header/footer from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteHeaderFooterWithHttpInfo (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->DeleteHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete header/footer from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeaderFooterAsync (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteHeaderFooterAsyncWithHttpInfo(version, name, index, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete header/footer from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteHeaderFooterAsyncWithHttpInfo (string version, string name, int? index, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteHeaderFooter");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->DeleteHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete document headers and footers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteHeadersFooters (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteHeadersFootersWithHttpInfo(version, name, sectionPath, headersFootersTypes, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete document headers and footers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteHeadersFootersWithHttpInfo (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteHeadersFooters");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteHeadersFooters");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->DeleteHeadersFooters");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (headersFootersTypes != null) localVarQueryParams.Add("headersFootersTypes", Configuration.ApiClient.ParameterToString(headersFootersTypes)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeadersFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete document headers and footers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteHeadersFootersAsync (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteHeadersFootersAsyncWithHttpInfo(version, name, sectionPath, headersFootersTypes, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete document headers and footers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="headersFootersTypes">List of types of headers and footers. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteHeadersFootersAsyncWithHttpInfo (string version, string name, string sectionPath, string headersFootersTypes = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteHeadersFooters");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteHeadersFooters");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->DeleteHeadersFooters");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (headersFootersTypes != null) localVarQueryParams.Add("headersFootersTypes", Configuration.ApiClient.ParameterToString(headersFootersTypes)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteHeadersFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes OfficeMath object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteOfficeMathObject (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteOfficeMathObjectWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes OfficeMath object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteOfficeMathObjectWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteOfficeMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOfficeMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes OfficeMath object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteOfficeMathObjectAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteOfficeMathObjectAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes OfficeMath object from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteOfficeMathObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteOfficeMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteOfficeMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOfficeMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove paragraph from section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteParagraph (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteParagraphWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove paragraph from section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteParagraphWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Remove paragraph from section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteParagraphAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteParagraphAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove paragraph from section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteParagraphAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes run from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteRun (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteRunWithHttpInfo(version, name, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes run from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteRunWithHttpInfo (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->DeleteRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Removes run from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteRunAsync (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteRunAsyncWithHttpInfo(version, name, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes run from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteRunAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->DeleteRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTable (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteTableWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteTableWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableAsync (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteTableAsyncWithHttpInfo(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->DeleteTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTableCell (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteTableCellWithHttpInfo(version, name, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteTableCellWithHttpInfo (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableCellAsync (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteTableCellAsyncWithHttpInfo(version, name, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableCellAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->DeleteTableCell");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse DeleteTableRow (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = DeleteTableRowWithHttpInfo(version, name, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > DeleteTableRowWithHttpInfo (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Delete a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> DeleteTableRowAsync (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await DeleteTableRowAsyncWithHttpInfo(version, name, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> DeleteTableRowAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->DeleteTableRow");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->DeleteTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        public AsposeWordsCloudDTOProtectionDataResponse DeleteUnprotectDocument (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = DeleteUnprotectDocumentWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOProtectionDataResponse > DeleteUnprotectDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteUnprotectDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteUnprotectDocument");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->DeleteUnprotectDocument");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> DeleteUnprotectDocumentAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = await DeleteUnprotectDocumentAsyncWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unprotect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> DeleteUnprotectDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->DeleteUnprotectDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->DeleteUnprotectDocument");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->DeleteUnprotectDocument");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUnprotectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Return a border. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommonBorderResponse GetBorder (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = GetBorderWithHttpInfo(version, name, nodePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a border. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommonBorderResponse > GetBorderWithHttpInfo (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Return a border. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> GetBorderAsync (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = await GetBorderAsyncWithHttpInfo(version, name, nodePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a border. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> GetBorderAsyncWithHttpInfo (string version, string name, string nodePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Return a collection of borders. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommonBordersResponse GetBorders (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> localVarResponse = GetBordersWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a collection of borders. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommonBordersResponse > GetBordersWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetBorders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetBorders");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetBorders");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBordersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBordersResponse)));
        }

        /// <summary>
        /// Return a collection of borders. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBordersResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> GetBordersAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> localVarResponse = await GetBordersAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a collection of borders. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node with borders(node should be cell or row).</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBordersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>> GetBordersAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetBorders");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetBorders");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetBorders");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBorders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBordersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBordersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBordersResponse)));
        }

        /// <summary>
        /// Get comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommentsCommentResponse GetComment (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = GetCommentWithHttpInfo(version, name, commentIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommentsCommentResponse > GetCommentWithHttpInfo (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->GetComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Get comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> GetCommentAsync (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = await GetCommentAsyncWithHttpInfo(version, name, commentIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get comment from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> GetCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->GetComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Get comments from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse GetComments (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> localVarResponse = GetCommentsWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get comments from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse > GetCommentsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetComments");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetComments");

            var localVarPath = "/v{version}/words/{name}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse)));
        }

        /// <summary>
        /// Get comments from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> GetCommentsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> localVarResponse = await GetCommentsAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get comments from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse>> GetCommentsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetComments");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetComments");

            var localVarPath = "/v{version}/words/{name}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse)));
        }

        /// <summary>
        /// Read document common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse GetDocument (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = GetDocumentWithHttpInfo(version, documentName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > GetDocumentWithHttpInfo (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocument");
            // verify the required parameter 'documentName' is set
            if (documentName == null)
                throw new ApiException(400, "Missing required parameter 'documentName' when calling WordsApi->GetDocument");

            var localVarPath = "/v{version}/words/{documentName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (documentName != null) localVarPathParams.Add("documentName", Configuration.ApiClient.ParameterToString(documentName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Read document common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> GetDocumentAsync (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await GetDocumentAsyncWithHttpInfo(version, documentName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="documentName">The file name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> GetDocumentAsyncWithHttpInfo (string version, string documentName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocument");
            // verify the required parameter 'documentName' is set
            if (documentName == null)
                throw new ApiException(400, "Missing required parameter 'documentName' when calling WordsApi->GetDocument");

            var localVarPath = "/v{version}/words/{documentName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (documentName != null) localVarPathParams.Add("documentName", Configuration.ApiClient.ParameterToString(documentName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Read document bookmark data by its name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse GetDocumentBookmarkByName (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> localVarResponse = GetDocumentBookmarkByNameWithHttpInfo(version, name, bookmarkName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document bookmark data by its name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse > GetDocumentBookmarkByNameWithHttpInfo (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentBookmarkByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentBookmarkByName");
            // verify the required parameter 'bookmarkName' is set
            if (bookmarkName == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkName' when calling WordsApi->GetDocumentBookmarkByName");

            var localVarPath = "/v{version}/words/{name}/bookmarks/{bookmarkName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkName != null) localVarPathParams.Add("bookmarkName", Configuration.ApiClient.ParameterToString(bookmarkName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarkByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)));
        }

        /// <summary>
        /// Read document bookmark data by its name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> GetDocumentBookmarkByNameAsync (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> localVarResponse = await GetDocumentBookmarkByNameAsyncWithHttpInfo(version, name, bookmarkName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document bookmark data by its name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>> GetDocumentBookmarkByNameAsyncWithHttpInfo (string version, string name, string bookmarkName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentBookmarkByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentBookmarkByName");
            // verify the required parameter 'bookmarkName' is set
            if (bookmarkName == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkName' when calling WordsApi->GetDocumentBookmarkByName");

            var localVarPath = "/v{version}/words/{name}/bookmarks/{bookmarkName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkName != null) localVarPathParams.Add("bookmarkName", Configuration.ApiClient.ParameterToString(bookmarkName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarkByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)));
        }

        /// <summary>
        /// Read document bookmarks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        public AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse GetDocumentBookmarks (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> localVarResponse = GetDocumentBookmarksWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document bookmarks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse > GetDocumentBookmarksWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentBookmarks");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentBookmarks");

            var localVarPath = "/v{version}/words/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse)));
        }

        /// <summary>
        /// Read document bookmarks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> GetDocumentBookmarksAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> localVarResponse = await GetDocumentBookmarksAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document bookmarks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse>> GetDocumentBookmarksAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentBookmarks");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentBookmarks");

            var localVarPath = "/v{version}/words/{name}/bookmarks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentBookmarks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse)));
        }

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse GetDocumentDrawingObjectByIndex (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = GetDocumentDrawingObjectByIndexWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse > GetDocumentDrawingObjectByIndexWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectByIndex");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> GetDocumentDrawingObjectByIndexAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = await GetDocumentDrawingObjectByIndexAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document drawing object common info by its index or convert to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> GetDocumentDrawingObjectByIndexAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectByIndex");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectByIndex");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Read drawing object image data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentDrawingObjectImageData (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentDrawingObjectImageDataWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read drawing object image data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentDrawingObjectImageDataWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectImageData");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/imageData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectImageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read drawing object image data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentDrawingObjectImageDataAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentDrawingObjectImageDataAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read drawing object image data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentDrawingObjectImageDataAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectImageData");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectImageData");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/imageData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectImageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get drawing object OLE data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentDrawingObjectOleData (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentDrawingObjectOleDataWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get drawing object OLE data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentDrawingObjectOleDataWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectOleData");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/oleData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectOleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get drawing object OLE data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentDrawingObjectOleDataAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentDrawingObjectOleDataAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get drawing object OLE data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentDrawingObjectOleDataAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentDrawingObjectOleData");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjectOleData");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/oleData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjectOleData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Read document drawing objects common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse GetDocumentDrawingObjects (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> localVarResponse = GetDocumentDrawingObjectsWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document drawing objects common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse > GetDocumentDrawingObjectsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjects");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjects");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse)));
        }

        /// <summary>
        /// Read document drawing objects common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> GetDocumentDrawingObjectsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> localVarResponse = await GetDocumentDrawingObjectsAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document drawing objects common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse>> GetDocumentDrawingObjectsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentDrawingObjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentDrawingObjects");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentDrawingObjects");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentDrawingObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse)));
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOFieldNamesResponse</returns>
        public AsposeWordsCloudDTOFieldNamesResponse GetDocumentFieldNames (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> localVarResponse = GetDocumentFieldNamesWithHttpInfo(version, name, useNonMergeFields, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOFieldNamesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOFieldNamesResponse > GetDocumentFieldNamesWithHttpInfo (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentFieldNames");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentFieldNames");

            var localVarPath = "/v{version}/words/{name}/mailMergeFieldNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (useNonMergeFields != null) localVarQueryParams.Add("useNonMergeFields", Configuration.ApiClient.ParameterToString(useNonMergeFields)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFieldNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOFieldNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOFieldNamesResponse)));
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOFieldNamesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOFieldNamesResponse> GetDocumentFieldNamesAsync (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> localVarResponse = await GetDocumentFieldNamesAsyncWithHttpInfo(version, name, useNonMergeFields, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="useNonMergeFields">If true, result includes \&quot;mustache\&quot; field names. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOFieldNamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>> GetDocumentFieldNamesAsyncWithHttpInfo (string version, string name, bool? useNonMergeFields = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentFieldNames");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentFieldNames");

            var localVarPath = "/v{version}/words/{name}/mailMergeFieldNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (useNonMergeFields != null) localVarQueryParams.Add("useNonMergeFields", Configuration.ApiClient.ParameterToString(useNonMergeFields)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFieldNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOFieldNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOFieldNamesResponse)));
        }

        /// <summary>
        /// Read document hyperlink by its index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse GetDocumentHyperlinkByIndex (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> localVarResponse = GetDocumentHyperlinkByIndexWithHttpInfo(version, name, hyperlinkIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document hyperlink by its index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse > GetDocumentHyperlinkByIndexWithHttpInfo (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentHyperlinkByIndex");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentHyperlinkByIndex");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling WordsApi->GetDocumentHyperlinkByIndex");

            var localVarPath = "/v{version}/words/{name}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentHyperlinkByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse)));
        }

        /// <summary>
        /// Read document hyperlink by its index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> GetDocumentHyperlinkByIndexAsync (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> localVarResponse = await GetDocumentHyperlinkByIndexAsyncWithHttpInfo(version, name, hyperlinkIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document hyperlink by its index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="hyperlinkIndex">The hyperlink index.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse>> GetDocumentHyperlinkByIndexAsyncWithHttpInfo (string version, string name, int? hyperlinkIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentHyperlinkByIndex");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentHyperlinkByIndex");
            // verify the required parameter 'hyperlinkIndex' is set
            if (hyperlinkIndex == null)
                throw new ApiException(400, "Missing required parameter 'hyperlinkIndex' when calling WordsApi->GetDocumentHyperlinkByIndex");

            var localVarPath = "/v{version}/words/{name}/hyperlinks/{hyperlinkIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (hyperlinkIndex != null) localVarPathParams.Add("hyperlinkIndex", Configuration.ApiClient.ParameterToString(hyperlinkIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentHyperlinkByIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse)));
        }

        /// <summary>
        /// Read document hyperlinks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse GetDocumentHyperlinks (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> localVarResponse = GetDocumentHyperlinksWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document hyperlinks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse > GetDocumentHyperlinksWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentHyperlinks");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentHyperlinks");

            var localVarPath = "/v{version}/words/{name}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse)));
        }

        /// <summary>
        /// Read document hyperlinks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> GetDocumentHyperlinksAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> localVarResponse = await GetDocumentHyperlinksAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document hyperlinks common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse>> GetDocumentHyperlinksAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentHyperlinks");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentHyperlinks");

            var localVarPath = "/v{version}/words/{name}/hyperlinks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentHyperlinks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse)));
        }

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse GetDocumentParagraph (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> localVarResponse = GetDocumentParagraphWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse > GetDocumentParagraphWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)));
        }

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> GetDocumentParagraphAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> localVarResponse = await GetDocumentParagraphAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This resource represents one of the paragraphs contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>> GetDocumentParagraphAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)));
        }

        /// <summary>
        /// This resource represents run of text contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public AsposeWordsCloudDTODocumentElementsRunsRunResponse GetDocumentParagraphRun (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = GetDocumentParagraphRunWithHttpInfo(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This resource represents run of text contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsRunsRunResponse > GetDocumentParagraphRunWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraphRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// This resource represents run of text contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> GetDocumentParagraphRunAsync (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = await GetDocumentParagraphRunAsyncWithHttpInfo(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This resource represents run of text contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> GetDocumentParagraphRunAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraphRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// This resource represents font of run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFontElementFontResponse GetDocumentParagraphRunFont (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> localVarResponse = GetDocumentParagraphRunFontWithHttpInfo(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This resource represents font of run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFontElementFontResponse > GetDocumentParagraphRunFontWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraphRunFont");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}/font";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRunFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFontElementFontResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFontElementFontResponse)));
        }

        /// <summary>
        /// This resource represents font of run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> GetDocumentParagraphRunFontAsync (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> localVarResponse = await GetDocumentParagraphRunFontAsyncWithHttpInfo(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This resource represents font of run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFontElementFontResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>> GetDocumentParagraphRunFontAsyncWithHttpInfo (string version, string name, string paragraphPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRunFont");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetDocumentParagraphRunFont");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}/font";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRunFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFontElementFontResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFontElementFontResponse)));
        }

        /// <summary>
        /// This resource represents collection of runs in the paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsRunsRunsResponse GetDocumentParagraphRuns (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> localVarResponse = GetDocumentParagraphRunsWithHttpInfo(version, name, paragraphPath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This resource represents collection of runs in the paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsRunsRunsResponse > GetDocumentParagraphRunsWithHttpInfo (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRuns");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRuns");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRuns");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunsResponse)));
        }

        /// <summary>
        /// This resource represents collection of runs in the paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> GetDocumentParagraphRunsAsync (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> localVarResponse = await GetDocumentParagraphRunsAsyncWithHttpInfo(version, name, paragraphPath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This resource represents collection of runs in the paragraph. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse>> GetDocumentParagraphRunsAsyncWithHttpInfo (string version, string name, string paragraphPath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphRuns");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphRuns");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->GetDocumentParagraphRuns");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunsResponse)));
        }

        /// <summary>
        /// Return a list of paragraphs that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        public AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse GetDocumentParagraphs (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> localVarResponse = GetDocumentParagraphsWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of paragraphs that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse > GetDocumentParagraphsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphs");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentParagraphs");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse)));
        }

        /// <summary>
        /// Return a list of paragraphs that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> GetDocumentParagraphsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> localVarResponse = await GetDocumentParagraphsAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a list of paragraphs that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse>> GetDocumentParagraphsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentParagraphs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentParagraphs");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetDocumentParagraphs");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentParagraphs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse)));
        }

        /// <summary>
        /// Read document properties info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        public AsposeWordsCloudDTODocumentPropertiesResponse GetDocumentProperties (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse> localVarResponse = GetDocumentPropertiesWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document properties info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentPropertiesResponse > GetDocumentPropertiesWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProperties");

            var localVarPath = "/v{version}/words/{name}/documentProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document properties info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertiesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertiesResponse> GetDocumentPropertiesAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse> localVarResponse = await GetDocumentPropertiesAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document properties info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document&#39;s name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse>> GetDocumentPropertiesAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProperties");

            var localVarPath = "/v{version}/words/{name}/documentProperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertiesResponse)));
        }

        /// <summary>
        /// Read document property info by the property name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public AsposeWordsCloudDTODocumentPropertyResponse GetDocumentProperty (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = GetDocumentPropertyWithHttpInfo(version, name, propertyName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document property info by the property name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentPropertyResponse > GetDocumentPropertyWithHttpInfo (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->GetDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document property info by the property name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> GetDocumentPropertyAsync (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = await GetDocumentPropertyAsyncWithHttpInfo(version, name, propertyName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document property info by the property name. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> GetDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->GetDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Read document protection common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        public AsposeWordsCloudDTOProtectionDataResponse GetDocumentProtection (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = GetDocumentProtectionWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document protection common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOProtectionDataResponse > GetDocumentProtectionWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProtection");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Read document protection common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> GetDocumentProtectionAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = await GetDocumentProtectionAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document protection common info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> GetDocumentProtectionAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentProtection");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Read document statistics. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOStatDataResponse</returns>
        public AsposeWordsCloudDTOStatDataResponse GetDocumentStatistics (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOStatDataResponse> localVarResponse = GetDocumentStatisticsWithHttpInfo(version, name, includeComments, includeFootnotes, includeTextInShapes, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document statistics. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOStatDataResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOStatDataResponse > GetDocumentStatisticsWithHttpInfo (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentStatistics");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentStatistics");

            var localVarPath = "/v{version}/words/{name}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (includeComments != null) localVarQueryParams.Add("includeComments", Configuration.ApiClient.ParameterToString(includeComments)); // query parameter
            if (includeFootnotes != null) localVarQueryParams.Add("includeFootnotes", Configuration.ApiClient.ParameterToString(includeFootnotes)); // query parameter
            if (includeTextInShapes != null) localVarQueryParams.Add("includeTextInShapes", Configuration.ApiClient.ParameterToString(includeTextInShapes)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOStatDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOStatDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOStatDataResponse)));
        }

        /// <summary>
        /// Read document statistics. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOStatDataResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOStatDataResponse> GetDocumentStatisticsAsync (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOStatDataResponse> localVarResponse = await GetDocumentStatisticsAsyncWithHttpInfo(version, name, includeComments, includeFootnotes, includeTextInShapes, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document statistics. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="includeComments">Support including/excluding comments from the WordCount. Default value is \&quot;true\&quot;. (optional)</param>
        /// <param name="includeFootnotes">Support including/excluding footnotes from the WordCount. Default value is \&quot;false\&quot;. (optional)</param>
        /// <param name="includeTextInShapes">Support including/excluding shape&#39;s text from the WordCount. Default value is \&quot;false\&quot; (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOStatDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOStatDataResponse>> GetDocumentStatisticsAsyncWithHttpInfo (string version, string name, bool? includeComments = null, bool? includeFootnotes = null, bool? includeTextInShapes = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentStatistics");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentStatistics");

            var localVarPath = "/v{version}/words/{name}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (includeComments != null) localVarQueryParams.Add("includeComments", Configuration.ApiClient.ParameterToString(includeComments)); // query parameter
            if (includeFootnotes != null) localVarQueryParams.Add("includeFootnotes", Configuration.ApiClient.ParameterToString(includeFootnotes)); // query parameter
            if (includeTextInShapes != null) localVarQueryParams.Add("includeTextInShapes", Configuration.ApiClient.ParameterToString(includeTextInShapes)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOStatDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOStatDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOStatDataResponse)));
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOTextItemsResponse</returns>
        public AsposeWordsCloudDTOTextItemsResponse GetDocumentTextItems (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOTextItemsResponse> localVarResponse = GetDocumentTextItemsWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOTextItemsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOTextItemsResponse > GetDocumentTextItemsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentTextItems");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentTextItems");

            var localVarPath = "/v{version}/words/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOTextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOTextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOTextItemsResponse)));
        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOTextItemsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOTextItemsResponse> GetDocumentTextItemsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOTextItemsResponse> localVarResponse = await GetDocumentTextItemsAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document text items. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOTextItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOTextItemsResponse>> GetDocumentTextItemsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentTextItems");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentTextItems");

            var localVarPath = "/v{version}/words/{name}/textItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTextItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOTextItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOTextItemsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOTextItemsResponse)));
        }

        /// <summary>
        /// Export the document into the specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentWithFormat (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentWithFormatWithHttpInfo(version, name, format, outPath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export the document into the specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > GetDocumentWithFormatWithHttpInfo (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentWithFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentWithFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->GetDocumentWithFormat");

            var localVarPath = "/v{version}/words/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentWithFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Export the document into the specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentWithFormatAsync (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentWithFormatAsyncWithHttpInfo(version, name, format, outPath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export the document into the specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="outPath">Path to save result (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentWithFormatAsyncWithHttpInfo (string version, string name, string format, string outPath = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetDocumentWithFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetDocumentWithFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->GetDocumentWithFormat");

            var localVarPath = "/v{version}/words/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentWithFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFieldsFieldResponse GetField (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = GetFieldWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFieldsFieldResponse > GetFieldWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Get field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> GetFieldAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = await GetFieldAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get field from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> GetFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Get fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse GetFields (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> localVarResponse = GetFieldsWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse > GetFieldsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse)));
        }

        /// <summary>
        /// Get fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> GetFieldsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> localVarResponse = await GetFieldsAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse>> GetFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse)));
        }

        /// <summary>
        /// Read footnote by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse GetFootnote (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = GetFootnoteWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read footnote by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse > GetFootnoteWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Read footnote by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> GetFootnoteAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = await GetFootnoteAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read footnote by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> GetFootnoteAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Get footnotes from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse GetFootnotes (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> localVarResponse = GetFootnotesWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get footnotes from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse > GetFootnotesWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFootnotes");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFootnotes");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFootnotes");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFootnotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse)));
        }

        /// <summary>
        /// Get footnotes from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> GetFootnotesAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> localVarResponse = await GetFootnotesAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get footnotes from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse>> GetFootnotesAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFootnotes");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFootnotes");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFootnotes");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFootnotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse)));
        }

        /// <summary>
        /// Returns representation of an one of the form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse GetFormField (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = GetFormFieldWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns representation of an one of the form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse > GetFormFieldWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Returns representation of an one of the form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> GetFormFieldAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = await GetFormFieldAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns representation of an one of the form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> GetFormFieldAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Get form fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse GetFormFields (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> localVarResponse = GetFormFieldsWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get form fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse > GetFormFieldsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFormFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFormFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFormFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse)));
        }

        /// <summary>
        /// Get form fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> GetFormFieldsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> localVarResponse = await GetFormFieldsAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get form fields from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node containing collection of form fields.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse>> GetFormFieldsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetFormFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetFormFields");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetFormFields");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFormFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse)));
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse GetHeaderFooter (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = GetHeaderFooterWithHttpInfo(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse > GetHeaderFooterWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooter");
            // verify the required parameter 'headerFooterIndex' is set
            if (headerFooterIndex == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterIndex' when calling WordsApi->GetHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/headersfooters/{headerFooterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (headerFooterIndex != null) localVarPathParams.Add("headerFooterIndex", Configuration.ApiClient.ParameterToString(headerFooterIndex)); // path parameter
            if (sectionIndex != null) localVarQueryParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // query parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooterAsync (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = await GetHeaderFooterAsyncWithHttpInfo(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index. (optional)</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> GetHeaderFooterAsyncWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex = null, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooter");
            // verify the required parameter 'headerFooterIndex' is set
            if (headerFooterIndex == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterIndex' when calling WordsApi->GetHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/headersfooters/{headerFooterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (headerFooterIndex != null) localVarPathParams.Add("headerFooterIndex", Configuration.ApiClient.ParameterToString(headerFooterIndex)); // path parameter
            if (sectionIndex != null) localVarQueryParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // query parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse GetHeaderFooter_0 (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = GetHeaderFooter_0WithHttpInfo(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse > GetHeaderFooter_0WithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'headerFooterIndex' is set
            if (headerFooterIndex == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterIndex' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetHeaderFooter_0");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/headersfooters/{headerFooterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (headerFooterIndex != null) localVarPathParams.Add("headerFooterIndex", Configuration.ApiClient.ParameterToString(headerFooterIndex)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooter_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> GetHeaderFooter_0Async (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = await GetHeaderFooter_0AsyncWithHttpInfo(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a header/footer that is contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterIndex">Header/footer index.</param>
        /// <param name="sectionIndex">Section index.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> GetHeaderFooter_0AsyncWithHttpInfo (string version, string name, int? headerFooterIndex, int? sectionIndex, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'headerFooterIndex' is set
            if (headerFooterIndex == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterIndex' when calling WordsApi->GetHeaderFooter_0");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetHeaderFooter_0");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/headersfooters/{headerFooterIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (headerFooterIndex != null) localVarPathParams.Add("headerFooterIndex", Configuration.ApiClient.ParameterToString(headerFooterIndex)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooter_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Return a list of header/footers that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse GetHeaderFooters (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> localVarResponse = GetHeaderFootersWithHttpInfo(version, name, sectionPath, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of header/footers that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse > GetHeaderFootersWithHttpInfo (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooters");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooters");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->GetHeaderFooters");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse)));
        }

        /// <summary>
        /// Return a list of header/footers that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> GetHeaderFootersAsync (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> localVarResponse = await GetHeaderFootersAsyncWithHttpInfo(version, name, sectionPath, filterByType, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a list of header/footers that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="filterByType">List of types of headers and footers. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse>> GetHeaderFootersAsyncWithHttpInfo (string version, string name, string sectionPath, string filterByType = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetHeaderFooters");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetHeaderFooters");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->GetHeaderFooters");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (filterByType != null) localVarQueryParams.Add("filterByType", Configuration.ApiClient.ParameterToString(filterByType)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHeaderFooters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse)));
        }

        /// <summary>
        /// Read OfficeMath object by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        public AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse GetOfficeMathObject (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> localVarResponse = GetOfficeMathObjectWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read OfficeMath object by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse > GetOfficeMathObjectWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetOfficeMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOfficeMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse)));
        }

        /// <summary>
        /// Read OfficeMath object by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> GetOfficeMathObjectAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> localVarResponse = await GetOfficeMathObjectAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read OfficeMath object by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse>> GetOfficeMathObjectAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetOfficeMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetOfficeMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOfficeMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse)));
        }

        /// <summary>
        /// Get OfficeMath objects from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        public AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse GetOfficeMathObjects (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> localVarResponse = GetOfficeMathObjectsWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OfficeMath objects from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse > GetOfficeMathObjectsWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetOfficeMathObjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetOfficeMathObjects");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetOfficeMathObjects");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOfficeMathObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse)));
        }

        /// <summary>
        /// Get OfficeMath objects from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> GetOfficeMathObjectsAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> localVarResponse = await GetOfficeMathObjectsAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OfficeMath objects from document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="nodePath">Path to node, which contains collection of OfficeMath objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse>> GetOfficeMathObjectsAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetOfficeMathObjects");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetOfficeMathObjects");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetOfficeMathObjects");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOfficeMathObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse)));
        }

        /// <summary>
        /// Get document section by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        public AsposeWordsCloudDTODocumentElementsSectionsSectionResponse GetSection (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> localVarResponse = GetSectionWithHttpInfo(version, name, sectionIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document section by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsSectionsSectionResponse > GetSectionWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSection");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetSection");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionResponse)));
        }

        /// <summary>
        /// Get document section by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> GetSectionAsync (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> localVarResponse = await GetSectionAsyncWithHttpInfo(version, name, sectionIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document section by index. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse>> GetSectionAsyncWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSection");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetSection");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionResponse)));
        }

        /// <summary>
        /// Get page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse GetSectionPageSetup (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> localVarResponse = GetSectionPageSetupWithHttpInfo(version, name, sectionIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse > GetSectionPageSetupWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSectionPageSetup");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSectionPageSetup");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetSectionPageSetup");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/pageSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)));
        }

        /// <summary>
        /// Get page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> GetSectionPageSetupAsync (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> localVarResponse = await GetSectionPageSetupAsyncWithHttpInfo(version, name, sectionIndex, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>> GetSectionPageSetupAsyncWithHttpInfo (string version, string name, int? sectionIndex, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSectionPageSetup");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSectionPageSetup");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->GetSectionPageSetup");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/pageSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSectionPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)));
        }

        /// <summary>
        /// Return a list of sections that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        public AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse GetSections (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> localVarResponse = GetSectionsWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of sections that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse > GetSectionsWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSections");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSections");

            var localVarPath = "/v{version}/words/{name}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse)));
        }

        /// <summary>
        /// Return a list of sections that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> GetSectionsAsync (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> localVarResponse = await GetSectionsAsyncWithHttpInfo(version, name, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a list of sections that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse>> GetSectionsAsyncWithHttpInfo (string version, string name, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetSections");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetSections");

            var localVarPath = "/v{version}/words/{name}/sections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse)));
        }

        /// <summary>
        /// Return a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableResponse GetTable (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> localVarResponse = GetTableWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableResponse > GetTableWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableResponse)));
        }

        /// <summary>
        /// Return a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableResponse> GetTableAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> localVarResponse = await GetTableAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>> GetTableAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableResponse)));
        }

        /// <summary>
        /// Return a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableCellResponse GetTableCell (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> localVarResponse = GetTableCellWithHttpInfo(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableCellResponse > GetTableCellWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->GetTableCell");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)));
        }

        /// <summary>
        /// Return a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> GetTableCellAsync (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> localVarResponse = await GetTableCellAsyncWithHttpInfo(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table cell. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>> GetTableCellAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->GetTableCell");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)));
        }

        /// <summary>
        /// Return a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse GetTableCellFormat (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> localVarResponse = GetTableCellFormatWithHttpInfo(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse > GetTableCellFormatWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableCellFormat");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}/cellformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCellFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)));
        }

        /// <summary>
        /// Return a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> GetTableCellFormatAsync (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> localVarResponse = await GetTableCellFormatAsyncWithHttpInfo(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>> GetTableCellFormatAsyncWithHttpInfo (string version, string name, string tableRowPath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->GetTableCellFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableCellFormat");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}/cellformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCellFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)));
        }

        /// <summary>
        /// Return a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse GetTableProperties (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> localVarResponse = GetTablePropertiesWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse > GetTablePropertiesWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTableProperties");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)));
        }

        /// <summary>
        /// Return a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> GetTablePropertiesAsync (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> localVarResponse = await GetTablePropertiesAsyncWithHttpInfo(version, name, index, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>> GetTablePropertiesAsyncWithHttpInfo (string version, string name, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableProperties");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTableProperties");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)));
        }

        /// <summary>
        /// Return a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableRowResponse GetTableRow (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> localVarResponse = GetTableRowWithHttpInfo(version, name, tablePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableRowResponse > GetTableRowWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->GetTableRow");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)));
        }

        /// <summary>
        /// Return a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> GetTableRowAsync (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> localVarResponse = await GetTableRowAsyncWithHttpInfo(version, name, tablePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table row. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>> GetTableRowAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->GetTableRow");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)));
        }

        /// <summary>
        /// Return a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse GetTableRowFormat (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> localVarResponse = GetTableRowFormatWithHttpInfo(version, name, tablePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse > GetTableRowFormatWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableRowFormat");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}/rowformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRowFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)));
        }

        /// <summary>
        /// Return a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> GetTableRowFormatAsync (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> localVarResponse = await GetTableRowFormatAsyncWithHttpInfo(version, name, tablePath, index, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>> GetTableRowFormatAsyncWithHttpInfo (string version, string name, string tablePath, int? index, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->GetTableRowFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->GetTableRowFormat");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}/rowformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableRowFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)));
        }

        /// <summary>
        /// Return a list of tables that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse GetTables (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> localVarResponse = GetTablesWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of tables that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse > GetTablesWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTables");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTables");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTables");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse)));
        }

        /// <summary>
        /// Return a list of tables that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> GetTablesAsync (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> localVarResponse = await GetTablesAsyncWithHttpInfo(version, name, nodePath, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return a list of tables that are contained in the document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse>> GetTablesAsyncWithHttpInfo (string version, string name, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->GetTables");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->GetTables");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->GetTables");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse)));
        }

        /// <summary>
        /// Adds table to document, returns added table&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableResponse InsertTable (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> localVarResponse = InsertTableWithHttpInfo(version, name, table, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds table to document, returns added table&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableResponse > InsertTableWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTable");
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ApiException(400, "Missing required parameter 'table' when calling WordsApi->InsertTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->InsertTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (table != null && table.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(table); // http body (model) parameter
            }
            else
            {
                localVarPostBody = table; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableResponse)));
        }

        /// <summary>
        /// Adds table to document, returns added table&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableResponse> InsertTableAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse> localVarResponse = await InsertTableAsyncWithHttpInfo(version, name, table, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds table to document, returns added table&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="table">Table parameters/</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>> InsertTableAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTable");
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ApiException(400, "Missing required parameter 'table' when calling WordsApi->InsertTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->InsertTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (table != null && table.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(table); // http body (model) parameter
            }
            else
            {
                localVarPostBody = table; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableResponse)));
        }

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableCellResponse InsertTableCell (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> localVarResponse = InsertTableCellWithHttpInfo(version, name, cell, tableRowPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableCellResponse > InsertTableCellWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new ApiException(400, "Missing required parameter 'cell' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->InsertTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)));
        }

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> InsertTableCellAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> localVarResponse = await InsertTableCellAsyncWithHttpInfo(version, name, cell, tableRowPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds table cell to table, returns added cell&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="cell">Table cell parameters/</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>> InsertTableCellAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell, string tableRowPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'cell' is set
            if (cell == null)
                throw new ApiException(400, "Missing required parameter 'cell' when calling WordsApi->InsertTableCell");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->InsertTableCell");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (cell != null && cell.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(cell); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cell; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTableCell", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellResponse)));
        }

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableRowResponse InsertTableRow (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> localVarResponse = InsertTableRowWithHttpInfo(version, name, row, tablePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableRowResponse > InsertTableRowWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->InsertTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (row != null && row.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(row); // http body (model) parameter
            }
            else
            {
                localVarPostBody = row; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)));
        }

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> InsertTableRowAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> localVarResponse = await InsertTableRowAsyncWithHttpInfo(version, name, row, tablePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds table row to table, returns added row&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="row">Table row parameters/</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>> InsertTableRowAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row, string tablePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'row' is set
            if (row == null)
                throw new ApiException(400, "Missing required parameter 'row' when calling WordsApi->InsertTableRow");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->InsertTableRow");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (row != null && row.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(row); // http body (model) parameter
            }
            else
            {
                localVarPostBody = row; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertTableRow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowResponse)));
        }

        /// <summary>
        /// Append documents to original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostAppendDocument (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostAppendDocumentWithHttpInfo(version, name, documentList, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append documents to original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostAppendDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostAppendDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostAppendDocument");
            // verify the required parameter 'documentList' is set
            if (documentList == null)
                throw new ApiException(400, "Missing required parameter 'documentList' when calling WordsApi->PostAppendDocument");

            var localVarPath = "/v{version}/words/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (documentList != null && documentList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(documentList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Append documents to original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostAppendDocumentAsync (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostAppendDocumentAsyncWithHttpInfo(version, name, documentList, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append documents to original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="documentList">{Aspose.Words.Cloud.DTO.DocumentEntryList} with a list of documents to append.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostAppendDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentEntryList documentList, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostAppendDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostAppendDocument");
            // verify the required parameter 'documentList' is set
            if (documentList == null)
                throw new ApiException(400, "Missing required parameter 'documentList' when calling WordsApi->PostAppendDocument");

            var localVarPath = "/v{version}/words/{name}/appendDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (documentList != null && documentList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(documentList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAppendDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Change document protection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        public AsposeWordsCloudDTOProtectionDataResponse PostChangeDocumentProtection (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = PostChangeDocumentProtectionWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change document protection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOProtectionDataResponse > PostChangeDocumentProtectionWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostChangeDocumentProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostChangeDocumentProtection");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->PostChangeDocumentProtection");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChangeDocumentProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Change document protection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> PostChangeDocumentProtectionAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = await PostChangeDocumentProtectionAsyncWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change document protection. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> PostChangeDocumentProtectionAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostChangeDocumentProtection");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostChangeDocumentProtection");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->PostChangeDocumentProtection");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChangeDocumentProtection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommentsCommentResponse PostComment (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = PostCommentWithHttpInfo(version, name, commentIndex, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommentsCommentResponse > PostCommentWithHttpInfo (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->PostComment");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling WordsApi->PostComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PostCommentAsync (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = await PostCommentAsyncWithHttpInfo(version, name, commentIndex, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the comment, returns updated comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="commentIndex">Comment index</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> PostCommentAsyncWithHttpInfo (string version, string name, int? commentIndex, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostComment");
            // verify the required parameter 'commentIndex' is set
            if (commentIndex == null)
                throw new ApiException(400, "Missing required parameter 'commentIndex' when calling WordsApi->PostComment");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling WordsApi->PostComment");

            var localVarPath = "/v{version}/words/{name}/comments/{commentIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (commentIndex != null) localVarPathParams.Add("commentIndex", Configuration.ApiClient.ParameterToString(commentIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Compare document with original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostCompareDocument (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostCompareDocumentWithHttpInfo(version, name, compareData, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Compare document with original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostCompareDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostCompareDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostCompareDocument");
            // verify the required parameter 'compareData' is set
            if (compareData == null)
                throw new ApiException(400, "Missing required parameter 'compareData' when calling WordsApi->PostCompareDocument");

            var localVarPath = "/v{version}/words/{name}/compareDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (compareData != null && compareData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(compareData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = compareData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCompareDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Compare document with original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostCompareDocumentAsync (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostCompareDocumentAsyncWithHttpInfo(version, name, compareData, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Compare document with original document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="compareData">{Aspose.Words.Cloud.DTO.Compare.CompareData} with a document to compare.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostCompareDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOCompareCompareData compareData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostCompareDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostCompareDocument");
            // verify the required parameter 'compareData' is set
            if (compareData == null)
                throw new ApiException(400, "Missing required parameter 'compareData' when calling WordsApi->PostCompareDocument");

            var localVarPath = "/v{version}/words/{name}/compareDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (compareData != null && compareData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(compareData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = compareData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostCompareDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Execute document mail merge operation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostDocumentExecuteMailMerge (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostDocumentExecuteMailMergeWithHttpInfo(version, name, withRegions, data, mailMergeDataFile, cleanup, useWholeParagraphAsRegion, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute document mail merge operation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostDocumentExecuteMailMergeWithHttpInfo (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentExecuteMailMerge");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentExecuteMailMerge");
            // verify the required parameter 'withRegions' is set
            if (withRegions == null)
                throw new ApiException(400, "Missing required parameter 'withRegions' when calling WordsApi->PostDocumentExecuteMailMerge");

            var localVarPath = "/v{version}/words/{name}/executeMailMerge/{withRegions}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (withRegions != null) localVarPathParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // path parameter
            if (mailMergeDataFile != null) localVarQueryParams.Add("mailMergeDataFile", Configuration.ApiClient.ParameterToString(mailMergeDataFile)); // query parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentExecuteMailMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Execute document mail merge operation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostDocumentExecuteMailMergeAsync (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostDocumentExecuteMailMergeAsyncWithHttpInfo(version, name, withRegions, data, mailMergeDataFile, cleanup, useWholeParagraphAsRegion, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute document mail merge operation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="withRegions">With regions flag.</param>
        /// <param name="data">Mail merge data (optional)</param>
        /// <param name="mailMergeDataFile">Mail merge data. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostDocumentExecuteMailMergeAsyncWithHttpInfo (string version, string name, bool? withRegions, string data = null, string mailMergeDataFile = null, string cleanup = null, bool? useWholeParagraphAsRegion = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentExecuteMailMerge");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentExecuteMailMerge");
            // verify the required parameter 'withRegions' is set
            if (withRegions == null)
                throw new ApiException(400, "Missing required parameter 'withRegions' when calling WordsApi->PostDocumentExecuteMailMerge");

            var localVarPath = "/v{version}/words/{name}/executeMailMerge/{withRegions}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (withRegions != null) localVarPathParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // path parameter
            if (mailMergeDataFile != null) localVarQueryParams.Add("mailMergeDataFile", Configuration.ApiClient.ParameterToString(mailMergeDataFile)); // query parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentExecuteMailMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Updates font properties, returns updated font data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFontElementFontResponse PostDocumentParagraphRunFont (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> localVarResponse = PostDocumentParagraphRunFontWithHttpInfo(version, name, fontDto, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates font properties, returns updated font data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFontElementFontResponse > PostDocumentParagraphRunFontWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'fontDto' is set
            if (fontDto == null)
                throw new ApiException(400, "Missing required parameter 'fontDto' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostDocumentParagraphRunFont");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}/font";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontDto != null && fontDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fontDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fontDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentParagraphRunFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFontElementFontResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFontElementFontResponse)));
        }

        /// <summary>
        /// Updates font properties, returns updated font data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFontElementFontResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> PostDocumentParagraphRunFontAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> localVarResponse = await PostDocumentParagraphRunFontAsyncWithHttpInfo(version, name, fontDto, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates font properties, returns updated font data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="fontDto">Font dto object</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFontElementFontResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>> PostDocumentParagraphRunFontAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFontElementFont fontDto, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'fontDto' is set
            if (fontDto == null)
                throw new ApiException(400, "Missing required parameter 'fontDto' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PostDocumentParagraphRunFont");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostDocumentParagraphRunFont");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}/font";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontDto != null && fontDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(fontDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fontDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentParagraphRunFont", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFontElementFontResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFontElementFontResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFontElementFontResponse)));
        }

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        public AsposeWordsCloudDTOSaveResponse PostDocumentSaveAs (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = PostDocumentSaveAsWithHttpInfo(version, name, saveOptionsData, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOSaveResponse > PostDocumentSaveAsWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentSaveAs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentSaveAs");
            // verify the required parameter 'saveOptionsData' is set
            if (saveOptionsData == null)
                throw new ApiException(400, "Missing required parameter 'saveOptionsData' when calling WordsApi->PostDocumentSaveAs");

            var localVarPath = "/v{version}/words/{name}/saveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (saveOptionsData != null && saveOptionsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptionsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptionsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PostDocumentSaveAsAsync (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = await PostDocumentSaveAsAsyncWithHttpInfo(version, name, saveOptionsData, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document to destination format with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptionsData">Save options.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PostDocumentSaveAsAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDocumentSaveAs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDocumentSaveAs");
            // verify the required parameter 'saveOptionsData' is set
            if (saveOptionsData == null)
                throw new ApiException(400, "Missing required parameter 'saveOptionsData' when calling WordsApi->PostDocumentSaveAs");

            var localVarPath = "/v{version}/words/{name}/saveAs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (saveOptionsData != null && saveOptionsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptionsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptionsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocumentSaveAs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse PostDrawingObject (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = PostDrawingObjectWithHttpInfo(version, drawingObject, imageFile, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse > PostDrawingObjectWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'drawingObject' is set
            if (drawingObject == null)
                throw new ApiException(400, "Missing required parameter 'drawingObject' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (drawingObject != null) localVarFormParams.Add("drawingObject", Configuration.ApiClient.ParameterToString(drawingObject)); // form parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PostDrawingObjectAsync (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = await PostDrawingObjectAsyncWithHttpInfo(version, drawingObject, imageFile, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates drawing object, returns updated  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> PostDrawingObjectAsyncWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'drawingObject' is set
            if (drawingObject == null)
                throw new ApiException(400, "Missing required parameter 'drawingObject' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (drawingObject != null) localVarFormParams.Add("drawingObject", Configuration.ApiClient.ParameterToString(drawingObject)); // form parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Populate document template with data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostExecuteTemplate (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostExecuteTemplateWithHttpInfo(version, data, name, cleanup, useWholeParagraphAsRegion, withRegions, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Populate document template with data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostExecuteTemplateWithHttpInfo (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostExecuteTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PostExecuteTemplate");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostExecuteTemplate");

            var localVarPath = "/v{version}/words/{name}/executeTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostExecuteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Populate document template with data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostExecuteTemplateAsync (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostExecuteTemplateAsyncWithHttpInfo(version, data, name, cleanup, useWholeParagraphAsRegion, withRegions, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Populate document template with data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Mail merge data</param>
        /// <param name="name">The template document name.</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or   TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.    The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostExecuteTemplateAsyncWithHttpInfo (string version, string data, string name, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostExecuteTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PostExecuteTemplate");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostExecuteTemplate");

            var localVarPath = "/v{version}/words/{name}/executeTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (data != null) localVarFormParams.Add("data", Configuration.ApiClient.ParameterToString(data)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostExecuteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFieldsFieldResponse PostField (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = PostFieldWithHttpInfo(version, name, field, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFieldsFieldResponse > PostFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling WordsApi->PostField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PostFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = await PostFieldAsyncWithHttpInfo(version, name, field, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates field&#39;s properties, returns updated field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> PostFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling WordsApi->PostField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse PostFootnote (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = PostFootnoteWithHttpInfo(version, name, footnoteDto, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse > PostFootnoteWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostFootnote");
            // verify the required parameter 'footnoteDto' is set
            if (footnoteDto == null)
                throw new ApiException(400, "Missing required parameter 'footnoteDto' when calling WordsApi->PostFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (footnoteDto != null && footnoteDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(footnoteDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = footnoteDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PostFootnoteAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = await PostFootnoteAsyncWithHttpInfo(version, name, footnoteDto, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates footnote&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> PostFootnoteAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostFootnote");
            // verify the required parameter 'footnoteDto' is set
            if (footnoteDto == null)
                throw new ApiException(400, "Missing required parameter 'footnoteDto' when calling WordsApi->PostFootnote");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (footnoteDto != null && footnoteDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(footnoteDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = footnoteDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Updates properties of form field, returns updated form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse PostFormField (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = PostFormFieldWithHttpInfo(version, name, formField, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates properties of form field, returns updated form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse > PostFormFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostFormField");
            // verify the required parameter 'formField' is set
            if (formField == null)
                throw new ApiException(400, "Missing required parameter 'formField' when calling WordsApi->PostFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (formField != null && formField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Updates properties of form field, returns updated form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PostFormFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = await PostFormFieldAsyncWithHttpInfo(version, name, formField, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates properties of form field, returns updated form field. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> PostFormFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostFormField");
            // verify the required parameter 'formField' is set
            if (formField == null)
                throw new ApiException(400, "Missing required parameter 'formField' when calling WordsApi->PostFormField");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PostFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (formField != null && formField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Insert document watermark image. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostInsertDocumentWatermarkImage (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostInsertDocumentWatermarkImageWithHttpInfo(version, name, imageFile, rotationAngle, image, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert document watermark image. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostInsertDocumentWatermarkImageWithHttpInfo (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertDocumentWatermarkImage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertDocumentWatermarkImage");

            var localVarPath = "/v{version}/words/{name}/watermark/insertImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (rotationAngle != null) localVarQueryParams.Add("rotationAngle", Configuration.ApiClient.ParameterToString(rotationAngle)); // query parameter
            if (image != null) localVarQueryParams.Add("image", Configuration.ApiClient.ParameterToString(image)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertDocumentWatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Insert document watermark image. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkImageAsync (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostInsertDocumentWatermarkImageAsyncWithHttpInfo(version, name, imageFile, rotationAngle, image, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert document watermark image. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="imageFile">File with image (optional)</param>
        /// <param name="rotationAngle">The watermark rotation angle. (optional)</param>
        /// <param name="image">The image file server full name. If the name is empty the image is expected in request content. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertDocumentWatermarkImageAsyncWithHttpInfo (string version, string name, System.IO.Stream imageFile = null, double? rotationAngle = null, string image = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertDocumentWatermarkImage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertDocumentWatermarkImage");

            var localVarPath = "/v{version}/words/{name}/watermark/insertImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (rotationAngle != null) localVarQueryParams.Add("rotationAngle", Configuration.ApiClient.ParameterToString(rotationAngle)); // query parameter
            if (image != null) localVarQueryParams.Add("image", Configuration.ApiClient.ParameterToString(image)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertDocumentWatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Insert document watermark text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostInsertDocumentWatermarkText (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostInsertDocumentWatermarkTextWithHttpInfo(version, name, watermarkText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert document watermark text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostInsertDocumentWatermarkTextWithHttpInfo (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertDocumentWatermarkText");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertDocumentWatermarkText");
            // verify the required parameter 'watermarkText' is set
            if (watermarkText == null)
                throw new ApiException(400, "Missing required parameter 'watermarkText' when calling WordsApi->PostInsertDocumentWatermarkText");

            var localVarPath = "/v{version}/words/{name}/watermark/insertText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (watermarkText != null && watermarkText.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watermarkText); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watermarkText; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertDocumentWatermarkText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Insert document watermark text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertDocumentWatermarkTextAsync (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostInsertDocumentWatermarkTextAsyncWithHttpInfo(version, name, watermarkText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert document watermark text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="watermarkText">{Aspose.Words.Cloud.DTO.WatermarkText} with the watermark data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertDocumentWatermarkTextAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOWatermarkText watermarkText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertDocumentWatermarkText");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertDocumentWatermarkText");
            // verify the required parameter 'watermarkText' is set
            if (watermarkText == null)
                throw new ApiException(400, "Missing required parameter 'watermarkText' when calling WordsApi->PostInsertDocumentWatermarkText");

            var localVarPath = "/v{version}/words/{name}/watermark/insertText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (watermarkText != null && watermarkText.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(watermarkText); // http body (model) parameter
            }
            else
            {
                localVarPostBody = watermarkText; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertDocumentWatermarkText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Insert document page numbers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostInsertPageNumbers (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostInsertPageNumbersWithHttpInfo(version, name, pageNumber, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert document page numbers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostInsertPageNumbersWithHttpInfo (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertPageNumbers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertPageNumbers");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling WordsApi->PostInsertPageNumbers");

            var localVarPath = "/v{version}/words/{name}/insertPageNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (pageNumber != null && pageNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertPageNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Insert document page numbers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostInsertPageNumbersAsync (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostInsertPageNumbersAsyncWithHttpInfo(version, name, pageNumber, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert document page numbers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">A document name.</param>
        /// <param name="pageNumber">{Aspose.Words.Cloud.DTO.PageNumber} with the page numbers settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostInsertPageNumbersAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOPageNumber pageNumber, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostInsertPageNumbers");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostInsertPageNumbers");
            // verify the required parameter 'pageNumber' is set
            if (pageNumber == null)
                throw new ApiException(400, "Missing required parameter 'pageNumber' when calling WordsApi->PostInsertPageNumbers");

            var localVarPath = "/v{version}/words/{name}/insertPageNumbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (pageNumber != null && pageNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageNumber; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostInsertPageNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Loads new document from web into the file with any supported format of data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        public AsposeWordsCloudDTOSaveResponse PostLoadWebDocument (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = PostLoadWebDocumentWithHttpInfo(version, data, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads new document from web into the file with any supported format of data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOSaveResponse > PostLoadWebDocumentWithHttpInfo (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostLoadWebDocument");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PostLoadWebDocument");

            var localVarPath = "/v{version}/words/loadWebDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLoadWebDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Loads new document from web into the file with any supported format of data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PostLoadWebDocumentAsync (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = await PostLoadWebDocumentAsyncWithHttpInfo(version, data, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads new document from web into the file with any supported format of data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="data">Parameters of loading.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PostLoadWebDocumentAsyncWithHttpInfo (string version, AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data, string storage = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostLoadWebDocument");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PostLoadWebDocument");

            var localVarPath = "/v{version}/words/loadWebDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostLoadWebDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Replace document text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        public AsposeWordsCloudDTOReplaceReplaceTextResponse PostReplaceText (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse> localVarResponse = PostReplaceTextWithHttpInfo(version, name, replaceText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace document text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOReplaceReplaceTextResponse > PostReplaceTextWithHttpInfo (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostReplaceText");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostReplaceText");
            // verify the required parameter 'replaceText' is set
            if (replaceText == null)
                throw new ApiException(400, "Missing required parameter 'replaceText' when calling WordsApi->PostReplaceText");

            var localVarPath = "/v{version}/words/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (replaceText != null && replaceText.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(replaceText); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replaceText; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOReplaceReplaceTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOReplaceReplaceTextResponse)));
        }

        /// <summary>
        /// Replace document text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOReplaceReplaceTextResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOReplaceReplaceTextResponse> PostReplaceTextAsync (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse> localVarResponse = await PostReplaceTextAsyncWithHttpInfo(version, name, replaceText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace document text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="replaceText">{Aspose.Words.Cloud.DTO.Replace.ReplaceTextResponse} with the replace operation settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOReplaceReplaceTextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse>> PostReplaceTextAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostReplaceText");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostReplaceText");
            // verify the required parameter 'replaceText' is set
            if (replaceText == null)
                throw new ApiException(400, "Missing required parameter 'replaceText' when calling WordsApi->PostReplaceText");

            var localVarPath = "/v{version}/words/{name}/replaceText";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (replaceText != null && replaceText.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(replaceText); // http body (model) parameter
            }
            else
            {
                localVarPostBody = replaceText; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostReplaceText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOReplaceReplaceTextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOReplaceReplaceTextResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOReplaceReplaceTextResponse)));
        }

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public AsposeWordsCloudDTODocumentElementsRunsRunResponse PostRun (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = PostRunWithHttpInfo(version, name, run, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsRunsRunResponse > PostRunWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling WordsApi->PostRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PostRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (run != null && run.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(run); // http body (model) parameter
            }
            else
            {
                localVarPostBody = run; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PostRunAsync (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = await PostRunAsyncWithHttpInfo(version, name, run, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates run&#39;s properties, returns updated run&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="run">Run data.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> PostRunAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsRunsRun run, string paragraphPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling WordsApi->PostRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PostRun");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->PostRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (run != null && run.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(run); // http body (model) parameter
            }
            else
            {
                localVarPostBody = run; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// Run tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Object</returns>
        public Object PostRunTask (string version)
        {
             ApiResponse<Object> localVarResponse = PostRunTaskWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > PostRunTaskWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostRunTask");

            var localVarPath = "/v{version}/words/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRunTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Run tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> PostRunTaskAsync (string version)
        {
             ApiResponse<Object> localVarResponse = await PostRunTaskAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run tasks 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostRunTaskAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostRunTask");

            var localVarPath = "/v{version}/words/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostRunTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Split document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSplitDocumentResponse</returns>
        public AsposeWordsCloudDTOSplitDocumentResponse PostSplitDocument (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse> localVarResponse = PostSplitDocumentWithHttpInfo(version, name, format, from, to, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Split document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSplitDocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOSplitDocumentResponse > PostSplitDocumentWithHttpInfo (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostSplitDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostSplitDocument");

            var localVarPath = "/v{version}/words/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (zipOutput != null) localVarQueryParams.Add("zipOutput", Configuration.ApiClient.ParameterToString(zipOutput)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSplitDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSplitDocumentResponse)));
        }

        /// <summary>
        /// Split document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSplitDocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOSplitDocumentResponse> PostSplitDocumentAsync (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse> localVarResponse = await PostSplitDocumentAsyncWithHttpInfo(version, name, format, from, to, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Split document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">Original document name.</param>
        /// <param name="format">Format to split. (optional)</param>
        /// <param name="from">Start page. (optional)</param>
        /// <param name="to">End page. (optional)</param>
        /// <param name="zipOutput">ZipOutput or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSplitDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse>> PostSplitDocumentAsyncWithHttpInfo (string version, string name, string format = null, int? from = null, int? to = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostSplitDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostSplitDocument");

            var localVarPath = "/v{version}/words/{name}/split";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("to", Configuration.ApiClient.ParameterToString(to)); // query parameter
            if (zipOutput != null) localVarQueryParams.Add("zipOutput", Configuration.ApiClient.ParameterToString(zipOutput)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSplitDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSplitDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSplitDocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSplitDocumentResponse)));
        }

        /// <summary>
        /// Update document bookmark. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse PostUpdateDocumentBookmark (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> localVarResponse = PostUpdateDocumentBookmarkWithHttpInfo(version, name, bookmarkData, bookmarkName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update document bookmark. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse > PostUpdateDocumentBookmarkWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'bookmarkData' is set
            if (bookmarkData == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkData' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'bookmarkName' is set
            if (bookmarkName == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkName' when calling WordsApi->PostUpdateDocumentBookmark");

            var localVarPath = "/v{version}/words/{name}/bookmarks/{bookmarkName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkName != null) localVarPathParams.Add("bookmarkName", Configuration.ApiClient.ParameterToString(bookmarkName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (bookmarkData != null && bookmarkData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bookmarkData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bookmarkData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdateDocumentBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)));
        }

        /// <summary>
        /// Update document bookmark. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> PostUpdateDocumentBookmarkAsync (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> localVarResponse = await PostUpdateDocumentBookmarkAsyncWithHttpInfo(version, name, bookmarkData, bookmarkName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update document bookmark. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="bookmarkData">{Aspose.Words.Cloud.DTO.DocumentElements.Bookmarks.BookmarkData} with new bookmark data.</param>
        /// <param name="bookmarkName">The bookmark name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>> PostUpdateDocumentBookmarkAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData, string bookmarkName, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'bookmarkData' is set
            if (bookmarkData == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkData' when calling WordsApi->PostUpdateDocumentBookmark");
            // verify the required parameter 'bookmarkName' is set
            if (bookmarkName == null)
                throw new ApiException(400, "Missing required parameter 'bookmarkName' when calling WordsApi->PostUpdateDocumentBookmark");

            var localVarPath = "/v{version}/words/{name}/bookmarks/{bookmarkName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (bookmarkName != null) localVarPathParams.Add("bookmarkName", Configuration.ApiClient.ParameterToString(bookmarkName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (bookmarkData != null && bookmarkData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bookmarkData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bookmarkData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdateDocumentBookmark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse)));
        }

        /// <summary>
        /// Update (reevaluate) fields in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PostUpdateDocumentFields (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PostUpdateDocumentFieldsWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update (reevaluate) fields in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PostUpdateDocumentFieldsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostUpdateDocumentFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostUpdateDocumentFields");

            var localVarPath = "/v{version}/words/{name}/updateFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Update (reevaluate) fields in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PostUpdateDocumentFieldsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PostUpdateDocumentFieldsAsyncWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update (reevaluate) fields in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PostUpdateDocumentFieldsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PostUpdateDocumentFields");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PostUpdateDocumentFields");

            var localVarPath = "/v{version}/words/{name}/updateFields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostUpdateDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommentsCommentResponse PutComment (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = PutCommentWithHttpInfo(version, name, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommentsCommentResponse > PutCommentWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutComment");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling WordsApi->PutComment");

            var localVarPath = "/v{version}/words/{name}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommentsCommentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> PutCommentAsync (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> localVarResponse = await PutCommentAsyncWithHttpInfo(version, name, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds comment to document, returns inserted comment&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="comment">Comment data.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>> PutCommentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutComment");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutComment");
            // verify the required parameter 'comment' is set
            if (comment == null)
                throw new ApiException(400, "Missing required parameter 'comment' when calling WordsApi->PutComment");

            var localVarPath = "/v{version}/words/{name}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (comment != null && comment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(comment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = comment; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommentsCommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommentsCommentResponse)));
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PutConvertDocument (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PutConvertDocumentWithHttpInfo(version, document, format, outPath, storage, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PutConvertDocumentWithHttpInfo (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutConvertDocument");
            // verify the required parameter 'document' is set
            if (document == null)
                throw new ApiException(400, "Missing required parameter 'document' when calling WordsApi->PutConvertDocument");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->PutConvertDocument");

            var localVarPath = "/v{version}/words/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (document != null) localVarFileParams.Add("document", Configuration.ApiClient.ParameterToFile("document", document));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConvertDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PutConvertDocumentAsync (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PutConvertDocumentAsyncWithHttpInfo(version, document, format, outPath, storage, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document from request content to format specified. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="document">Converting document</param>
        /// <param name="format">Format to convert.</param>
        /// <param name="outPath">Path for saving operation result to the local storage. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutConvertDocumentAsyncWithHttpInfo (string version, System.IO.Stream document, string format, string outPath = null, string storage = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutConvertDocument");
            // verify the required parameter 'document' is set
            if (document == null)
                throw new ApiException(400, "Missing required parameter 'document' when calling WordsApi->PutConvertDocument");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->PutConvertDocument");

            var localVarPath = "/v{version}/words/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (outPath != null) localVarQueryParams.Add("outPath", Configuration.ApiClient.ParameterToString(outPath)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (document != null) localVarFileParams.Add("document", Configuration.ApiClient.ParameterToFile("document", document));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutConvertDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentResponse</returns>
        public AsposeWordsCloudDTODocumentResponse PutCreateDocument (string version, string fileName = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = PutCreateDocumentWithHttpInfo(version, fileName, folder, storage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentResponse > PutCreateDocumentWithHttpInfo (string version, string fileName = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutCreateDocument");

            var localVarPath = "/v{version}/words/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (fileName != null) localVarQueryParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentResponse> PutCreateDocumentAsync (string version, string fileName = null, string folder = null, string storage = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentResponse> localVarResponse = await PutCreateDocumentAsyncWithHttpInfo(version, fileName, folder, storage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new document.  Document is created with format which is recognized from file extensions.   Supported extentions: \&quot;.doc\&quot;, \&quot;.docx\&quot;, \&quot;.docm\&quot;, \&quot;.dot\&quot;, \&quot;.dotm\&quot;, \&quot;.dotx\&quot;, \&quot;.flatopc\&quot;, \&quot;.fopc\&quot;, \&quot;.flatopc_macro\&quot;, \&quot;.fopc_macro\&quot;, \&quot;.flatopc_template\&quot;, \&quot;.fopc_template\&quot;, \&quot;.flatopc_template_macro\&quot;, \&quot;.fopc_template_macro\&quot;, \&quot;.wordml\&quot;, \&quot;.wml\&quot;, \&quot;.rtf\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="fileName">The file name. (optional)</param>
        /// <param name="folder">The document folder. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentResponse>> PutCreateDocumentAsyncWithHttpInfo (string version, string fileName = null, string folder = null, string storage = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutCreateDocument");

            var localVarPath = "/v{version}/words/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (fileName != null) localVarQueryParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutCreateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentResponse)));
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>AsposeWordsCloudDTOFieldNamesResponse</returns>
        public AsposeWordsCloudDTOFieldNamesResponse PutDocumentFieldNames (string version, System.IO.Stream template, bool? useNonMergeFields = null)
        {
             ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> localVarResponse = PutDocumentFieldNamesWithHttpInfo(version, template, useNonMergeFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOFieldNamesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOFieldNamesResponse > PutDocumentFieldNamesWithHttpInfo (string version, System.IO.Stream template, bool? useNonMergeFields = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDocumentFieldNames");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutDocumentFieldNames");

            var localVarPath = "/v{version}/words/mailMergeFieldNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (useNonMergeFields != null) localVarQueryParams.Add("useNonMergeFields", Configuration.ApiClient.ParameterToString(useNonMergeFields)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentFieldNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOFieldNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOFieldNamesResponse)));
        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOFieldNamesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOFieldNamesResponse> PutDocumentFieldNamesAsync (string version, System.IO.Stream template, bool? useNonMergeFields = null)
        {
             ApiResponse<AsposeWordsCloudDTOFieldNamesResponse> localVarResponse = await PutDocumentFieldNamesAsyncWithHttpInfo(version, template, useNonMergeFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read document field names. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="useNonMergeFields">Use non merge fields or not. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOFieldNamesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>> PutDocumentFieldNamesAsyncWithHttpInfo (string version, System.IO.Stream template, bool? useNonMergeFields = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDocumentFieldNames");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutDocumentFieldNames");

            var localVarPath = "/v{version}/words/mailMergeFieldNames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (useNonMergeFields != null) localVarQueryParams.Add("useNonMergeFields", Configuration.ApiClient.ParameterToString(useNonMergeFields)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentFieldNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOFieldNamesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOFieldNamesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOFieldNamesResponse)));
        }

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSaveResponse</returns>
        public AsposeWordsCloudDTOSaveResponse PutDocumentSaveAsTiff (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = PutDocumentSaveAsTiffWithHttpInfo(version, name, saveOptions, resultFile, useAntiAliasing, useHighQualityRendering, imageBrightness, imageColorMode, imageContrast, numeralFormat, pageCount, pageIndex, paperColor, pixelFormat, resolution, scale, tiffCompression, dmlRenderingMode, dmlEffectsRenderingMode, tiffBinarizationMethod, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSaveResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOSaveResponse > PutDocumentSaveAsTiffWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDocumentSaveAsTiff");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutDocumentSaveAsTiff");
            // verify the required parameter 'saveOptions' is set
            if (saveOptions == null)
                throw new ApiException(400, "Missing required parameter 'saveOptions' when calling WordsApi->PutDocumentSaveAsTiff");

            var localVarPath = "/v{version}/words/{name}/saveAs/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (resultFile != null) localVarQueryParams.Add("resultFile", Configuration.ApiClient.ParameterToString(resultFile)); // query parameter
            if (useAntiAliasing != null) localVarQueryParams.Add("useAntiAliasing", Configuration.ApiClient.ParameterToString(useAntiAliasing)); // query parameter
            if (useHighQualityRendering != null) localVarQueryParams.Add("useHighQualityRendering", Configuration.ApiClient.ParameterToString(useHighQualityRendering)); // query parameter
            if (imageBrightness != null) localVarQueryParams.Add("imageBrightness", Configuration.ApiClient.ParameterToString(imageBrightness)); // query parameter
            if (imageColorMode != null) localVarQueryParams.Add("imageColorMode", Configuration.ApiClient.ParameterToString(imageColorMode)); // query parameter
            if (imageContrast != null) localVarQueryParams.Add("imageContrast", Configuration.ApiClient.ParameterToString(imageContrast)); // query parameter
            if (numeralFormat != null) localVarQueryParams.Add("numeralFormat", Configuration.ApiClient.ParameterToString(numeralFormat)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", Configuration.ApiClient.ParameterToString(pageCount)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // query parameter
            if (paperColor != null) localVarQueryParams.Add("paperColor", Configuration.ApiClient.ParameterToString(paperColor)); // query parameter
            if (pixelFormat != null) localVarQueryParams.Add("pixelFormat", Configuration.ApiClient.ParameterToString(pixelFormat)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (scale != null) localVarQueryParams.Add("scale", Configuration.ApiClient.ParameterToString(scale)); // query parameter
            if (tiffCompression != null) localVarQueryParams.Add("tiffCompression", Configuration.ApiClient.ParameterToString(tiffCompression)); // query parameter
            if (dmlRenderingMode != null) localVarQueryParams.Add("dmlRenderingMode", Configuration.ApiClient.ParameterToString(dmlRenderingMode)); // query parameter
            if (dmlEffectsRenderingMode != null) localVarQueryParams.Add("dmlEffectsRenderingMode", Configuration.ApiClient.ParameterToString(dmlEffectsRenderingMode)); // query parameter
            if (tiffBinarizationMethod != null) localVarQueryParams.Add("tiffBinarizationMethod", Configuration.ApiClient.ParameterToString(tiffBinarizationMethod)); // query parameter
            if (zipOutput != null) localVarQueryParams.Add("zipOutput", Configuration.ApiClient.ParameterToString(zipOutput)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentSaveAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSaveResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOSaveResponse> PutDocumentSaveAsTiffAsync (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<AsposeWordsCloudDTOSaveResponse> localVarResponse = await PutDocumentSaveAsTiffAsyncWithHttpInfo(version, name, saveOptions, resultFile, useAntiAliasing, useHighQualityRendering, imageBrightness, imageColorMode, imageContrast, numeralFormat, pageCount, pageIndex, paperColor, pixelFormat, resolution, scale, tiffCompression, dmlRenderingMode, dmlEffectsRenderingMode, tiffBinarizationMethod, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document to tiff with detailed settings and save result to storage. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="saveOptions">Tiff save options.</param>
        /// <param name="resultFile">The resulting file name. (optional)</param>
        /// <param name="useAntiAliasing">Use antialiasing flag. (optional)</param>
        /// <param name="useHighQualityRendering">Use high quality flag. (optional)</param>
        /// <param name="imageBrightness">Brightness for the generated images. (optional)</param>
        /// <param name="imageColorMode">Color mode for the generated images. (optional)</param>
        /// <param name="imageContrast">The contrast for the generated images. (optional)</param>
        /// <param name="numeralFormat">The images numeral format. (optional)</param>
        /// <param name="pageCount">Number of pages to render. (optional)</param>
        /// <param name="pageIndex">Page index to start rendering. (optional)</param>
        /// <param name="paperColor">Background image color. (optional)</param>
        /// <param name="pixelFormat">The pixel format of generated images. (optional)</param>
        /// <param name="resolution">The resolution of generated images. (optional)</param>
        /// <param name="scale">Zoom factor for generated images. (optional)</param>
        /// <param name="tiffCompression">The compression tipe. (optional)</param>
        /// <param name="dmlRenderingMode">Optional, default is Fallback. (optional)</param>
        /// <param name="dmlEffectsRenderingMode">Optional, default is Simplified. (optional)</param>
        /// <param name="tiffBinarizationMethod">Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold. (optional)</param>
        /// <param name="zipOutput">Optional. A value determining zip output or not. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSaveResponse>> PutDocumentSaveAsTiffAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions, string resultFile = null, bool? useAntiAliasing = null, bool? useHighQualityRendering = null, float? imageBrightness = null, string imageColorMode = null, float? imageContrast = null, string numeralFormat = null, int? pageCount = null, int? pageIndex = null, string paperColor = null, string pixelFormat = null, float? resolution = null, float? scale = null, string tiffCompression = null, string dmlRenderingMode = null, string dmlEffectsRenderingMode = null, string tiffBinarizationMethod = null, bool? zipOutput = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDocumentSaveAsTiff");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutDocumentSaveAsTiff");
            // verify the required parameter 'saveOptions' is set
            if (saveOptions == null)
                throw new ApiException(400, "Missing required parameter 'saveOptions' when calling WordsApi->PutDocumentSaveAsTiff");

            var localVarPath = "/v{version}/words/{name}/saveAs/tiff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (resultFile != null) localVarQueryParams.Add("resultFile", Configuration.ApiClient.ParameterToString(resultFile)); // query parameter
            if (useAntiAliasing != null) localVarQueryParams.Add("useAntiAliasing", Configuration.ApiClient.ParameterToString(useAntiAliasing)); // query parameter
            if (useHighQualityRendering != null) localVarQueryParams.Add("useHighQualityRendering", Configuration.ApiClient.ParameterToString(useHighQualityRendering)); // query parameter
            if (imageBrightness != null) localVarQueryParams.Add("imageBrightness", Configuration.ApiClient.ParameterToString(imageBrightness)); // query parameter
            if (imageColorMode != null) localVarQueryParams.Add("imageColorMode", Configuration.ApiClient.ParameterToString(imageColorMode)); // query parameter
            if (imageContrast != null) localVarQueryParams.Add("imageContrast", Configuration.ApiClient.ParameterToString(imageContrast)); // query parameter
            if (numeralFormat != null) localVarQueryParams.Add("numeralFormat", Configuration.ApiClient.ParameterToString(numeralFormat)); // query parameter
            if (pageCount != null) localVarQueryParams.Add("pageCount", Configuration.ApiClient.ParameterToString(pageCount)); // query parameter
            if (pageIndex != null) localVarQueryParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // query parameter
            if (paperColor != null) localVarQueryParams.Add("paperColor", Configuration.ApiClient.ParameterToString(paperColor)); // query parameter
            if (pixelFormat != null) localVarQueryParams.Add("pixelFormat", Configuration.ApiClient.ParameterToString(pixelFormat)); // query parameter
            if (resolution != null) localVarQueryParams.Add("resolution", Configuration.ApiClient.ParameterToString(resolution)); // query parameter
            if (scale != null) localVarQueryParams.Add("scale", Configuration.ApiClient.ParameterToString(scale)); // query parameter
            if (tiffCompression != null) localVarQueryParams.Add("tiffCompression", Configuration.ApiClient.ParameterToString(tiffCompression)); // query parameter
            if (dmlRenderingMode != null) localVarQueryParams.Add("dmlRenderingMode", Configuration.ApiClient.ParameterToString(dmlRenderingMode)); // query parameter
            if (dmlEffectsRenderingMode != null) localVarQueryParams.Add("dmlEffectsRenderingMode", Configuration.ApiClient.ParameterToString(dmlEffectsRenderingMode)); // query parameter
            if (tiffBinarizationMethod != null) localVarQueryParams.Add("tiffBinarizationMethod", Configuration.ApiClient.ParameterToString(tiffBinarizationMethod)); // query parameter
            if (zipOutput != null) localVarQueryParams.Add("zipOutput", Configuration.ApiClient.ParameterToString(zipOutput)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter
            if (saveOptions != null && saveOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(saveOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = saveOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDocumentSaveAsTiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSaveResponse)));
        }

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse PutDrawingObject (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = PutDrawingObjectWithHttpInfo(version, drawingObject, imageFile, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse > PutDrawingObjectWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'drawingObject' is set
            if (drawingObject == null)
                throw new ApiException(400, "Missing required parameter 'drawingObject' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (drawingObject != null) localVarFormParams.Add("drawingObject", Configuration.ApiClient.ParameterToString(drawingObject)); // form parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> PutDrawingObjectAsync (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> localVarResponse = await PutDrawingObjectAsyncWithHttpInfo(version, drawingObject, imageFile, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds  drawing object to document, returns added  drawing object&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="drawingObject">Drawing object parameters</param>
        /// <param name="imageFile">File with image</param>
        /// <param name="name">The document name.</param>
        /// <param name="nodePath">Path to node, which contains collection of drawing objects.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>> PutDrawingObjectAsyncWithHttpInfo (string version, string drawingObject, System.IO.Stream imageFile, string name, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'drawingObject' is set
            if (drawingObject == null)
                throw new ApiException(400, "Missing required parameter 'drawingObject' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (drawingObject != null) localVarFormParams.Add("drawingObject", Configuration.ApiClient.ParameterToString(drawingObject)); // form parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", Configuration.ApiClient.ParameterToFile("imageFile", imageFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse)));
        }

        /// <summary>
        /// Execute document mail merge online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PutExecuteMailMergeOnline (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PutExecuteMailMergeOnlineWithHttpInfo(version, template, data, withRegions, cleanup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute document mail merge online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PutExecuteMailMergeOnlineWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutExecuteMailMergeOnline");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutExecuteMailMergeOnline");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PutExecuteMailMergeOnline");

            var localVarPath = "/v{version}/words/executeMailMerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));
            if (data != null) localVarFileParams.Add("Data", Configuration.ApiClient.ParameterToFile("Data", data));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutExecuteMailMergeOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Execute document mail merge online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PutExecuteMailMergeOnlineAsync (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PutExecuteMailMergeOnlineAsyncWithHttpInfo(version, template, data, withRegions, cleanup);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute document mail merge online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="withRegions">With regions flag. (optional)</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutExecuteMailMergeOnlineAsyncWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, bool? withRegions = null, string cleanup = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutExecuteMailMergeOnline");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutExecuteMailMergeOnline");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PutExecuteMailMergeOnline");

            var localVarPath = "/v{version}/words/executeMailMerge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));
            if (data != null) localVarFileParams.Add("Data", Configuration.ApiClient.ParameterToFile("Data", data));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutExecuteMailMergeOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Populate document template with data online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PutExecuteTemplateOnline (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PutExecuteTemplateOnlineWithHttpInfo(version, template, data, cleanup, useWholeParagraphAsRegion, withRegions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Populate document template with data online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > PutExecuteTemplateOnlineWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutExecuteTemplateOnline");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutExecuteTemplateOnline");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PutExecuteTemplateOnline");

            var localVarPath = "/v{version}/words/executeTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));
            if (data != null) localVarFileParams.Add("Data", Configuration.ApiClient.ParameterToFile("Data", data));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutExecuteTemplateOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Populate document template with data online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PutExecuteTemplateOnlineAsync (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PutExecuteTemplateOnlineAsyncWithHttpInfo(version, template, data, cleanup, useWholeParagraphAsRegion, withRegions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Populate document template with data online. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="template">File with template</param>
        /// <param name="data">File with mailmerge data</param>
        /// <param name="cleanup">Clean up options. (optional)</param>
        /// <param name="useWholeParagraphAsRegion">Gets or sets a value indicating whether paragraph with TableStart or               TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.               The default value is true. (optional)</param>
        /// <param name="withRegions">Merge with regions or not. True by default (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PutExecuteTemplateOnlineAsyncWithHttpInfo (string version, System.IO.Stream template, System.IO.Stream data, string cleanup = null, bool? useWholeParagraphAsRegion = null, bool? withRegions = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutExecuteTemplateOnline");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling WordsApi->PutExecuteTemplateOnline");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling WordsApi->PutExecuteTemplateOnline");

            var localVarPath = "/v{version}/words/executeTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (cleanup != null) localVarQueryParams.Add("cleanup", Configuration.ApiClient.ParameterToString(cleanup)); // query parameter
            if (useWholeParagraphAsRegion != null) localVarQueryParams.Add("useWholeParagraphAsRegion", Configuration.ApiClient.ParameterToString(useWholeParagraphAsRegion)); // query parameter
            if (withRegions != null) localVarQueryParams.Add("withRegions", Configuration.ApiClient.ParameterToString(withRegions)); // query parameter
            if (template != null) localVarFileParams.Add("Template", Configuration.ApiClient.ParameterToFile("Template", template));
            if (data != null) localVarFileParams.Add("Data", Configuration.ApiClient.ParameterToFile("Data", data));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutExecuteTemplateOnline", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFieldsFieldResponse PutField (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = PutFieldWithHttpInfo(version, name, field, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFieldsFieldResponse > PutFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling WordsApi->PutField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFieldsFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> PutFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> localVarResponse = await PutFieldAsyncWithHttpInfo(version, name, field, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds field to document, returns inserted field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="field">Field data.</param>
        /// <param name="nodePath">Path to node, which contains collection of fields.</param>
        /// <param name="insertBeforeNode">Field will be inserted before node with id&#x3D;\&quot;nodeId\&quot;. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>> PutFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFieldsFieldDto field, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutField");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling WordsApi->PutField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (field != null && field.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(field); // http body (model) parameter
            }
            else
            {
                localVarPostBody = field; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFieldsFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFieldsFieldResponse)));
        }

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse PutFootnote (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = PutFootnoteWithHttpInfo(version, name, footnoteDto, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse > PutFootnoteWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutFootnote");
            // verify the required parameter 'footnoteDto' is set
            if (footnoteDto == null)
                throw new ApiException(400, "Missing required parameter 'footnoteDto' when calling WordsApi->PutFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (footnoteDto != null && footnoteDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(footnoteDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = footnoteDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> PutFootnoteAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> localVarResponse = await PutFootnoteAsyncWithHttpInfo(version, name, footnoteDto, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds footnote to document, returns added footnote&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="footnoteDto">Footnote data.</param>
        /// <param name="nodePath">Path to node, which contains collection of footnotes.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>> PutFootnoteAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutFootnote");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutFootnote");
            // verify the required parameter 'footnoteDto' is set
            if (footnoteDto == null)
                throw new ApiException(400, "Missing required parameter 'footnoteDto' when calling WordsApi->PutFootnote");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutFootnote");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/footnotes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (footnoteDto != null && footnoteDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(footnoteDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = footnoteDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFootnote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse)));
        }

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse PutFormField (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = PutFormFieldWithHttpInfo(version, name, formField, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse > PutFormFieldWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutFormField");
            // verify the required parameter 'formField' is set
            if (formField == null)
                throw new ApiException(400, "Missing required parameter 'formField' when calling WordsApi->PutFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (formField != null && formField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> PutFormFieldAsync (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> localVarResponse = await PutFormFieldAsyncWithHttpInfo(version, name, formField, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds form field to paragraph, returns added form field&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="formField">From field data.</param>
        /// <param name="nodePath">Path to node that contains collection of formfields.</param>
        /// <param name="insertBeforeNode">Form field will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>> PutFormFieldAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutFormField");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutFormField");
            // verify the required parameter 'formField' is set
            if (formField == null)
                throw new ApiException(400, "Missing required parameter 'formField' when calling WordsApi->PutFormField");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutFormField");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/formfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (formField != null && formField.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(formField); // http body (model) parameter
            }
            else
            {
                localVarPostBody = formField; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutFormField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse)));
        }

        /// <summary>
        /// Insert to document header or footer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse PutHeaderFooter (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = PutHeaderFooterWithHttpInfo(version, name, headerFooterType, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Insert to document header or footer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse > PutHeaderFooterWithHttpInfo (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'headerFooterType' is set
            if (headerFooterType == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterType' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->PutHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (headerFooterType != null && headerFooterType.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(headerFooterType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = headerFooterType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Insert to document header or footer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> PutHeaderFooterAsync (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> localVarResponse = await PutHeaderFooterAsyncWithHttpInfo(version, name, headerFooterType, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Insert to document header or footer. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="headerFooterType">Type of header/footer.</param>
        /// <param name="sectionPath">Path to parent section.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>> PutHeaderFooterAsyncWithHttpInfo (string version, string name, string headerFooterType, string sectionPath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'headerFooterType' is set
            if (headerFooterType == null)
                throw new ApiException(400, "Missing required parameter 'headerFooterType' when calling WordsApi->PutHeaderFooter");
            // verify the required parameter 'sectionPath' is set
            if (sectionPath == null)
                throw new ApiException(400, "Missing required parameter 'sectionPath' when calling WordsApi->PutHeaderFooter");

            var localVarPath = "/v{version}/words/{name}/{sectionPath}/headersfooters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionPath != null) localVarPathParams.Add("sectionPath", Configuration.ApiClient.ParameterToString(sectionPath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (headerFooterType != null && headerFooterType.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(headerFooterType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = headerFooterType; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutHeaderFooter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse)));
        }

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse PutParagraph (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> localVarResponse = PutParagraphWithHttpInfo(version, name, paragraph, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse > PutParagraphWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutParagraph");
            // verify the required parameter 'paragraph' is set
            if (paragraph == null)
                throw new ApiException(400, "Missing required parameter 'paragraph' when calling WordsApi->PutParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)));
        }

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> PutParagraphAsync (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> localVarResponse = await PutParagraphAsyncWithHttpInfo(version, name, paragraph, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds paragraph to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraph">Paragraph data.</param>
        /// <param name="nodePath">Path to node which contains paragraphs.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>> PutParagraphAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph, string nodePath, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutParagraph");
            // verify the required parameter 'paragraph' is set
            if (paragraph == null)
                throw new ApiException(400, "Missing required parameter 'paragraph' when calling WordsApi->PutParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->PutParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (paragraph != null && paragraph.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(paragraph); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paragraph; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOProtectionDataResponse</returns>
        public AsposeWordsCloudDTOProtectionDataResponse PutProtectDocument (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = PutProtectDocumentWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOProtectionDataResponse > PutProtectDocumentWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutProtectDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutProtectDocument");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->PutProtectDocument");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOProtectionDataResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOProtectionDataResponse> PutProtectDocumentAsync (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOProtectionDataResponse> localVarResponse = await PutProtectDocumentAsyncWithHttpInfo(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Protect document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="protectionRequest">{Aspose.Words.Cloud.DTO.ProtectionRequest} with protection settings.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOProtectionDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>> PutProtectDocumentAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTOProtectionRequest protectionRequest, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutProtectDocument");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutProtectDocument");
            // verify the required parameter 'protectionRequest' is set
            if (protectionRequest == null)
                throw new ApiException(400, "Missing required parameter 'protectionRequest' when calling WordsApi->PutProtectDocument");

            var localVarPath = "/v{version}/words/{name}/protection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (protectionRequest != null && protectionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(protectionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = protectionRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutProtectDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOProtectionDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOProtectionDataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOProtectionDataResponse)));
        }

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public AsposeWordsCloudDTODocumentElementsRunsRunResponse PutRun (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = PutRunWithHttpInfo(version, name, paragraphPath, run, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsRunsRunResponse > PutRunWithHttpInfo (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PutRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling WordsApi->PutRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (run != null && run.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(run); // http body (model) parameter
            }
            else
            {
                localVarPostBody = run; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsRunsRunResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsRunsRunResponse> PutRunAsync (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse> localVarResponse = await PutRunAsyncWithHttpInfo(version, name, paragraphPath, run, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds run to document, returns added paragraph&#39;s data. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="paragraphPath">Path to parent paragraph.</param>
        /// <param name="run">Run data.</param>
        /// <param name="insertBeforeNode">Paragraph will be inserted before node with index. (optional)</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsRunsRunResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>> PutRunAsyncWithHttpInfo (string version, string name, string paragraphPath, AsposeWordsCloudDTODocumentElementsRunsRun run, string insertBeforeNode = null, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutRun");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutRun");
            // verify the required parameter 'paragraphPath' is set
            if (paragraphPath == null)
                throw new ApiException(400, "Missing required parameter 'paragraphPath' when calling WordsApi->PutRun");
            // verify the required parameter 'run' is set
            if (run == null)
                throw new ApiException(400, "Missing required parameter 'run' when calling WordsApi->PutRun");

            var localVarPath = "/v{version}/words/{name}/{paragraphPath}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (paragraphPath != null) localVarPathParams.Add("paragraphPath", Configuration.ApiClient.ParameterToString(paragraphPath)); // path parameter
            if (insertBeforeNode != null) localVarQueryParams.Add("insertBeforeNode", Configuration.ApiClient.ParameterToString(insertBeforeNode)); // query parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (run != null && run.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(run); // http body (model) parameter
            }
            else
            {
                localVarPostBody = run; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsRunsRunResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsRunsRunResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsRunsRunResponse)));
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public AsposeWordsCloudDTODocumentPropertyResponse PutUpdateDocumentProperty (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = PutUpdateDocumentPropertyWithHttpInfo(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentPropertyResponse > PutUpdateDocumentPropertyWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling WordsApi->PutUpdateDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentPropertyAsync (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = await PutUpdateDocumentPropertyAsyncWithHttpInfo(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> PutUpdateDocumentPropertyAsyncWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->PutUpdateDocumentProperty");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling WordsApi->PutUpdateDocumentProperty");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateDocumentProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public AsposeWordsCloudDTODocumentPropertyResponse PutUpdateDocumentProperty_0 (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = PutUpdateDocumentProperty_0WithHttpInfo(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentPropertyResponse > PutUpdateDocumentProperty_0WithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling WordsApi->PutUpdateDocumentProperty_0");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateDocumentProperty_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentPropertyResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentPropertyResponse> PutUpdateDocumentProperty_0Async (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse> localVarResponse = await PutUpdateDocumentProperty_0AsyncWithHttpInfo(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add new or update existing document property. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="propertyName">The property name.</param>
        /// <param name="property">The property with new value.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentPropertyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>> PutUpdateDocumentProperty_0AsyncWithHttpInfo (string version, string name, string propertyName, AsposeWordsCloudDTODocumentProperty property, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling WordsApi->PutUpdateDocumentProperty_0");
            // verify the required parameter 'property' is set
            if (property == null)
                throw new ApiException(400, "Missing required parameter 'property' when calling WordsApi->PutUpdateDocumentProperty_0");

            var localVarPath = "/v{version}/words/{name}/documentProperties/{propertyName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (propertyName != null) localVarPathParams.Add("propertyName", Configuration.ApiClient.ParameterToString(propertyName)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (property != null && property.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(property); // http body (model) parameter
            }
            else
            {
                localVarPostBody = property; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutUpdateDocumentProperty_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentPropertyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentPropertyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentPropertyResponse)));
        }

        /// <summary>
        /// Reject all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public AsposeWordsCloudDTORevisionsModificationResponse RejectAllRevisions (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> localVarResponse = RejectAllRevisionsWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reject all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public ApiResponse< AsposeWordsCloudDTORevisionsModificationResponse > RejectAllRevisionsWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RejectAllRevisions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RejectAllRevisions");

            var localVarPath = "/v{version}/words/{name}/revisions/rejectAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectAllRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTORevisionsModificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTORevisionsModificationResponse)));
        }

        /// <summary>
        /// Reject all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTORevisionsModificationResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTORevisionsModificationResponse> RejectAllRevisionsAsync (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse> localVarResponse = await RejectAllRevisionsAsyncWithHttpInfo(version, name, destFileName, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reject all revisions in document 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTORevisionsModificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>> RejectAllRevisionsAsyncWithHttpInfo (string version, string name, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RejectAllRevisions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RejectAllRevisions");

            var localVarPath = "/v{version}/words/{name}/revisions/rejectAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectAllRevisions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTORevisionsModificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTORevisionsModificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTORevisionsModificationResponse)));
        }

        /// <summary>
        /// Renders drawing object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RenderDrawingObject (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RenderDrawingObjectWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders drawing object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RenderDrawingObjectWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders drawing object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RenderDrawingObjectAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RenderDrawingObjectAsyncWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders drawing object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains drawing objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderDrawingObjectAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderDrawingObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderDrawingObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/drawingObjects/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderDrawingObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders math object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RenderMathObject (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RenderMathObjectWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders math object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RenderMathObjectWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders math object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RenderMathObjectAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RenderMathObjectAsyncWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders math object to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains office math objects.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderMathObjectAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderMathObject");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderMathObject");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/OfficeMathObjects/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderMathObject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders page to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RenderPage (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RenderPageWithHttpInfo(version, name, pageIndex, format, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders page to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RenderPageWithHttpInfo (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderPage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderPage");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling WordsApi->RenderPage");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderPage");

            var localVarPath = "/v{version}/words/{name}/pages/{pageIndex}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders page to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RenderPageAsync (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RenderPageAsyncWithHttpInfo(version, name, pageIndex, format, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders page to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="pageIndex">Comment index</param>
        /// <param name="format">The destination format.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderPageAsyncWithHttpInfo (string version, string name, int? pageIndex, string format, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderPage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderPage");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling WordsApi->RenderPage");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderPage");

            var localVarPath = "/v{version}/words/{name}/pages/{pageIndex}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pageIndex != null) localVarPathParams.Add("pageIndex", Configuration.ApiClient.ParameterToString(pageIndex)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders paragraph to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RenderParagraph (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RenderParagraphWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders paragraph to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RenderParagraphWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders paragraph to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RenderParagraphAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RenderParagraphAsyncWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders paragraph to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains paragraphs.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderParagraphAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderParagraph");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderParagraph");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/paragraphs/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderParagraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders table to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RenderTable (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RenderTableWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders table to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse< System.IO.Stream > RenderTableWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderTable");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Renders table to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RenderTableAsync (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RenderTableAsyncWithHttpInfo(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders table to specified format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The file name.</param>
        /// <param name="format">The destination format.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <param name="fontsLocation">Folder in filestorage with custom fonts. (optional)</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RenderTableAsyncWithHttpInfo (string version, string name, string format, int? index, string nodePath, string storage = null, string folder = null, string loadEncoding = null, string password = null, string fontsLocation = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->RenderTable");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->RenderTable");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->RenderTable");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->RenderTable");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->RenderTable");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (format != null) localVarQueryParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (fontsLocation != null) localVarQueryParams.Add("fontsLocation", Configuration.ApiClient.ParameterToString(fontsLocation)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenderTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (System.IO.Stream) Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Resets font&#39;s cache. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public AsposeWordsCloudDTOCommonSaaSposeResponse ResetCache (string version)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = ResetCacheWithHttpInfo(version);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resets font&#39;s cache. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOCommonSaaSposeResponse > ResetCacheWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->ResetCache");

            var localVarPath = "/v{version}/words/fonts/cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Resets font&#39;s cache. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of AsposeWordsCloudDTOCommonSaaSposeResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOCommonSaaSposeResponse> ResetCacheAsync (string version)
        {
             ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse> localVarResponse = await ResetCacheAsyncWithHttpInfo(version);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resets font&#39;s cache. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOCommonSaaSposeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>> ResetCacheAsyncWithHttpInfo (string version)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->ResetCache");

            var localVarPath = "/v{version}/words/fonts/cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOCommonSaaSposeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOCommonSaaSposeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOCommonSaaSposeResponse)));
        }

        /// <summary>
        /// Search text in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTOSearchSearchResponse</returns>
        public AsposeWordsCloudDTOSearchSearchResponse Search (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOSearchSearchResponse> localVarResponse = SearchWithHttpInfo(version, name, pattern, storage, folder, loadEncoding, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search text in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTOSearchSearchResponse</returns>
        public ApiResponse< AsposeWordsCloudDTOSearchSearchResponse > SearchWithHttpInfo (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->Search");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->Search");

            var localVarPath = "/v{version}/words/{name}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSearchSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSearchSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSearchSearchResponse)));
        }

        /// <summary>
        /// Search text in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTOSearchSearchResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTOSearchSearchResponse> SearchAsync (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTOSearchSearchResponse> localVarResponse = await SearchAsyncWithHttpInfo(version, name, pattern, storage, folder, loadEncoding, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search text in document. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="pattern">The regular expression used to find matches. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTOSearchSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTOSearchSearchResponse>> SearchAsyncWithHttpInfo (string version, string name, string pattern = null, string storage = null, string folder = null, string loadEncoding = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->Search");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->Search");

            var localVarPath = "/v{version}/words/{name}/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pattern != null) localVarQueryParams.Add("pattern", Configuration.ApiClient.ParameterToString(pattern)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTOSearchSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTOSearchSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTOSearchSearchResponse)));
        }

        /// <summary>
        /// Updates border properties. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public AsposeWordsCloudDTODocumentElementsCommonBorderResponse UpdateBorder (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = UpdateBorderWithHttpInfo(version, name, borderProperties, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates border properties. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsCommonBorderResponse > UpdateBorderWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'borderProperties' is set
            if (borderProperties == null)
                throw new ApiException(400, "Missing required parameter 'borderProperties' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (borderProperties != null && borderProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(borderProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = borderProperties; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Updates border properties. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsCommonBorderResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> UpdateBorderAsync (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> localVarResponse = await UpdateBorderAsyncWithHttpInfo(version, name, borderProperties, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates border properties. &#39;nodePath&#39; should refer to node with cell or row
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="borderProperties">Border properties</param>
        /// <param name="nodePath">Path to node with border(node should be cell or row).</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsCommonBorderResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>> UpdateBorderAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties, string nodePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'borderProperties' is set
            if (borderProperties == null)
                throw new ApiException(400, "Missing required parameter 'borderProperties' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->UpdateBorder");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateBorder");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/borders/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (borderProperties != null && borderProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(borderProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = borderProperties; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBorder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsCommonBorderResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsCommonBorderResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsCommonBorderResponse)));
        }

        /// <summary>
        /// Update page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse UpdateSectionPageSetup (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> localVarResponse = UpdateSectionPageSetupWithHttpInfo(version, name, sectionIndex, pageSetup, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse > UpdateSectionPageSetupWithHttpInfo (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'pageSetup' is set
            if (pageSetup == null)
                throw new ApiException(400, "Missing required parameter 'pageSetup' when calling WordsApi->UpdateSectionPageSetup");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/pageSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSectionPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)));
        }

        /// <summary>
        /// Update page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> UpdateSectionPageSetupAsync (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> localVarResponse = await UpdateSectionPageSetupAsyncWithHttpInfo(version, name, sectionIndex, pageSetup, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update page setup of section. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="sectionIndex">Section index</param>
        /// <param name="pageSetup">Page setup properties dto</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>> UpdateSectionPageSetupAsyncWithHttpInfo (string version, string name, int? sectionIndex, AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'sectionIndex' is set
            if (sectionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sectionIndex' when calling WordsApi->UpdateSectionPageSetup");
            // verify the required parameter 'pageSetup' is set
            if (pageSetup == null)
                throw new ApiException(400, "Missing required parameter 'pageSetup' when calling WordsApi->UpdateSectionPageSetup");

            var localVarPath = "/v{version}/words/{name}/sections/{sectionIndex}/pageSetup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (sectionIndex != null) localVarPathParams.Add("sectionIndex", Configuration.ApiClient.ParameterToString(sectionIndex)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (pageSetup != null && pageSetup.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pageSetup); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pageSetup; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSectionPageSetup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse)));
        }

        /// <summary>
        /// Updates a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse UpdateTableCellFormat (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> localVarResponse = UpdateTableCellFormatWithHttpInfo(version, name, format, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse > UpdateTableCellFormatWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableCellFormat");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}/cellformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableCellFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)));
        }

        /// <summary>
        /// Updates a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> UpdateTableCellFormatAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> localVarResponse = await UpdateTableCellFormatAsyncWithHttpInfo(version, name, format, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a table cell format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">The properties.</param>
        /// <param name="tableRowPath">Path to table row.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>> UpdateTableCellFormatAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format, string tableRowPath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'tableRowPath' is set
            if (tableRowPath == null)
                throw new ApiException(400, "Missing required parameter 'tableRowPath' when calling WordsApi->UpdateTableCellFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableCellFormat");

            var localVarPath = "/v{version}/words/{name}/{tableRowPath}/cells/{index}/cellformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tableRowPath != null) localVarPathParams.Add("tableRowPath", Configuration.ApiClient.ParameterToString(tableRowPath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableCellFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse)));
        }

        /// <summary>
        /// Updates a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse UpdateTableProperties (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> localVarResponse = UpdateTablePropertiesWithHttpInfo(version, name, properties, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse > UpdateTablePropertiesWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new ApiException(400, "Missing required parameter 'properties' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->UpdateTableProperties");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (properties != null && properties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = properties; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)));
        }

        /// <summary>
        /// Updates a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> UpdateTablePropertiesAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> localVarResponse = await UpdateTablePropertiesAsyncWithHttpInfo(version, name, properties, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a table properties. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="properties">The properties.</param>
        /// <param name="index">Object index</param>
        /// <param name="nodePath">Path to node, which contains tables.</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>> UpdateTablePropertiesAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties, int? index, string nodePath, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'properties' is set
            if (properties == null)
                throw new ApiException(400, "Missing required parameter 'properties' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableProperties");
            // verify the required parameter 'nodePath' is set
            if (nodePath == null)
                throw new ApiException(400, "Missing required parameter 'nodePath' when calling WordsApi->UpdateTableProperties");

            var localVarPath = "/v{version}/words/{name}/{nodePath}/tables/{index}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (nodePath != null) localVarPathParams.Add("nodePath", Configuration.ApiClient.ParameterToString(nodePath)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (properties != null && properties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(properties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = properties; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse)));
        }

        /// <summary>
        /// Updates a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse UpdateTableRowFormat (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> localVarResponse = UpdateTableRowFormatWithHttpInfo(version, name, format, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>ApiResponse of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public ApiResponse< AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse > UpdateTableRowFormatWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableRowFormat");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}/rowformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableRowFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)));
        }

        /// <summary>
        /// Updates a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse</returns>
        public async System.Threading.Tasks.Task<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> UpdateTableRowFormatAsync (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
             ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> localVarResponse = await UpdateTableRowFormatAsyncWithHttpInfo(version, name, format, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a table row format. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Api version.</param>
        /// <param name="name">The document name.</param>
        /// <param name="format">Table row format.</param>
        /// <param name="tablePath">Path to table.</param>
        /// <param name="index">Object index</param>
        /// <param name="destFileName">Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document. (optional)</param>
        /// <param name="storage">File storage, which have to be used. (optional)</param>
        /// <param name="folder">Original document folder. (optional)</param>
        /// <param name="loadEncoding">Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML. (optional)</param>
        /// <param name="revisionAuthor">Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions. (optional)</param>
        /// <param name="revisionDateTime">The date and time to use for revisions. (optional)</param>
        /// <param name="password">Password for opening an encrypted document. (optional)</param>
        /// <returns>Task of ApiResponse (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>> UpdateTableRowFormatAsyncWithHttpInfo (string version, string name, AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format, string tablePath, int? index, string destFileName = null, string storage = null, string folder = null, string loadEncoding = null, string revisionAuthor = null, string revisionDateTime = null, string password = null)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'tablePath' is set
            if (tablePath == null)
                throw new ApiException(400, "Missing required parameter 'tablePath' when calling WordsApi->UpdateTableRowFormat");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling WordsApi->UpdateTableRowFormat");

            var localVarPath = "/v{version}/words/{name}/{tablePath}/rows/{index}/rowformat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tablePath != null) localVarPathParams.Add("tablePath", Configuration.ApiClient.ParameterToString(tablePath)); // path parameter
            if (index != null) localVarPathParams.Add("index", Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (destFileName != null) localVarQueryParams.Add("destFileName", Configuration.ApiClient.ParameterToString(destFileName)); // query parameter
            if (storage != null) localVarQueryParams.Add("storage", Configuration.ApiClient.ParameterToString(storage)); // query parameter
            if (folder != null) localVarQueryParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // query parameter
            if (loadEncoding != null) localVarQueryParams.Add("loadEncoding", Configuration.ApiClient.ParameterToString(loadEncoding)); // query parameter
            if (revisionAuthor != null) localVarQueryParams.Add("revisionAuthor", Configuration.ApiClient.ParameterToString(revisionAuthor)); // query parameter
            if (revisionDateTime != null) localVarQueryParams.Add("revisionDateTime", Configuration.ApiClient.ParameterToString(revisionDateTime)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (format != null && format.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(format); // http body (model) parameter
            }
            else
            {
                localVarPostBody = format; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTableRowFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse)));
        }

    }
}
