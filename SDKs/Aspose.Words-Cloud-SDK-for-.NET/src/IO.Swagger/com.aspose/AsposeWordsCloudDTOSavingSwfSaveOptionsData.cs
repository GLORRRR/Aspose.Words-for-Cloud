/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for swf save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingSwfSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingSwfSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingSwfSaveOptionsData" /> class.
        /// </summary>
        /// <param name="AllowReadMode">Allows to enable read mode.</param>
        /// <param name="BookmarksOutlineLevel">Specifies the level in the SWF document outline at which to display Word bookmarks.</param>
        /// <param name="Compressed">Specifies whether the generated SWF document should be compressed or not.</param>
        /// <param name="EnableContextMenu">Enable/disable context menu.</param>
        /// <param name="ExpandedOutlineLevels">Specifies how many levels in the SWF document outline to show expanded when the SWF file is viewed.</param>
        /// <param name="HeadingsOutlineLevels">Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the SWF document outline.</param>
        /// <param name="LeftPaneControlFlags">Control flags used to configure appearance of left panel of SWF viewer.</param>
        /// <param name="LogoImageBytes">Image that will be displayed as logo in the top right corner of the viewer as string in base64 format.</param>
        /// <param name="LogoLink">Specifies the full hyperlink address for a logo.</param>
        /// <param name="OutlineOptions">Allows to specify outline options.</param>
        /// <param name="ShowBottomPane">Show/hide bottom pane.</param>
        /// <param name="ShowFullScreen">Show/hide fullscreen button.</param>
        /// <param name="ShowLeftPane">Show/hide left pane.</param>
        /// <param name="ShowPageBorder">Specifies whether border around pages should be shown.</param>
        /// <param name="ShowPageStepper">Show/hide page stepper.</param>
        /// <param name="ShowSearch">Show/hide search section.</param>
        /// <param name="ShowTopPane">Show/hide whole top pane.</param>
        /// <param name="StartOpenLeftPane">Start with opened left pane.</param>
        /// <param name="ToolTipsFontName">Specifies a font used for tooltips in SWF viewer.</param>
        /// <param name="TopPaneControlFlags">Control flags used to configure appearance of top panel of SWF viewer.</param>
        /// <param name="ViewerIncluded">Specifies whether the generated SWF document should include the integrated document viewer or not.</param>
        public AsposeWordsCloudDTOSavingSwfSaveOptionsData(bool? AllowReadMode = default(bool?), int? BookmarksOutlineLevel = default(int?), bool? Compressed = default(bool?), bool? EnableContextMenu = default(bool?), int? ExpandedOutlineLevels = default(int?), int? HeadingsOutlineLevels = default(int?), string LeftPaneControlFlags = default(string), string LogoImageBytes = default(string), string LogoLink = default(string), AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions = default(AsposeWordsCloudDTOSavingOutlineOptionsData), bool? ShowBottomPane = default(bool?), bool? ShowFullScreen = default(bool?), bool? ShowLeftPane = default(bool?), bool? ShowPageBorder = default(bool?), bool? ShowPageStepper = default(bool?), bool? ShowSearch = default(bool?), bool? ShowTopPane = default(bool?), bool? StartOpenLeftPane = default(bool?), string ToolTipsFontName = default(string), string TopPaneControlFlags = default(string), bool? ViewerIncluded = default(bool?))
        {
            this.AllowReadMode = AllowReadMode;
            this.BookmarksOutlineLevel = BookmarksOutlineLevel;
            this.Compressed = Compressed;
            this.EnableContextMenu = EnableContextMenu;
            this.ExpandedOutlineLevels = ExpandedOutlineLevels;
            this.HeadingsOutlineLevels = HeadingsOutlineLevels;
            this.LeftPaneControlFlags = LeftPaneControlFlags;
            this.LogoImageBytes = LogoImageBytes;
            this.LogoLink = LogoLink;
            this.OutlineOptions = OutlineOptions;
            this.ShowBottomPane = ShowBottomPane;
            this.ShowFullScreen = ShowFullScreen;
            this.ShowLeftPane = ShowLeftPane;
            this.ShowPageBorder = ShowPageBorder;
            this.ShowPageStepper = ShowPageStepper;
            this.ShowSearch = ShowSearch;
            this.ShowTopPane = ShowTopPane;
            this.StartOpenLeftPane = StartOpenLeftPane;
            this.ToolTipsFontName = ToolTipsFontName;
            this.TopPaneControlFlags = TopPaneControlFlags;
            this.ViewerIncluded = ViewerIncluded;
        }
        
        /// <summary>
        /// Allows to enable read mode
        /// </summary>
        /// <value>Allows to enable read mode</value>
        [DataMember(Name="AllowReadMode", EmitDefaultValue=false)]
        public bool? AllowReadMode { get; set; }

        /// <summary>
        /// Specifies the level in the SWF document outline at which to display Word bookmarks
        /// </summary>
        /// <value>Specifies the level in the SWF document outline at which to display Word bookmarks</value>
        [DataMember(Name="BookmarksOutlineLevel", EmitDefaultValue=false)]
        public int? BookmarksOutlineLevel { get; set; }

        /// <summary>
        /// Specifies whether the generated SWF document should be compressed or not
        /// </summary>
        /// <value>Specifies whether the generated SWF document should be compressed or not</value>
        [DataMember(Name="Compressed", EmitDefaultValue=false)]
        public bool? Compressed { get; set; }

        /// <summary>
        /// Enable/disable context menu
        /// </summary>
        /// <value>Enable/disable context menu</value>
        [DataMember(Name="EnableContextMenu", EmitDefaultValue=false)]
        public bool? EnableContextMenu { get; set; }

        /// <summary>
        /// Specifies how many levels in the SWF document outline to show expanded when the SWF file is viewed
        /// </summary>
        /// <value>Specifies how many levels in the SWF document outline to show expanded when the SWF file is viewed</value>
        [DataMember(Name="ExpandedOutlineLevels", EmitDefaultValue=false)]
        public int? ExpandedOutlineLevels { get; set; }

        /// <summary>
        /// Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the SWF document outline
        /// </summary>
        /// <value>Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the SWF document outline</value>
        [DataMember(Name="HeadingsOutlineLevels", EmitDefaultValue=false)]
        public int? HeadingsOutlineLevels { get; set; }

        /// <summary>
        /// Control flags used to configure appearance of left panel of SWF viewer
        /// </summary>
        /// <value>Control flags used to configure appearance of left panel of SWF viewer</value>
        [DataMember(Name="LeftPaneControlFlags", EmitDefaultValue=false)]
        public string LeftPaneControlFlags { get; set; }

        /// <summary>
        /// Image that will be displayed as logo in the top right corner of the viewer as string in base64 format
        /// </summary>
        /// <value>Image that will be displayed as logo in the top right corner of the viewer as string in base64 format</value>
        [DataMember(Name="LogoImageBytes", EmitDefaultValue=false)]
        public string LogoImageBytes { get; set; }

        /// <summary>
        /// Specifies the full hyperlink address for a logo
        /// </summary>
        /// <value>Specifies the full hyperlink address for a logo</value>
        [DataMember(Name="LogoLink", EmitDefaultValue=false)]
        public string LogoLink { get; set; }

        /// <summary>
        /// Allows to specify outline options
        /// </summary>
        /// <value>Allows to specify outline options</value>
        [DataMember(Name="OutlineOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions { get; set; }

        /// <summary>
        /// Show/hide bottom pane
        /// </summary>
        /// <value>Show/hide bottom pane</value>
        [DataMember(Name="ShowBottomPane", EmitDefaultValue=false)]
        public bool? ShowBottomPane { get; set; }

        /// <summary>
        /// Show/hide fullscreen button
        /// </summary>
        /// <value>Show/hide fullscreen button</value>
        [DataMember(Name="ShowFullScreen", EmitDefaultValue=false)]
        public bool? ShowFullScreen { get; set; }

        /// <summary>
        /// Show/hide left pane
        /// </summary>
        /// <value>Show/hide left pane</value>
        [DataMember(Name="ShowLeftPane", EmitDefaultValue=false)]
        public bool? ShowLeftPane { get; set; }

        /// <summary>
        /// Specifies whether border around pages should be shown
        /// </summary>
        /// <value>Specifies whether border around pages should be shown</value>
        [DataMember(Name="ShowPageBorder", EmitDefaultValue=false)]
        public bool? ShowPageBorder { get; set; }

        /// <summary>
        /// Show/hide page stepper
        /// </summary>
        /// <value>Show/hide page stepper</value>
        [DataMember(Name="ShowPageStepper", EmitDefaultValue=false)]
        public bool? ShowPageStepper { get; set; }

        /// <summary>
        /// Show/hide search section
        /// </summary>
        /// <value>Show/hide search section</value>
        [DataMember(Name="ShowSearch", EmitDefaultValue=false)]
        public bool? ShowSearch { get; set; }

        /// <summary>
        /// Show/hide whole top pane
        /// </summary>
        /// <value>Show/hide whole top pane</value>
        [DataMember(Name="ShowTopPane", EmitDefaultValue=false)]
        public bool? ShowTopPane { get; set; }

        /// <summary>
        /// Start with opened left pane
        /// </summary>
        /// <value>Start with opened left pane</value>
        [DataMember(Name="StartOpenLeftPane", EmitDefaultValue=false)]
        public bool? StartOpenLeftPane { get; set; }

        /// <summary>
        /// Specifies a font used for tooltips in SWF viewer
        /// </summary>
        /// <value>Specifies a font used for tooltips in SWF viewer</value>
        [DataMember(Name="ToolTipsFontName", EmitDefaultValue=false)]
        public string ToolTipsFontName { get; set; }

        /// <summary>
        /// Control flags used to configure appearance of top panel of SWF viewer
        /// </summary>
        /// <value>Control flags used to configure appearance of top panel of SWF viewer</value>
        [DataMember(Name="TopPaneControlFlags", EmitDefaultValue=false)]
        public string TopPaneControlFlags { get; set; }

        /// <summary>
        /// Specifies whether the generated SWF document should include the integrated document viewer or not
        /// </summary>
        /// <value>Specifies whether the generated SWF document should include the integrated document viewer or not</value>
        [DataMember(Name="ViewerIncluded", EmitDefaultValue=false)]
        public bool? ViewerIncluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingSwfSaveOptionsData {\n");
            sb.Append("  AllowReadMode: ").Append(AllowReadMode).Append("\n");
            sb.Append("  BookmarksOutlineLevel: ").Append(BookmarksOutlineLevel).Append("\n");
            sb.Append("  Compressed: ").Append(Compressed).Append("\n");
            sb.Append("  EnableContextMenu: ").Append(EnableContextMenu).Append("\n");
            sb.Append("  ExpandedOutlineLevels: ").Append(ExpandedOutlineLevels).Append("\n");
            sb.Append("  HeadingsOutlineLevels: ").Append(HeadingsOutlineLevels).Append("\n");
            sb.Append("  LeftPaneControlFlags: ").Append(LeftPaneControlFlags).Append("\n");
            sb.Append("  LogoImageBytes: ").Append(LogoImageBytes).Append("\n");
            sb.Append("  LogoLink: ").Append(LogoLink).Append("\n");
            sb.Append("  OutlineOptions: ").Append(OutlineOptions).Append("\n");
            sb.Append("  ShowBottomPane: ").Append(ShowBottomPane).Append("\n");
            sb.Append("  ShowFullScreen: ").Append(ShowFullScreen).Append("\n");
            sb.Append("  ShowLeftPane: ").Append(ShowLeftPane).Append("\n");
            sb.Append("  ShowPageBorder: ").Append(ShowPageBorder).Append("\n");
            sb.Append("  ShowPageStepper: ").Append(ShowPageStepper).Append("\n");
            sb.Append("  ShowSearch: ").Append(ShowSearch).Append("\n");
            sb.Append("  ShowTopPane: ").Append(ShowTopPane).Append("\n");
            sb.Append("  StartOpenLeftPane: ").Append(StartOpenLeftPane).Append("\n");
            sb.Append("  ToolTipsFontName: ").Append(ToolTipsFontName).Append("\n");
            sb.Append("  TopPaneControlFlags: ").Append(TopPaneControlFlags).Append("\n");
            sb.Append("  ViewerIncluded: ").Append(ViewerIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingSwfSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingSwfSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingSwfSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingSwfSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AllowReadMode == other.AllowReadMode ||
                    this.AllowReadMode != null &&
                    this.AllowReadMode.Equals(other.AllowReadMode)
                ) && 
                (
                    this.BookmarksOutlineLevel == other.BookmarksOutlineLevel ||
                    this.BookmarksOutlineLevel != null &&
                    this.BookmarksOutlineLevel.Equals(other.BookmarksOutlineLevel)
                ) && 
                (
                    this.Compressed == other.Compressed ||
                    this.Compressed != null &&
                    this.Compressed.Equals(other.Compressed)
                ) && 
                (
                    this.EnableContextMenu == other.EnableContextMenu ||
                    this.EnableContextMenu != null &&
                    this.EnableContextMenu.Equals(other.EnableContextMenu)
                ) && 
                (
                    this.ExpandedOutlineLevels == other.ExpandedOutlineLevels ||
                    this.ExpandedOutlineLevels != null &&
                    this.ExpandedOutlineLevels.Equals(other.ExpandedOutlineLevels)
                ) && 
                (
                    this.HeadingsOutlineLevels == other.HeadingsOutlineLevels ||
                    this.HeadingsOutlineLevels != null &&
                    this.HeadingsOutlineLevels.Equals(other.HeadingsOutlineLevels)
                ) && 
                (
                    this.LeftPaneControlFlags == other.LeftPaneControlFlags ||
                    this.LeftPaneControlFlags != null &&
                    this.LeftPaneControlFlags.Equals(other.LeftPaneControlFlags)
                ) && 
                (
                    this.LogoImageBytes == other.LogoImageBytes ||
                    this.LogoImageBytes != null &&
                    this.LogoImageBytes.Equals(other.LogoImageBytes)
                ) && 
                (
                    this.LogoLink == other.LogoLink ||
                    this.LogoLink != null &&
                    this.LogoLink.Equals(other.LogoLink)
                ) && 
                (
                    this.OutlineOptions == other.OutlineOptions ||
                    this.OutlineOptions != null &&
                    this.OutlineOptions.Equals(other.OutlineOptions)
                ) && 
                (
                    this.ShowBottomPane == other.ShowBottomPane ||
                    this.ShowBottomPane != null &&
                    this.ShowBottomPane.Equals(other.ShowBottomPane)
                ) && 
                (
                    this.ShowFullScreen == other.ShowFullScreen ||
                    this.ShowFullScreen != null &&
                    this.ShowFullScreen.Equals(other.ShowFullScreen)
                ) && 
                (
                    this.ShowLeftPane == other.ShowLeftPane ||
                    this.ShowLeftPane != null &&
                    this.ShowLeftPane.Equals(other.ShowLeftPane)
                ) && 
                (
                    this.ShowPageBorder == other.ShowPageBorder ||
                    this.ShowPageBorder != null &&
                    this.ShowPageBorder.Equals(other.ShowPageBorder)
                ) && 
                (
                    this.ShowPageStepper == other.ShowPageStepper ||
                    this.ShowPageStepper != null &&
                    this.ShowPageStepper.Equals(other.ShowPageStepper)
                ) && 
                (
                    this.ShowSearch == other.ShowSearch ||
                    this.ShowSearch != null &&
                    this.ShowSearch.Equals(other.ShowSearch)
                ) && 
                (
                    this.ShowTopPane == other.ShowTopPane ||
                    this.ShowTopPane != null &&
                    this.ShowTopPane.Equals(other.ShowTopPane)
                ) && 
                (
                    this.StartOpenLeftPane == other.StartOpenLeftPane ||
                    this.StartOpenLeftPane != null &&
                    this.StartOpenLeftPane.Equals(other.StartOpenLeftPane)
                ) && 
                (
                    this.ToolTipsFontName == other.ToolTipsFontName ||
                    this.ToolTipsFontName != null &&
                    this.ToolTipsFontName.Equals(other.ToolTipsFontName)
                ) && 
                (
                    this.TopPaneControlFlags == other.TopPaneControlFlags ||
                    this.TopPaneControlFlags != null &&
                    this.TopPaneControlFlags.Equals(other.TopPaneControlFlags)
                ) && 
                (
                    this.ViewerIncluded == other.ViewerIncluded ||
                    this.ViewerIncluded != null &&
                    this.ViewerIncluded.Equals(other.ViewerIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AllowReadMode != null)
                    hash = hash * 59 + this.AllowReadMode.GetHashCode();
                if (this.BookmarksOutlineLevel != null)
                    hash = hash * 59 + this.BookmarksOutlineLevel.GetHashCode();
                if (this.Compressed != null)
                    hash = hash * 59 + this.Compressed.GetHashCode();
                if (this.EnableContextMenu != null)
                    hash = hash * 59 + this.EnableContextMenu.GetHashCode();
                if (this.ExpandedOutlineLevels != null)
                    hash = hash * 59 + this.ExpandedOutlineLevels.GetHashCode();
                if (this.HeadingsOutlineLevels != null)
                    hash = hash * 59 + this.HeadingsOutlineLevels.GetHashCode();
                if (this.LeftPaneControlFlags != null)
                    hash = hash * 59 + this.LeftPaneControlFlags.GetHashCode();
                if (this.LogoImageBytes != null)
                    hash = hash * 59 + this.LogoImageBytes.GetHashCode();
                if (this.LogoLink != null)
                    hash = hash * 59 + this.LogoLink.GetHashCode();
                if (this.OutlineOptions != null)
                    hash = hash * 59 + this.OutlineOptions.GetHashCode();
                if (this.ShowBottomPane != null)
                    hash = hash * 59 + this.ShowBottomPane.GetHashCode();
                if (this.ShowFullScreen != null)
                    hash = hash * 59 + this.ShowFullScreen.GetHashCode();
                if (this.ShowLeftPane != null)
                    hash = hash * 59 + this.ShowLeftPane.GetHashCode();
                if (this.ShowPageBorder != null)
                    hash = hash * 59 + this.ShowPageBorder.GetHashCode();
                if (this.ShowPageStepper != null)
                    hash = hash * 59 + this.ShowPageStepper.GetHashCode();
                if (this.ShowSearch != null)
                    hash = hash * 59 + this.ShowSearch.GetHashCode();
                if (this.ShowTopPane != null)
                    hash = hash * 59 + this.ShowTopPane.GetHashCode();
                if (this.StartOpenLeftPane != null)
                    hash = hash * 59 + this.StartOpenLeftPane.GetHashCode();
                if (this.ToolTipsFontName != null)
                    hash = hash * 59 + this.ToolTipsFontName.GetHashCode();
                if (this.TopPaneControlFlags != null)
                    hash = hash * 59 + this.TopPaneControlFlags.GetHashCode();
                if (this.ViewerIncluded != null)
                    hash = hash * 59 + this.ViewerIncluded.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
