/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for html save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingHtmlSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingHtmlSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.    Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
        /// </summary>
        /// <value>Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.    Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HtmlVersionEnum
        {
            
            /// <summary>
            /// Enum Xhtml for "Xhtml"
            /// </summary>
            [EnumMember(Value = "Xhtml")]
            Xhtml,
            
            /// <summary>
            /// Enum Html5 for "Html5"
            /// </summary>
            [EnumMember(Value = "Html5")]
            Html5
        }

        /// <summary>
        /// Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
        /// </summary>
        /// <value>Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OfficeMathOutputModeEnum
        {
            
            /// <summary>
            /// Enum Image for "Image"
            /// </summary>
            [EnumMember(Value = "Image")]
            Image,
            
            /// <summary>
            /// Enum MathML for "MathML"
            /// </summary>
            [EnumMember(Value = "MathML")]
            MathML,
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text
        }

        /// <summary>
        /// Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.    Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.
        /// </summary>
        /// <value>Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.    Default value is Aspose.Words.Saving.HtmlVersion.Xhtml.</value>
        [DataMember(Name="HtmlVersion", EmitDefaultValue=false)]
        public HtmlVersionEnum? HtmlVersion { get; set; }
        /// <summary>
        /// Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.
        /// </summary>
        /// <value>Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image.</value>
        [DataMember(Name="OfficeMathOutputMode", EmitDefaultValue=false)]
        public OfficeMathOutputModeEnum? OfficeMathOutputMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingHtmlSaveOptionsData" /> class.
        /// </summary>
        /// <param name="PrettyFormat">Specifies whether or not use pretty formats output.</param>
        /// <param name="AllowNegativeIndent">Specifies whether negative left and right indents of paragraphs are allowed (not normalized).</param>
        /// <param name="CssStyleSheetFileName">Specifies the name of the CSS file written when the document is exported to HTML.</param>
        /// <param name="CssStyleSheetType">Specifies how CSS styles are exported.</param>
        /// <param name="DocumentSplitCriteria">Specifies how the document should be split when saving.</param>
        /// <param name="DocumentSplitHeadingLevel">Specifies the maximum level of headings at which to split the document.</param>
        /// <param name="Encoding">Specifies the encoding to use when exporting.</param>
        /// <param name="ExportDocumentProperties">Specifies whether to export built-in and custom document properties.</param>
        /// <param name="ExportFontsAsBase64">Specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false..</param>
        /// <param name="ExportFontResources">Specifies whether font resources should be exported.</param>
        /// <param name="ExportHeadersFootersMode">Specifies how headers and footers are output.</param>
        /// <param name="ExportImagesAsBase64">Specifies whether images are saved in Base64 format.</param>
        /// <param name="ExportLanguageInformation">Specifies whether language information is exported.</param>
        /// <param name="ExportListLabels">Controls how list labels are output.</param>
        /// <param name="ExportMetafileAsRaster">Specifies whether to convert metafiles into raster images when exporting.</param>
        /// <param name="ExportOriginalUrlForLinkedImages">Specifies whether original URL should be used as the URL of the linked images.  Default value is false..</param>
        /// <param name="ExportPageMargins">Specifies whether page margins is exported to HTML, MHTML or EPUB.  Default is false..</param>
        /// <param name="ExportPageSetup">Specifies whether page setup is exported.</param>
        /// <param name="ExportRelativeFontSize">Specifies whether font sizes should be output in relative units when saving.</param>
        /// <param name="ExportRoundtripInformation">Specifies whether to write the roundtrip information when saving to HTML  Default value is true..</param>
        /// <param name="ExportTextBoxAsSvg">Controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.  &lt;remarks&gt;    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.  &lt;/remarks&gt;.</param>
        /// <param name="ExportTextInputFormFieldAsText">Controls how text input form fields are saved.</param>
        /// <param name="ExportTocPageNumbers">Specifies whether to write page numbers to table of contents when saving.</param>
        /// <param name="ExportXhtmlTransitional">Specifies whether to write the DOCTYPE declaration when saving.</param>
        /// <param name="FontsFolder">Specifies the physical folder where fonts are saved when exporting a document.</param>
        /// <param name="FontsFolderAlias">Specifies the name of the folder used to construct font URIs.</param>
        /// <param name="FontResourcesSubsettingSizeThreshold">Controls which font resources need subsetting when saving.</param>
        /// <param name="HtmlVersion">Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.    Default value is Aspose.Words.Saving.HtmlVersion.Xhtml..</param>
        /// <param name="ImagesFolder">Specifies the physical folder where images are saved when exporting a document.</param>
        /// <param name="ImagesFolderAlias">Specifies the name of the folder used to construct image URIs.</param>
        /// <param name="ImageResolution">Specifies the output resolution for images when exporting.</param>
        /// <param name="OfficeMathOutputMode">Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.  Default value is HtmlOfficeMathOutputMode.Image..</param>
        /// <param name="ResourceFolder">Specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string..</param>
        /// <param name="ResourceFolderAlias">Specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string..</param>
        /// <param name="ScaleImageToShapeSize">Specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting.</param>
        /// <param name="TableWidthOutputMode">Controls how table, row and cell widths are exported.</param>
        /// <param name="ExportDropDownFormFieldAsText">Controls how drop-down form fields are saved to HTML.  Default value is false..</param>
        public AsposeWordsCloudDTOSavingHtmlSaveOptionsData(bool? PrettyFormat = default(bool?), bool? AllowNegativeIndent = default(bool?), string CssStyleSheetFileName = default(string), string CssStyleSheetType = default(string), string DocumentSplitCriteria = default(string), int? DocumentSplitHeadingLevel = default(int?), string Encoding = default(string), bool? ExportDocumentProperties = default(bool?), bool? ExportFontsAsBase64 = default(bool?), bool? ExportFontResources = default(bool?), string ExportHeadersFootersMode = default(string), bool? ExportImagesAsBase64 = default(bool?), bool? ExportLanguageInformation = default(bool?), string ExportListLabels = default(string), bool? ExportMetafileAsRaster = default(bool?), bool? ExportOriginalUrlForLinkedImages = default(bool?), bool? ExportPageMargins = default(bool?), bool? ExportPageSetup = default(bool?), bool? ExportRelativeFontSize = default(bool?), bool? ExportRoundtripInformation = default(bool?), bool? ExportTextBoxAsSvg = default(bool?), bool? ExportTextInputFormFieldAsText = default(bool?), bool? ExportTocPageNumbers = default(bool?), bool? ExportXhtmlTransitional = default(bool?), string FontsFolder = default(string), string FontsFolderAlias = default(string), int? FontResourcesSubsettingSizeThreshold = default(int?), HtmlVersionEnum? HtmlVersion = default(HtmlVersionEnum?), string ImagesFolder = default(string), string ImagesFolderAlias = default(string), int? ImageResolution = default(int?), OfficeMathOutputModeEnum? OfficeMathOutputMode = default(OfficeMathOutputModeEnum?), string ResourceFolder = default(string), string ResourceFolderAlias = default(string), bool? ScaleImageToShapeSize = default(bool?), string TableWidthOutputMode = default(string), bool? ExportDropDownFormFieldAsText = default(bool?))
        {
            this.PrettyFormat = PrettyFormat;
            this.AllowNegativeIndent = AllowNegativeIndent;
            this.CssStyleSheetFileName = CssStyleSheetFileName;
            this.CssStyleSheetType = CssStyleSheetType;
            this.DocumentSplitCriteria = DocumentSplitCriteria;
            this.DocumentSplitHeadingLevel = DocumentSplitHeadingLevel;
            this.Encoding = Encoding;
            this.ExportDocumentProperties = ExportDocumentProperties;
            this.ExportFontsAsBase64 = ExportFontsAsBase64;
            this.ExportFontResources = ExportFontResources;
            this.ExportHeadersFootersMode = ExportHeadersFootersMode;
            this.ExportImagesAsBase64 = ExportImagesAsBase64;
            this.ExportLanguageInformation = ExportLanguageInformation;
            this.ExportListLabels = ExportListLabels;
            this.ExportMetafileAsRaster = ExportMetafileAsRaster;
            this.ExportOriginalUrlForLinkedImages = ExportOriginalUrlForLinkedImages;
            this.ExportPageMargins = ExportPageMargins;
            this.ExportPageSetup = ExportPageSetup;
            this.ExportRelativeFontSize = ExportRelativeFontSize;
            this.ExportRoundtripInformation = ExportRoundtripInformation;
            this.ExportTextBoxAsSvg = ExportTextBoxAsSvg;
            this.ExportTextInputFormFieldAsText = ExportTextInputFormFieldAsText;
            this.ExportTocPageNumbers = ExportTocPageNumbers;
            this.ExportXhtmlTransitional = ExportXhtmlTransitional;
            this.FontsFolder = FontsFolder;
            this.FontsFolderAlias = FontsFolderAlias;
            this.FontResourcesSubsettingSizeThreshold = FontResourcesSubsettingSizeThreshold;
            this.HtmlVersion = HtmlVersion;
            this.ImagesFolder = ImagesFolder;
            this.ImagesFolderAlias = ImagesFolderAlias;
            this.ImageResolution = ImageResolution;
            this.OfficeMathOutputMode = OfficeMathOutputMode;
            this.ResourceFolder = ResourceFolder;
            this.ResourceFolderAlias = ResourceFolderAlias;
            this.ScaleImageToShapeSize = ScaleImageToShapeSize;
            this.TableWidthOutputMode = TableWidthOutputMode;
            this.ExportDropDownFormFieldAsText = ExportDropDownFormFieldAsText;
        }
        
        /// <summary>
        /// Specifies whether or not use pretty formats output
        /// </summary>
        /// <value>Specifies whether or not use pretty formats output</value>
        [DataMember(Name="PrettyFormat", EmitDefaultValue=false)]
        public bool? PrettyFormat { get; set; }

        /// <summary>
        /// Specifies whether negative left and right indents of paragraphs are allowed (not normalized)
        /// </summary>
        /// <value>Specifies whether negative left and right indents of paragraphs are allowed (not normalized)</value>
        [DataMember(Name="AllowNegativeIndent", EmitDefaultValue=false)]
        public bool? AllowNegativeIndent { get; set; }

        /// <summary>
        /// Specifies the name of the CSS file written when the document is exported to HTML
        /// </summary>
        /// <value>Specifies the name of the CSS file written when the document is exported to HTML</value>
        [DataMember(Name="CssStyleSheetFileName", EmitDefaultValue=false)]
        public string CssStyleSheetFileName { get; set; }

        /// <summary>
        /// Specifies how CSS styles are exported
        /// </summary>
        /// <value>Specifies how CSS styles are exported</value>
        [DataMember(Name="CssStyleSheetType", EmitDefaultValue=false)]
        public string CssStyleSheetType { get; set; }

        /// <summary>
        /// Specifies how the document should be split when saving
        /// </summary>
        /// <value>Specifies how the document should be split when saving</value>
        [DataMember(Name="DocumentSplitCriteria", EmitDefaultValue=false)]
        public string DocumentSplitCriteria { get; set; }

        /// <summary>
        /// Specifies the maximum level of headings at which to split the document
        /// </summary>
        /// <value>Specifies the maximum level of headings at which to split the document</value>
        [DataMember(Name="DocumentSplitHeadingLevel", EmitDefaultValue=false)]
        public int? DocumentSplitHeadingLevel { get; set; }

        /// <summary>
        /// Specifies the encoding to use when exporting
        /// </summary>
        /// <value>Specifies the encoding to use when exporting</value>
        [DataMember(Name="Encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Specifies whether to export built-in and custom document properties
        /// </summary>
        /// <value>Specifies whether to export built-in and custom document properties</value>
        [DataMember(Name="ExportDocumentProperties", EmitDefaultValue=false)]
        public bool? ExportDocumentProperties { get; set; }

        /// <summary>
        /// Specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.
        /// </summary>
        /// <value>Specifies whether fonts resources should be embedded to HTML in Base64 encoding.  Default is false.</value>
        [DataMember(Name="ExportFontsAsBase64", EmitDefaultValue=false)]
        public bool? ExportFontsAsBase64 { get; set; }

        /// <summary>
        /// Specifies whether font resources should be exported
        /// </summary>
        /// <value>Specifies whether font resources should be exported</value>
        [DataMember(Name="ExportFontResources", EmitDefaultValue=false)]
        public bool? ExportFontResources { get; set; }

        /// <summary>
        /// Specifies how headers and footers are output
        /// </summary>
        /// <value>Specifies how headers and footers are output</value>
        [DataMember(Name="ExportHeadersFootersMode", EmitDefaultValue=false)]
        public string ExportHeadersFootersMode { get; set; }

        /// <summary>
        /// Specifies whether images are saved in Base64 format
        /// </summary>
        /// <value>Specifies whether images are saved in Base64 format</value>
        [DataMember(Name="ExportImagesAsBase64", EmitDefaultValue=false)]
        public bool? ExportImagesAsBase64 { get; set; }

        /// <summary>
        /// Specifies whether language information is exported
        /// </summary>
        /// <value>Specifies whether language information is exported</value>
        [DataMember(Name="ExportLanguageInformation", EmitDefaultValue=false)]
        public bool? ExportLanguageInformation { get; set; }

        /// <summary>
        /// Controls how list labels are output
        /// </summary>
        /// <value>Controls how list labels are output</value>
        [DataMember(Name="ExportListLabels", EmitDefaultValue=false)]
        public string ExportListLabels { get; set; }

        /// <summary>
        /// Specifies whether to convert metafiles into raster images when exporting
        /// </summary>
        /// <value>Specifies whether to convert metafiles into raster images when exporting</value>
        [DataMember(Name="ExportMetafileAsRaster", EmitDefaultValue=false)]
        public bool? ExportMetafileAsRaster { get; set; }

        /// <summary>
        /// Specifies whether original URL should be used as the URL of the linked images.  Default value is false.
        /// </summary>
        /// <value>Specifies whether original URL should be used as the URL of the linked images.  Default value is false.</value>
        [DataMember(Name="ExportOriginalUrlForLinkedImages", EmitDefaultValue=false)]
        public bool? ExportOriginalUrlForLinkedImages { get; set; }

        /// <summary>
        /// Specifies whether page margins is exported to HTML, MHTML or EPUB.  Default is false.
        /// </summary>
        /// <value>Specifies whether page margins is exported to HTML, MHTML or EPUB.  Default is false.</value>
        [DataMember(Name="ExportPageMargins", EmitDefaultValue=false)]
        public bool? ExportPageMargins { get; set; }

        /// <summary>
        /// Specifies whether page setup is exported
        /// </summary>
        /// <value>Specifies whether page setup is exported</value>
        [DataMember(Name="ExportPageSetup", EmitDefaultValue=false)]
        public bool? ExportPageSetup { get; set; }

        /// <summary>
        /// Specifies whether font sizes should be output in relative units when saving
        /// </summary>
        /// <value>Specifies whether font sizes should be output in relative units when saving</value>
        [DataMember(Name="ExportRelativeFontSize", EmitDefaultValue=false)]
        public bool? ExportRelativeFontSize { get; set; }

        /// <summary>
        /// Specifies whether to write the roundtrip information when saving to HTML  Default value is true.
        /// </summary>
        /// <value>Specifies whether to write the roundtrip information when saving to HTML  Default value is true.</value>
        [DataMember(Name="ExportRoundtripInformation", EmitDefaultValue=false)]
        public bool? ExportRoundtripInformation { get; set; }

        /// <summary>
        /// Controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.  &lt;remarks&gt;    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.  &lt;/remarks&gt;
        /// </summary>
        /// <value>Controls how textboxes represented by Aspose.Words.Drawing.Shape are saved to HTML, MHTML or EPUB. Default value is false.  &lt;remarks&gt;    When set to true, exports textboxes as inline \&quot;svg\&quot; elements. When false, exports as \&quot;image\&quot; elements.  &lt;/remarks&gt;</value>
        [DataMember(Name="ExportTextBoxAsSvg", EmitDefaultValue=false)]
        public bool? ExportTextBoxAsSvg { get; set; }

        /// <summary>
        /// Controls how text input form fields are saved
        /// </summary>
        /// <value>Controls how text input form fields are saved</value>
        [DataMember(Name="ExportTextInputFormFieldAsText", EmitDefaultValue=false)]
        public bool? ExportTextInputFormFieldAsText { get; set; }

        /// <summary>
        /// Specifies whether to write page numbers to table of contents when saving
        /// </summary>
        /// <value>Specifies whether to write page numbers to table of contents when saving</value>
        [DataMember(Name="ExportTocPageNumbers", EmitDefaultValue=false)]
        public bool? ExportTocPageNumbers { get; set; }

        /// <summary>
        /// Specifies whether to write the DOCTYPE declaration when saving
        /// </summary>
        /// <value>Specifies whether to write the DOCTYPE declaration when saving</value>
        [DataMember(Name="ExportXhtmlTransitional", EmitDefaultValue=false)]
        public bool? ExportXhtmlTransitional { get; set; }

        /// <summary>
        /// Specifies the physical folder where fonts are saved when exporting a document
        /// </summary>
        /// <value>Specifies the physical folder where fonts are saved when exporting a document</value>
        [DataMember(Name="FontsFolder", EmitDefaultValue=false)]
        public string FontsFolder { get; set; }

        /// <summary>
        /// Specifies the name of the folder used to construct font URIs
        /// </summary>
        /// <value>Specifies the name of the folder used to construct font URIs</value>
        [DataMember(Name="FontsFolderAlias", EmitDefaultValue=false)]
        public string FontsFolderAlias { get; set; }

        /// <summary>
        /// Controls which font resources need subsetting when saving
        /// </summary>
        /// <value>Controls which font resources need subsetting when saving</value>
        [DataMember(Name="FontResourcesSubsettingSizeThreshold", EmitDefaultValue=false)]
        public int? FontResourcesSubsettingSizeThreshold { get; set; }


        /// <summary>
        /// Specifies the physical folder where images are saved when exporting a document
        /// </summary>
        /// <value>Specifies the physical folder where images are saved when exporting a document</value>
        [DataMember(Name="ImagesFolder", EmitDefaultValue=false)]
        public string ImagesFolder { get; set; }

        /// <summary>
        /// Specifies the name of the folder used to construct image URIs
        /// </summary>
        /// <value>Specifies the name of the folder used to construct image URIs</value>
        [DataMember(Name="ImagesFolderAlias", EmitDefaultValue=false)]
        public string ImagesFolderAlias { get; set; }

        /// <summary>
        /// Specifies the output resolution for images when exporting
        /// </summary>
        /// <value>Specifies the output resolution for images when exporting</value>
        [DataMember(Name="ImageResolution", EmitDefaultValue=false)]
        public int? ImageResolution { get; set; }


        /// <summary>
        /// Specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.
        /// </summary>
        /// <value>Specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document is exported to HTML. Default is an empty string.</value>
        [DataMember(Name="ResourceFolder", EmitDefaultValue=false)]
        public string ResourceFolder { get; set; }

        /// <summary>
        /// Specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.
        /// </summary>
        /// <value>Specifies the name of the folder used to construct URIs of all resources written into an HTML document.  Default is an empty string.</value>
        [DataMember(Name="ResourceFolderAlias", EmitDefaultValue=false)]
        public string ResourceFolderAlias { get; set; }

        /// <summary>
        /// Specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting
        /// </summary>
        /// <value>Specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting</value>
        [DataMember(Name="ScaleImageToShapeSize", EmitDefaultValue=false)]
        public bool? ScaleImageToShapeSize { get; set; }

        /// <summary>
        /// Controls how table, row and cell widths are exported
        /// </summary>
        /// <value>Controls how table, row and cell widths are exported</value>
        [DataMember(Name="TableWidthOutputMode", EmitDefaultValue=false)]
        public string TableWidthOutputMode { get; set; }

        /// <summary>
        /// Controls how drop-down form fields are saved to HTML.  Default value is false.
        /// </summary>
        /// <value>Controls how drop-down form fields are saved to HTML.  Default value is false.</value>
        [DataMember(Name="ExportDropDownFormFieldAsText", EmitDefaultValue=false)]
        public bool? ExportDropDownFormFieldAsText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingHtmlSaveOptionsData {\n");
            sb.Append("  PrettyFormat: ").Append(PrettyFormat).Append("\n");
            sb.Append("  AllowNegativeIndent: ").Append(AllowNegativeIndent).Append("\n");
            sb.Append("  CssStyleSheetFileName: ").Append(CssStyleSheetFileName).Append("\n");
            sb.Append("  CssStyleSheetType: ").Append(CssStyleSheetType).Append("\n");
            sb.Append("  DocumentSplitCriteria: ").Append(DocumentSplitCriteria).Append("\n");
            sb.Append("  DocumentSplitHeadingLevel: ").Append(DocumentSplitHeadingLevel).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  ExportDocumentProperties: ").Append(ExportDocumentProperties).Append("\n");
            sb.Append("  ExportFontsAsBase64: ").Append(ExportFontsAsBase64).Append("\n");
            sb.Append("  ExportFontResources: ").Append(ExportFontResources).Append("\n");
            sb.Append("  ExportHeadersFootersMode: ").Append(ExportHeadersFootersMode).Append("\n");
            sb.Append("  ExportImagesAsBase64: ").Append(ExportImagesAsBase64).Append("\n");
            sb.Append("  ExportLanguageInformation: ").Append(ExportLanguageInformation).Append("\n");
            sb.Append("  ExportListLabels: ").Append(ExportListLabels).Append("\n");
            sb.Append("  ExportMetafileAsRaster: ").Append(ExportMetafileAsRaster).Append("\n");
            sb.Append("  ExportOriginalUrlForLinkedImages: ").Append(ExportOriginalUrlForLinkedImages).Append("\n");
            sb.Append("  ExportPageMargins: ").Append(ExportPageMargins).Append("\n");
            sb.Append("  ExportPageSetup: ").Append(ExportPageSetup).Append("\n");
            sb.Append("  ExportRelativeFontSize: ").Append(ExportRelativeFontSize).Append("\n");
            sb.Append("  ExportRoundtripInformation: ").Append(ExportRoundtripInformation).Append("\n");
            sb.Append("  ExportTextBoxAsSvg: ").Append(ExportTextBoxAsSvg).Append("\n");
            sb.Append("  ExportTextInputFormFieldAsText: ").Append(ExportTextInputFormFieldAsText).Append("\n");
            sb.Append("  ExportTocPageNumbers: ").Append(ExportTocPageNumbers).Append("\n");
            sb.Append("  ExportXhtmlTransitional: ").Append(ExportXhtmlTransitional).Append("\n");
            sb.Append("  FontsFolder: ").Append(FontsFolder).Append("\n");
            sb.Append("  FontsFolderAlias: ").Append(FontsFolderAlias).Append("\n");
            sb.Append("  FontResourcesSubsettingSizeThreshold: ").Append(FontResourcesSubsettingSizeThreshold).Append("\n");
            sb.Append("  HtmlVersion: ").Append(HtmlVersion).Append("\n");
            sb.Append("  ImagesFolder: ").Append(ImagesFolder).Append("\n");
            sb.Append("  ImagesFolderAlias: ").Append(ImagesFolderAlias).Append("\n");
            sb.Append("  ImageResolution: ").Append(ImageResolution).Append("\n");
            sb.Append("  OfficeMathOutputMode: ").Append(OfficeMathOutputMode).Append("\n");
            sb.Append("  ResourceFolder: ").Append(ResourceFolder).Append("\n");
            sb.Append("  ResourceFolderAlias: ").Append(ResourceFolderAlias).Append("\n");
            sb.Append("  ScaleImageToShapeSize: ").Append(ScaleImageToShapeSize).Append("\n");
            sb.Append("  TableWidthOutputMode: ").Append(TableWidthOutputMode).Append("\n");
            sb.Append("  ExportDropDownFormFieldAsText: ").Append(ExportDropDownFormFieldAsText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingHtmlSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingHtmlSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingHtmlSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingHtmlSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PrettyFormat == other.PrettyFormat ||
                    this.PrettyFormat != null &&
                    this.PrettyFormat.Equals(other.PrettyFormat)
                ) && 
                (
                    this.AllowNegativeIndent == other.AllowNegativeIndent ||
                    this.AllowNegativeIndent != null &&
                    this.AllowNegativeIndent.Equals(other.AllowNegativeIndent)
                ) && 
                (
                    this.CssStyleSheetFileName == other.CssStyleSheetFileName ||
                    this.CssStyleSheetFileName != null &&
                    this.CssStyleSheetFileName.Equals(other.CssStyleSheetFileName)
                ) && 
                (
                    this.CssStyleSheetType == other.CssStyleSheetType ||
                    this.CssStyleSheetType != null &&
                    this.CssStyleSheetType.Equals(other.CssStyleSheetType)
                ) && 
                (
                    this.DocumentSplitCriteria == other.DocumentSplitCriteria ||
                    this.DocumentSplitCriteria != null &&
                    this.DocumentSplitCriteria.Equals(other.DocumentSplitCriteria)
                ) && 
                (
                    this.DocumentSplitHeadingLevel == other.DocumentSplitHeadingLevel ||
                    this.DocumentSplitHeadingLevel != null &&
                    this.DocumentSplitHeadingLevel.Equals(other.DocumentSplitHeadingLevel)
                ) && 
                (
                    this.Encoding == other.Encoding ||
                    this.Encoding != null &&
                    this.Encoding.Equals(other.Encoding)
                ) && 
                (
                    this.ExportDocumentProperties == other.ExportDocumentProperties ||
                    this.ExportDocumentProperties != null &&
                    this.ExportDocumentProperties.Equals(other.ExportDocumentProperties)
                ) && 
                (
                    this.ExportFontsAsBase64 == other.ExportFontsAsBase64 ||
                    this.ExportFontsAsBase64 != null &&
                    this.ExportFontsAsBase64.Equals(other.ExportFontsAsBase64)
                ) && 
                (
                    this.ExportFontResources == other.ExportFontResources ||
                    this.ExportFontResources != null &&
                    this.ExportFontResources.Equals(other.ExportFontResources)
                ) && 
                (
                    this.ExportHeadersFootersMode == other.ExportHeadersFootersMode ||
                    this.ExportHeadersFootersMode != null &&
                    this.ExportHeadersFootersMode.Equals(other.ExportHeadersFootersMode)
                ) && 
                (
                    this.ExportImagesAsBase64 == other.ExportImagesAsBase64 ||
                    this.ExportImagesAsBase64 != null &&
                    this.ExportImagesAsBase64.Equals(other.ExportImagesAsBase64)
                ) && 
                (
                    this.ExportLanguageInformation == other.ExportLanguageInformation ||
                    this.ExportLanguageInformation != null &&
                    this.ExportLanguageInformation.Equals(other.ExportLanguageInformation)
                ) && 
                (
                    this.ExportListLabels == other.ExportListLabels ||
                    this.ExportListLabels != null &&
                    this.ExportListLabels.Equals(other.ExportListLabels)
                ) && 
                (
                    this.ExportMetafileAsRaster == other.ExportMetafileAsRaster ||
                    this.ExportMetafileAsRaster != null &&
                    this.ExportMetafileAsRaster.Equals(other.ExportMetafileAsRaster)
                ) && 
                (
                    this.ExportOriginalUrlForLinkedImages == other.ExportOriginalUrlForLinkedImages ||
                    this.ExportOriginalUrlForLinkedImages != null &&
                    this.ExportOriginalUrlForLinkedImages.Equals(other.ExportOriginalUrlForLinkedImages)
                ) && 
                (
                    this.ExportPageMargins == other.ExportPageMargins ||
                    this.ExportPageMargins != null &&
                    this.ExportPageMargins.Equals(other.ExportPageMargins)
                ) && 
                (
                    this.ExportPageSetup == other.ExportPageSetup ||
                    this.ExportPageSetup != null &&
                    this.ExportPageSetup.Equals(other.ExportPageSetup)
                ) && 
                (
                    this.ExportRelativeFontSize == other.ExportRelativeFontSize ||
                    this.ExportRelativeFontSize != null &&
                    this.ExportRelativeFontSize.Equals(other.ExportRelativeFontSize)
                ) && 
                (
                    this.ExportRoundtripInformation == other.ExportRoundtripInformation ||
                    this.ExportRoundtripInformation != null &&
                    this.ExportRoundtripInformation.Equals(other.ExportRoundtripInformation)
                ) && 
                (
                    this.ExportTextBoxAsSvg == other.ExportTextBoxAsSvg ||
                    this.ExportTextBoxAsSvg != null &&
                    this.ExportTextBoxAsSvg.Equals(other.ExportTextBoxAsSvg)
                ) && 
                (
                    this.ExportTextInputFormFieldAsText == other.ExportTextInputFormFieldAsText ||
                    this.ExportTextInputFormFieldAsText != null &&
                    this.ExportTextInputFormFieldAsText.Equals(other.ExportTextInputFormFieldAsText)
                ) && 
                (
                    this.ExportTocPageNumbers == other.ExportTocPageNumbers ||
                    this.ExportTocPageNumbers != null &&
                    this.ExportTocPageNumbers.Equals(other.ExportTocPageNumbers)
                ) && 
                (
                    this.ExportXhtmlTransitional == other.ExportXhtmlTransitional ||
                    this.ExportXhtmlTransitional != null &&
                    this.ExportXhtmlTransitional.Equals(other.ExportXhtmlTransitional)
                ) && 
                (
                    this.FontsFolder == other.FontsFolder ||
                    this.FontsFolder != null &&
                    this.FontsFolder.Equals(other.FontsFolder)
                ) && 
                (
                    this.FontsFolderAlias == other.FontsFolderAlias ||
                    this.FontsFolderAlias != null &&
                    this.FontsFolderAlias.Equals(other.FontsFolderAlias)
                ) && 
                (
                    this.FontResourcesSubsettingSizeThreshold == other.FontResourcesSubsettingSizeThreshold ||
                    this.FontResourcesSubsettingSizeThreshold != null &&
                    this.FontResourcesSubsettingSizeThreshold.Equals(other.FontResourcesSubsettingSizeThreshold)
                ) && 
                (
                    this.HtmlVersion == other.HtmlVersion ||
                    this.HtmlVersion != null &&
                    this.HtmlVersion.Equals(other.HtmlVersion)
                ) && 
                (
                    this.ImagesFolder == other.ImagesFolder ||
                    this.ImagesFolder != null &&
                    this.ImagesFolder.Equals(other.ImagesFolder)
                ) && 
                (
                    this.ImagesFolderAlias == other.ImagesFolderAlias ||
                    this.ImagesFolderAlias != null &&
                    this.ImagesFolderAlias.Equals(other.ImagesFolderAlias)
                ) && 
                (
                    this.ImageResolution == other.ImageResolution ||
                    this.ImageResolution != null &&
                    this.ImageResolution.Equals(other.ImageResolution)
                ) && 
                (
                    this.OfficeMathOutputMode == other.OfficeMathOutputMode ||
                    this.OfficeMathOutputMode != null &&
                    this.OfficeMathOutputMode.Equals(other.OfficeMathOutputMode)
                ) && 
                (
                    this.ResourceFolder == other.ResourceFolder ||
                    this.ResourceFolder != null &&
                    this.ResourceFolder.Equals(other.ResourceFolder)
                ) && 
                (
                    this.ResourceFolderAlias == other.ResourceFolderAlias ||
                    this.ResourceFolderAlias != null &&
                    this.ResourceFolderAlias.Equals(other.ResourceFolderAlias)
                ) && 
                (
                    this.ScaleImageToShapeSize == other.ScaleImageToShapeSize ||
                    this.ScaleImageToShapeSize != null &&
                    this.ScaleImageToShapeSize.Equals(other.ScaleImageToShapeSize)
                ) && 
                (
                    this.TableWidthOutputMode == other.TableWidthOutputMode ||
                    this.TableWidthOutputMode != null &&
                    this.TableWidthOutputMode.Equals(other.TableWidthOutputMode)
                ) && 
                (
                    this.ExportDropDownFormFieldAsText == other.ExportDropDownFormFieldAsText ||
                    this.ExportDropDownFormFieldAsText != null &&
                    this.ExportDropDownFormFieldAsText.Equals(other.ExportDropDownFormFieldAsText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrettyFormat != null)
                    hash = hash * 59 + this.PrettyFormat.GetHashCode();
                if (this.AllowNegativeIndent != null)
                    hash = hash * 59 + this.AllowNegativeIndent.GetHashCode();
                if (this.CssStyleSheetFileName != null)
                    hash = hash * 59 + this.CssStyleSheetFileName.GetHashCode();
                if (this.CssStyleSheetType != null)
                    hash = hash * 59 + this.CssStyleSheetType.GetHashCode();
                if (this.DocumentSplitCriteria != null)
                    hash = hash * 59 + this.DocumentSplitCriteria.GetHashCode();
                if (this.DocumentSplitHeadingLevel != null)
                    hash = hash * 59 + this.DocumentSplitHeadingLevel.GetHashCode();
                if (this.Encoding != null)
                    hash = hash * 59 + this.Encoding.GetHashCode();
                if (this.ExportDocumentProperties != null)
                    hash = hash * 59 + this.ExportDocumentProperties.GetHashCode();
                if (this.ExportFontsAsBase64 != null)
                    hash = hash * 59 + this.ExportFontsAsBase64.GetHashCode();
                if (this.ExportFontResources != null)
                    hash = hash * 59 + this.ExportFontResources.GetHashCode();
                if (this.ExportHeadersFootersMode != null)
                    hash = hash * 59 + this.ExportHeadersFootersMode.GetHashCode();
                if (this.ExportImagesAsBase64 != null)
                    hash = hash * 59 + this.ExportImagesAsBase64.GetHashCode();
                if (this.ExportLanguageInformation != null)
                    hash = hash * 59 + this.ExportLanguageInformation.GetHashCode();
                if (this.ExportListLabels != null)
                    hash = hash * 59 + this.ExportListLabels.GetHashCode();
                if (this.ExportMetafileAsRaster != null)
                    hash = hash * 59 + this.ExportMetafileAsRaster.GetHashCode();
                if (this.ExportOriginalUrlForLinkedImages != null)
                    hash = hash * 59 + this.ExportOriginalUrlForLinkedImages.GetHashCode();
                if (this.ExportPageMargins != null)
                    hash = hash * 59 + this.ExportPageMargins.GetHashCode();
                if (this.ExportPageSetup != null)
                    hash = hash * 59 + this.ExportPageSetup.GetHashCode();
                if (this.ExportRelativeFontSize != null)
                    hash = hash * 59 + this.ExportRelativeFontSize.GetHashCode();
                if (this.ExportRoundtripInformation != null)
                    hash = hash * 59 + this.ExportRoundtripInformation.GetHashCode();
                if (this.ExportTextBoxAsSvg != null)
                    hash = hash * 59 + this.ExportTextBoxAsSvg.GetHashCode();
                if (this.ExportTextInputFormFieldAsText != null)
                    hash = hash * 59 + this.ExportTextInputFormFieldAsText.GetHashCode();
                if (this.ExportTocPageNumbers != null)
                    hash = hash * 59 + this.ExportTocPageNumbers.GetHashCode();
                if (this.ExportXhtmlTransitional != null)
                    hash = hash * 59 + this.ExportXhtmlTransitional.GetHashCode();
                if (this.FontsFolder != null)
                    hash = hash * 59 + this.FontsFolder.GetHashCode();
                if (this.FontsFolderAlias != null)
                    hash = hash * 59 + this.FontsFolderAlias.GetHashCode();
                if (this.FontResourcesSubsettingSizeThreshold != null)
                    hash = hash * 59 + this.FontResourcesSubsettingSizeThreshold.GetHashCode();
                if (this.HtmlVersion != null)
                    hash = hash * 59 + this.HtmlVersion.GetHashCode();
                if (this.ImagesFolder != null)
                    hash = hash * 59 + this.ImagesFolder.GetHashCode();
                if (this.ImagesFolderAlias != null)
                    hash = hash * 59 + this.ImagesFolderAlias.GetHashCode();
                if (this.ImageResolution != null)
                    hash = hash * 59 + this.ImageResolution.GetHashCode();
                if (this.OfficeMathOutputMode != null)
                    hash = hash * 59 + this.OfficeMathOutputMode.GetHashCode();
                if (this.ResourceFolder != null)
                    hash = hash * 59 + this.ResourceFolder.GetHashCode();
                if (this.ResourceFolderAlias != null)
                    hash = hash * 59 + this.ResourceFolderAlias.GetHashCode();
                if (this.ScaleImageToShapeSize != null)
                    hash = hash * 59 + this.ScaleImageToShapeSize.GetHashCode();
                if (this.TableWidthOutputMode != null)
                    hash = hash * 59 + this.TableWidthOutputMode.GetHashCode();
                if (this.ExportDropDownFormFieldAsText != null)
                    hash = hash * 59 + this.ExportDropDownFormFieldAsText.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
