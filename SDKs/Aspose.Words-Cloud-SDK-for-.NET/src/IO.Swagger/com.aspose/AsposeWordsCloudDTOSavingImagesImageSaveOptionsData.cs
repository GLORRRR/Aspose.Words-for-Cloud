/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Container abstract class for image save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingImagesImageSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingImagesImageSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingImagesImageSaveOptionsData" /> class.
        /// </summary>
        /// <param name="ImageBrightness">Brightness of image.</param>
        /// <param name="ImageColorMode">Color mode of image.</param>
        /// <param name="ImageContrast">Contrast of image.</param>
        /// <param name="GraphicsQualityOptions">Allows to specify additional System.Drawing.Graphics quality options..</param>
        /// <param name="PixelFormat">Pixel format of image.</param>
        /// <param name="PaperColor">Background (paper) color of image.</param>
        /// <param name="Resolution">Sets both horizontal and vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;.</param>
        /// <param name="HorizontalResolution">Gets or sets the horizontal resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;.</param>
        /// <param name="VerticalResolution">Gets or sets the vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;.</param>
        /// <param name="Scale">Zoom factor of image.</param>
        /// <param name="UseHighQualityRendering">Determine whether or not to use high quality (i.e. slow) rendering algorithms.</param>
        /// <param name="UseAntiAliasing">Determine whether or not to use anti-aliasing for rendering.</param>
        /// <param name="UseGdiEmfRenderer">Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF..</param>
        public AsposeWordsCloudDTOSavingImagesImageSaveOptionsData(float? ImageBrightness = default(float?), string ImageColorMode = default(string), float? ImageContrast = default(float?), AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData GraphicsQualityOptions = default(AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData), string PixelFormat = default(string), string PaperColor = default(string), float? Resolution = default(float?), float? HorizontalResolution = default(float?), float? VerticalResolution = default(float?), float? Scale = default(float?), bool? UseHighQualityRendering = default(bool?), bool? UseAntiAliasing = default(bool?), bool? UseGdiEmfRenderer = default(bool?))
        {
            this.ImageBrightness = ImageBrightness;
            this.ImageColorMode = ImageColorMode;
            this.ImageContrast = ImageContrast;
            this.GraphicsQualityOptions = GraphicsQualityOptions;
            this.PixelFormat = PixelFormat;
            this.PaperColor = PaperColor;
            this.Resolution = Resolution;
            this.HorizontalResolution = HorizontalResolution;
            this.VerticalResolution = VerticalResolution;
            this.Scale = Scale;
            this.UseHighQualityRendering = UseHighQualityRendering;
            this.UseAntiAliasing = UseAntiAliasing;
            this.UseGdiEmfRenderer = UseGdiEmfRenderer;
        }
        
        /// <summary>
        /// Brightness of image
        /// </summary>
        /// <value>Brightness of image</value>
        [DataMember(Name="ImageBrightness", EmitDefaultValue=false)]
        public float? ImageBrightness { get; set; }

        /// <summary>
        /// Color mode of image
        /// </summary>
        /// <value>Color mode of image</value>
        [DataMember(Name="ImageColorMode", EmitDefaultValue=false)]
        public string ImageColorMode { get; set; }

        /// <summary>
        /// Contrast of image
        /// </summary>
        /// <value>Contrast of image</value>
        [DataMember(Name="ImageContrast", EmitDefaultValue=false)]
        public float? ImageContrast { get; set; }

        /// <summary>
        /// Allows to specify additional System.Drawing.Graphics quality options.
        /// </summary>
        /// <value>Allows to specify additional System.Drawing.Graphics quality options.</value>
        [DataMember(Name="GraphicsQualityOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData GraphicsQualityOptions { get; set; }

        /// <summary>
        /// Pixel format of image
        /// </summary>
        /// <value>Pixel format of image</value>
        [DataMember(Name="PixelFormat", EmitDefaultValue=false)]
        public string PixelFormat { get; set; }

        /// <summary>
        /// Background (paper) color of image
        /// </summary>
        /// <value>Background (paper) color of image</value>
        [DataMember(Name="PaperColor", EmitDefaultValue=false)]
        public string PaperColor { get; set; }

        /// <summary>
        /// Sets both horizontal and vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;
        /// </summary>
        /// <value>Sets both horizontal and vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;</value>
        [DataMember(Name="Resolution", EmitDefaultValue=false)]
        public float? Resolution { get; set; }

        /// <summary>
        /// Gets or sets the horizontal resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;
        /// </summary>
        /// <value>Gets or sets the horizontal resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;</value>
        [DataMember(Name="HorizontalResolution", EmitDefaultValue=false)]
        public float? HorizontalResolution { get; set; }

        /// <summary>
        /// Gets or sets the vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;
        /// </summary>
        /// <value>Gets or sets the vertical resolution for the generated images, in dots per inch.  &lt;remarks&gt;  This property has effect only when saving to raster image formats.  The default value is 96.  &lt;/remarks&gt;</value>
        [DataMember(Name="VerticalResolution", EmitDefaultValue=false)]
        public float? VerticalResolution { get; set; }

        /// <summary>
        /// Zoom factor of image
        /// </summary>
        /// <value>Zoom factor of image</value>
        [DataMember(Name="Scale", EmitDefaultValue=false)]
        public float? Scale { get; set; }

        /// <summary>
        /// Determine whether or not to use high quality (i.e. slow) rendering algorithms
        /// </summary>
        /// <value>Determine whether or not to use high quality (i.e. slow) rendering algorithms</value>
        [DataMember(Name="UseHighQualityRendering", EmitDefaultValue=false)]
        public bool? UseHighQualityRendering { get; set; }

        /// <summary>
        /// Determine whether or not to use anti-aliasing for rendering
        /// </summary>
        /// <value>Determine whether or not to use anti-aliasing for rendering</value>
        [DataMember(Name="UseAntiAliasing", EmitDefaultValue=false)]
        public bool? UseAntiAliasing { get; set; }

        /// <summary>
        /// Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.
        /// </summary>
        /// <value>Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.</value>
        [DataMember(Name="UseGdiEmfRenderer", EmitDefaultValue=false)]
        public bool? UseGdiEmfRenderer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingImagesImageSaveOptionsData {\n");
            sb.Append("  ImageBrightness: ").Append(ImageBrightness).Append("\n");
            sb.Append("  ImageColorMode: ").Append(ImageColorMode).Append("\n");
            sb.Append("  ImageContrast: ").Append(ImageContrast).Append("\n");
            sb.Append("  GraphicsQualityOptions: ").Append(GraphicsQualityOptions).Append("\n");
            sb.Append("  PixelFormat: ").Append(PixelFormat).Append("\n");
            sb.Append("  PaperColor: ").Append(PaperColor).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  HorizontalResolution: ").Append(HorizontalResolution).Append("\n");
            sb.Append("  VerticalResolution: ").Append(VerticalResolution).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  UseHighQualityRendering: ").Append(UseHighQualityRendering).Append("\n");
            sb.Append("  UseAntiAliasing: ").Append(UseAntiAliasing).Append("\n");
            sb.Append("  UseGdiEmfRenderer: ").Append(UseGdiEmfRenderer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingImagesImageSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingImagesImageSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingImagesImageSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingImagesImageSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ImageBrightness == other.ImageBrightness ||
                    this.ImageBrightness != null &&
                    this.ImageBrightness.Equals(other.ImageBrightness)
                ) && 
                (
                    this.ImageColorMode == other.ImageColorMode ||
                    this.ImageColorMode != null &&
                    this.ImageColorMode.Equals(other.ImageColorMode)
                ) && 
                (
                    this.ImageContrast == other.ImageContrast ||
                    this.ImageContrast != null &&
                    this.ImageContrast.Equals(other.ImageContrast)
                ) && 
                (
                    this.GraphicsQualityOptions == other.GraphicsQualityOptions ||
                    this.GraphicsQualityOptions != null &&
                    this.GraphicsQualityOptions.Equals(other.GraphicsQualityOptions)
                ) && 
                (
                    this.PixelFormat == other.PixelFormat ||
                    this.PixelFormat != null &&
                    this.PixelFormat.Equals(other.PixelFormat)
                ) && 
                (
                    this.PaperColor == other.PaperColor ||
                    this.PaperColor != null &&
                    this.PaperColor.Equals(other.PaperColor)
                ) && 
                (
                    this.Resolution == other.Resolution ||
                    this.Resolution != null &&
                    this.Resolution.Equals(other.Resolution)
                ) && 
                (
                    this.HorizontalResolution == other.HorizontalResolution ||
                    this.HorizontalResolution != null &&
                    this.HorizontalResolution.Equals(other.HorizontalResolution)
                ) && 
                (
                    this.VerticalResolution == other.VerticalResolution ||
                    this.VerticalResolution != null &&
                    this.VerticalResolution.Equals(other.VerticalResolution)
                ) && 
                (
                    this.Scale == other.Scale ||
                    this.Scale != null &&
                    this.Scale.Equals(other.Scale)
                ) && 
                (
                    this.UseHighQualityRendering == other.UseHighQualityRendering ||
                    this.UseHighQualityRendering != null &&
                    this.UseHighQualityRendering.Equals(other.UseHighQualityRendering)
                ) && 
                (
                    this.UseAntiAliasing == other.UseAntiAliasing ||
                    this.UseAntiAliasing != null &&
                    this.UseAntiAliasing.Equals(other.UseAntiAliasing)
                ) && 
                (
                    this.UseGdiEmfRenderer == other.UseGdiEmfRenderer ||
                    this.UseGdiEmfRenderer != null &&
                    this.UseGdiEmfRenderer.Equals(other.UseGdiEmfRenderer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ImageBrightness != null)
                    hash = hash * 59 + this.ImageBrightness.GetHashCode();
                if (this.ImageColorMode != null)
                    hash = hash * 59 + this.ImageColorMode.GetHashCode();
                if (this.ImageContrast != null)
                    hash = hash * 59 + this.ImageContrast.GetHashCode();
                if (this.GraphicsQualityOptions != null)
                    hash = hash * 59 + this.GraphicsQualityOptions.GetHashCode();
                if (this.PixelFormat != null)
                    hash = hash * 59 + this.PixelFormat.GetHashCode();
                if (this.PaperColor != null)
                    hash = hash * 59 + this.PaperColor.GetHashCode();
                if (this.Resolution != null)
                    hash = hash * 59 + this.Resolution.GetHashCode();
                if (this.HorizontalResolution != null)
                    hash = hash * 59 + this.HorizontalResolution.GetHashCode();
                if (this.VerticalResolution != null)
                    hash = hash * 59 + this.VerticalResolution.GetHashCode();
                if (this.Scale != null)
                    hash = hash * 59 + this.Scale.GetHashCode();
                if (this.UseHighQualityRendering != null)
                    hash = hash * 59 + this.UseHighQualityRendering.GetHashCode();
                if (this.UseAntiAliasing != null)
                    hash = hash * 59 + this.UseAntiAliasing.GetHashCode();
                if (this.UseGdiEmfRenderer != null)
                    hash = hash * 59 + this.UseGdiEmfRenderer.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
