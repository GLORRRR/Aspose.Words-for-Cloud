/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Table element
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsTablesTableInsertDto :  IEquatable<AsposeWordsCloudDTODocumentElementsTablesTableInsertDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsTablesTableInsertDto" /> class.
        /// </summary>
        /// <param name="Postion">Table will be inserted before specified position..</param>
        /// <param name="ColumnsCount">Count of columns. Default is 2..</param>
        /// <param name="RowsCount">Count of rows. Default is 2..</param>
        public AsposeWordsCloudDTODocumentElementsTablesTableInsertDto(AsposeWordsCloudDTODocumentPositionDto Postion = default(AsposeWordsCloudDTODocumentPositionDto), int? ColumnsCount = default(int?), int? RowsCount = default(int?))
        {
            this.Postion = Postion;
            this.ColumnsCount = ColumnsCount;
            this.RowsCount = RowsCount;
        }
        
        /// <summary>
        /// Table will be inserted before specified position.
        /// </summary>
        /// <value>Table will be inserted before specified position.</value>
        [DataMember(Name="Postion", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentPositionDto Postion { get; set; }

        /// <summary>
        /// Count of columns. Default is 2.
        /// </summary>
        /// <value>Count of columns. Default is 2.</value>
        [DataMember(Name="ColumnsCount", EmitDefaultValue=false)]
        public int? ColumnsCount { get; set; }

        /// <summary>
        /// Count of rows. Default is 2.
        /// </summary>
        /// <value>Count of rows. Default is 2.</value>
        [DataMember(Name="RowsCount", EmitDefaultValue=false)]
        public int? RowsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsTablesTableInsertDto {\n");
            sb.Append("  Postion: ").Append(Postion).Append("\n");
            sb.Append("  ColumnsCount: ").Append(ColumnsCount).Append("\n");
            sb.Append("  RowsCount: ").Append(RowsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsTablesTableInsertDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsTablesTableInsertDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsTablesTableInsertDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsTablesTableInsertDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Postion == other.Postion ||
                    this.Postion != null &&
                    this.Postion.Equals(other.Postion)
                ) && 
                (
                    this.ColumnsCount == other.ColumnsCount ||
                    this.ColumnsCount != null &&
                    this.ColumnsCount.Equals(other.ColumnsCount)
                ) && 
                (
                    this.RowsCount == other.RowsCount ||
                    this.RowsCount != null &&
                    this.RowsCount.Equals(other.RowsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Postion != null)
                    hash = hash * 59 + this.Postion.GetHashCode();
                if (this.ColumnsCount != null)
                    hash = hash * 59 + this.ColumnsCount.GetHashCode();
                if (this.RowsCount != null)
                    hash = hash * 59 + this.RowsCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
