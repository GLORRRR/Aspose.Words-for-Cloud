/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Container class for text save options.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingTextSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingTextSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingTextSaveOptionsData" /> class.
        /// </summary>
        /// <param name="Encoding">Specifies the encoding to use when exporting in plain text format.</param>
        /// <param name="ExportHeadersFooters">Specifies whether to output headers and footers when exporting in plain text format.</param>
        /// <param name="ForcePageBreaks">Allows to specify whether the page breaks should be preserved during export.  The default value is false..</param>
        /// <param name="ParagraphBreak">Specifies the string to use as a paragraph break when exporting in plain text format.</param>
        /// <param name="PreserveTableLayout">Specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.</param>
        /// <param name="SimplifyListLabels">Specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.</param>
        public AsposeWordsCloudDTOSavingTextSaveOptionsData(string Encoding = default(string), bool? ExportHeadersFooters = default(bool?), bool? ForcePageBreaks = default(bool?), string ParagraphBreak = default(string), bool? PreserveTableLayout = default(bool?), bool? SimplifyListLabels = default(bool?))
        {
            this.Encoding = Encoding;
            this.ExportHeadersFooters = ExportHeadersFooters;
            this.ForcePageBreaks = ForcePageBreaks;
            this.ParagraphBreak = ParagraphBreak;
            this.PreserveTableLayout = PreserveTableLayout;
            this.SimplifyListLabels = SimplifyListLabels;
        }
        
        /// <summary>
        /// Specifies the encoding to use when exporting in plain text format
        /// </summary>
        /// <value>Specifies the encoding to use when exporting in plain text format</value>
        [DataMember(Name="Encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Specifies whether to output headers and footers when exporting in plain text format
        /// </summary>
        /// <value>Specifies whether to output headers and footers when exporting in plain text format</value>
        [DataMember(Name="ExportHeadersFooters", EmitDefaultValue=false)]
        public bool? ExportHeadersFooters { get; set; }

        /// <summary>
        /// Allows to specify whether the page breaks should be preserved during export.  The default value is false.
        /// </summary>
        /// <value>Allows to specify whether the page breaks should be preserved during export.  The default value is false.</value>
        [DataMember(Name="ForcePageBreaks", EmitDefaultValue=false)]
        public bool? ForcePageBreaks { get; set; }

        /// <summary>
        /// Specifies the string to use as a paragraph break when exporting in plain text format
        /// </summary>
        /// <value>Specifies the string to use as a paragraph break when exporting in plain text format</value>
        [DataMember(Name="ParagraphBreak", EmitDefaultValue=false)]
        public string ParagraphBreak { get; set; }

        /// <summary>
        /// Specifies whether the program should attempt to preserve layout of tables when saving in the plain text format
        /// </summary>
        /// <value>Specifies whether the program should attempt to preserve layout of tables when saving in the plain text format</value>
        [DataMember(Name="PreserveTableLayout", EmitDefaultValue=false)]
        public bool? PreserveTableLayout { get; set; }

        /// <summary>
        /// Specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text
        /// </summary>
        /// <value>Specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text</value>
        [DataMember(Name="SimplifyListLabels", EmitDefaultValue=false)]
        public bool? SimplifyListLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingTextSaveOptionsData {\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  ExportHeadersFooters: ").Append(ExportHeadersFooters).Append("\n");
            sb.Append("  ForcePageBreaks: ").Append(ForcePageBreaks).Append("\n");
            sb.Append("  ParagraphBreak: ").Append(ParagraphBreak).Append("\n");
            sb.Append("  PreserveTableLayout: ").Append(PreserveTableLayout).Append("\n");
            sb.Append("  SimplifyListLabels: ").Append(SimplifyListLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingTextSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingTextSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingTextSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingTextSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Encoding == other.Encoding ||
                    this.Encoding != null &&
                    this.Encoding.Equals(other.Encoding)
                ) && 
                (
                    this.ExportHeadersFooters == other.ExportHeadersFooters ||
                    this.ExportHeadersFooters != null &&
                    this.ExportHeadersFooters.Equals(other.ExportHeadersFooters)
                ) && 
                (
                    this.ForcePageBreaks == other.ForcePageBreaks ||
                    this.ForcePageBreaks != null &&
                    this.ForcePageBreaks.Equals(other.ForcePageBreaks)
                ) && 
                (
                    this.ParagraphBreak == other.ParagraphBreak ||
                    this.ParagraphBreak != null &&
                    this.ParagraphBreak.Equals(other.ParagraphBreak)
                ) && 
                (
                    this.PreserveTableLayout == other.PreserveTableLayout ||
                    this.PreserveTableLayout != null &&
                    this.PreserveTableLayout.Equals(other.PreserveTableLayout)
                ) && 
                (
                    this.SimplifyListLabels == other.SimplifyListLabels ||
                    this.SimplifyListLabels != null &&
                    this.SimplifyListLabels.Equals(other.SimplifyListLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Encoding != null)
                    hash = hash * 59 + this.Encoding.GetHashCode();
                if (this.ExportHeadersFooters != null)
                    hash = hash * 59 + this.ExportHeadersFooters.GetHashCode();
                if (this.ForcePageBreaks != null)
                    hash = hash * 59 + this.ForcePageBreaks.GetHashCode();
                if (this.ParagraphBreak != null)
                    hash = hash * 59 + this.ParagraphBreak.GetHashCode();
                if (this.PreserveTableLayout != null)
                    hash = hash * 59 + this.PreserveTableLayout.GetHashCode();
                if (this.SimplifyListLabels != null)
                    hash = hash * 59 + this.SimplifyListLabels.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
