/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS, SWF, images etc).
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingFixedPageSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingFixedPageSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingFixedPageSaveOptionsData" /> class.
        /// </summary>
        /// <param name="JpegQuality">Determines the quality of the JPEG images inside PDF document..</param>
        /// <param name="MetafileRenderingOptions">Allows to specify metafile rendering options..</param>
        /// <param name="NumeralFormat">Indicates the symbol set that is used to represent numbers while rendering to fixed page formats.</param>
        /// <param name="OptimizeOutput">Flag indicates whether it is required to optimize output of XPS.   If this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated.   Note: The accuracy of the content display may be affected if this property is set to true.  Default is false..</param>
        /// <param name="PageCount">Determines number of pages to render.</param>
        /// <param name="PageIndex">Determines 0-based index of the first page to render.</param>
        public AsposeWordsCloudDTOSavingFixedPageSaveOptionsData(int? JpegQuality = default(int?), AsposeWordsCloudDTOSavingMetafileRenderingOptionsData MetafileRenderingOptions = default(AsposeWordsCloudDTOSavingMetafileRenderingOptionsData), string NumeralFormat = default(string), bool? OptimizeOutput = default(bool?), int? PageCount = default(int?), int? PageIndex = default(int?))
        {
            this.JpegQuality = JpegQuality;
            this.MetafileRenderingOptions = MetafileRenderingOptions;
            this.NumeralFormat = NumeralFormat;
            this.OptimizeOutput = OptimizeOutput;
            this.PageCount = PageCount;
            this.PageIndex = PageIndex;
        }
        
        /// <summary>
        /// Determines the quality of the JPEG images inside PDF document.
        /// </summary>
        /// <value>Determines the quality of the JPEG images inside PDF document.</value>
        [DataMember(Name="JpegQuality", EmitDefaultValue=false)]
        public int? JpegQuality { get; set; }

        /// <summary>
        /// Allows to specify metafile rendering options.
        /// </summary>
        /// <value>Allows to specify metafile rendering options.</value>
        [DataMember(Name="MetafileRenderingOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingMetafileRenderingOptionsData MetafileRenderingOptions { get; set; }

        /// <summary>
        /// Indicates the symbol set that is used to represent numbers while rendering to fixed page formats
        /// </summary>
        /// <value>Indicates the symbol set that is used to represent numbers while rendering to fixed page formats</value>
        [DataMember(Name="NumeralFormat", EmitDefaultValue=false)]
        public string NumeralFormat { get; set; }

        /// <summary>
        /// Flag indicates whether it is required to optimize output of XPS.   If this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated.   Note: The accuracy of the content display may be affected if this property is set to true.  Default is false.
        /// </summary>
        /// <value>Flag indicates whether it is required to optimize output of XPS.   If this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated.   Note: The accuracy of the content display may be affected if this property is set to true.  Default is false.</value>
        [DataMember(Name="OptimizeOutput", EmitDefaultValue=false)]
        public bool? OptimizeOutput { get; set; }

        /// <summary>
        /// Determines number of pages to render
        /// </summary>
        /// <value>Determines number of pages to render</value>
        [DataMember(Name="PageCount", EmitDefaultValue=false)]
        public int? PageCount { get; set; }

        /// <summary>
        /// Determines 0-based index of the first page to render
        /// </summary>
        /// <value>Determines 0-based index of the first page to render</value>
        [DataMember(Name="PageIndex", EmitDefaultValue=false)]
        public int? PageIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingFixedPageSaveOptionsData {\n");
            sb.Append("  JpegQuality: ").Append(JpegQuality).Append("\n");
            sb.Append("  MetafileRenderingOptions: ").Append(MetafileRenderingOptions).Append("\n");
            sb.Append("  NumeralFormat: ").Append(NumeralFormat).Append("\n");
            sb.Append("  OptimizeOutput: ").Append(OptimizeOutput).Append("\n");
            sb.Append("  PageCount: ").Append(PageCount).Append("\n");
            sb.Append("  PageIndex: ").Append(PageIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingFixedPageSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingFixedPageSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingFixedPageSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingFixedPageSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.JpegQuality == other.JpegQuality ||
                    this.JpegQuality != null &&
                    this.JpegQuality.Equals(other.JpegQuality)
                ) && 
                (
                    this.MetafileRenderingOptions == other.MetafileRenderingOptions ||
                    this.MetafileRenderingOptions != null &&
                    this.MetafileRenderingOptions.Equals(other.MetafileRenderingOptions)
                ) && 
                (
                    this.NumeralFormat == other.NumeralFormat ||
                    this.NumeralFormat != null &&
                    this.NumeralFormat.Equals(other.NumeralFormat)
                ) && 
                (
                    this.OptimizeOutput == other.OptimizeOutput ||
                    this.OptimizeOutput != null &&
                    this.OptimizeOutput.Equals(other.OptimizeOutput)
                ) && 
                (
                    this.PageCount == other.PageCount ||
                    this.PageCount != null &&
                    this.PageCount.Equals(other.PageCount)
                ) && 
                (
                    this.PageIndex == other.PageIndex ||
                    this.PageIndex != null &&
                    this.PageIndex.Equals(other.PageIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.JpegQuality != null)
                    hash = hash * 59 + this.JpegQuality.GetHashCode();
                if (this.MetafileRenderingOptions != null)
                    hash = hash * 59 + this.MetafileRenderingOptions.GetHashCode();
                if (this.NumeralFormat != null)
                    hash = hash * 59 + this.NumeralFormat.GetHashCode();
                if (this.OptimizeOutput != null)
                    hash = hash * 59 + this.OptimizeOutput.GetHashCode();
                if (this.PageCount != null)
                    hash = hash * 59 + this.PageCount.GetHashCode();
                if (this.PageIndex != null)
                    hash = hash * 59 + this.PageIndex.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
