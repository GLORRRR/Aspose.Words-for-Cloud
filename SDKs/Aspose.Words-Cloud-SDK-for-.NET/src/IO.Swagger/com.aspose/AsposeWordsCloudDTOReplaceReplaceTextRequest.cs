/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Class for document replace text request building.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOReplaceReplaceTextRequest :  IEquatable<AsposeWordsCloudDTOReplaceReplaceTextRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOReplaceReplaceTextRequest" /> class.
        /// </summary>
        /// <param name="OldValue">Old text value (or regex pattern {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.IsOldValueRegex}) to replace..</param>
        /// <param name="NewValue">New text value to replace by..</param>
        /// <param name="IsMatchCase">Flag, true means the search is case-sensitive; false means the search is not case-sensitive..</param>
        /// <param name="IsMatchWholeWord">Flag, means that only whole word matched are replaced..</param>
        /// <param name="IsOldValueRegex">Flag, means that {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.OldValue} contains regex expression..</param>
        public AsposeWordsCloudDTOReplaceReplaceTextRequest(string OldValue = default(string), string NewValue = default(string), bool? IsMatchCase = default(bool?), bool? IsMatchWholeWord = default(bool?), bool? IsOldValueRegex = default(bool?))
        {
            this.OldValue = OldValue;
            this.NewValue = NewValue;
            this.IsMatchCase = IsMatchCase;
            this.IsMatchWholeWord = IsMatchWholeWord;
            this.IsOldValueRegex = IsOldValueRegex;
        }
        
        /// <summary>
        /// Old text value (or regex pattern {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.IsOldValueRegex}) to replace.
        /// </summary>
        /// <value>Old text value (or regex pattern {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.IsOldValueRegex}) to replace.</value>
        [DataMember(Name="OldValue", EmitDefaultValue=false)]
        public string OldValue { get; set; }

        /// <summary>
        /// New text value to replace by.
        /// </summary>
        /// <value>New text value to replace by.</value>
        [DataMember(Name="NewValue", EmitDefaultValue=false)]
        public string NewValue { get; set; }

        /// <summary>
        /// Flag, true means the search is case-sensitive; false means the search is not case-sensitive.
        /// </summary>
        /// <value>Flag, true means the search is case-sensitive; false means the search is not case-sensitive.</value>
        [DataMember(Name="IsMatchCase", EmitDefaultValue=false)]
        public bool? IsMatchCase { get; set; }

        /// <summary>
        /// Flag, means that only whole word matched are replaced.
        /// </summary>
        /// <value>Flag, means that only whole word matched are replaced.</value>
        [DataMember(Name="IsMatchWholeWord", EmitDefaultValue=false)]
        public bool? IsMatchWholeWord { get; set; }

        /// <summary>
        /// Flag, means that {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.OldValue} contains regex expression.
        /// </summary>
        /// <value>Flag, means that {Aspose.Words.Cloud.DTO.Replace.ReplaceTextRequest.OldValue} contains regex expression.</value>
        [DataMember(Name="IsOldValueRegex", EmitDefaultValue=false)]
        public bool? IsOldValueRegex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOReplaceReplaceTextRequest {\n");
            sb.Append("  OldValue: ").Append(OldValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("  IsMatchCase: ").Append(IsMatchCase).Append("\n");
            sb.Append("  IsMatchWholeWord: ").Append(IsMatchWholeWord).Append("\n");
            sb.Append("  IsOldValueRegex: ").Append(IsOldValueRegex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOReplaceReplaceTextRequest);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOReplaceReplaceTextRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOReplaceReplaceTextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOReplaceReplaceTextRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OldValue == other.OldValue ||
                    this.OldValue != null &&
                    this.OldValue.Equals(other.OldValue)
                ) && 
                (
                    this.NewValue == other.NewValue ||
                    this.NewValue != null &&
                    this.NewValue.Equals(other.NewValue)
                ) && 
                (
                    this.IsMatchCase == other.IsMatchCase ||
                    this.IsMatchCase != null &&
                    this.IsMatchCase.Equals(other.IsMatchCase)
                ) && 
                (
                    this.IsMatchWholeWord == other.IsMatchWholeWord ||
                    this.IsMatchWholeWord != null &&
                    this.IsMatchWholeWord.Equals(other.IsMatchWholeWord)
                ) && 
                (
                    this.IsOldValueRegex == other.IsOldValueRegex ||
                    this.IsOldValueRegex != null &&
                    this.IsOldValueRegex.Equals(other.IsOldValueRegex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OldValue != null)
                    hash = hash * 59 + this.OldValue.GetHashCode();
                if (this.NewValue != null)
                    hash = hash * 59 + this.NewValue.GetHashCode();
                if (this.IsMatchCase != null)
                    hash = hash * 59 + this.IsMatchCase.GetHashCode();
                if (this.IsMatchWholeWord != null)
                    hash = hash * 59 + this.IsMatchWholeWord.GetHashCode();
                if (this.IsOldValueRegex != null)
                    hash = hash * 59 + this.IsOldValueRegex.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
