/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Container class for xps save options.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingXpsSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingXpsSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingXpsSaveOptionsData" /> class.
        /// </summary>
        /// <param name="BookmarksOutlineLevel">Specifies the level in the XPS document outline at which to display Word bookmarks..</param>
        /// <param name="HeadingsOutlineLevels">Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the XPS document outline..</param>
        /// <param name="OutlineOptions">Allows to specify outline options.</param>
        /// <param name="UseBookFoldPrintingSettings">Determines whether the document should be saved using a booklet printing layout.</param>
        public AsposeWordsCloudDTOSavingXpsSaveOptionsData(int? BookmarksOutlineLevel = default(int?), int? HeadingsOutlineLevels = default(int?), AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions = default(AsposeWordsCloudDTOSavingOutlineOptionsData), bool? UseBookFoldPrintingSettings = default(bool?))
        {
            this.BookmarksOutlineLevel = BookmarksOutlineLevel;
            this.HeadingsOutlineLevels = HeadingsOutlineLevels;
            this.OutlineOptions = OutlineOptions;
            this.UseBookFoldPrintingSettings = UseBookFoldPrintingSettings;
        }
        
        /// <summary>
        /// Specifies the level in the XPS document outline at which to display Word bookmarks.
        /// </summary>
        /// <value>Specifies the level in the XPS document outline at which to display Word bookmarks.</value>
        [DataMember(Name="BookmarksOutlineLevel", EmitDefaultValue=false)]
        public int? BookmarksOutlineLevel { get; set; }

        /// <summary>
        /// Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the XPS document outline.
        /// </summary>
        /// <value>Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the XPS document outline.</value>
        [DataMember(Name="HeadingsOutlineLevels", EmitDefaultValue=false)]
        public int? HeadingsOutlineLevels { get; set; }

        /// <summary>
        /// Allows to specify outline options
        /// </summary>
        /// <value>Allows to specify outline options</value>
        [DataMember(Name="OutlineOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions { get; set; }

        /// <summary>
        /// Determines whether the document should be saved using a booklet printing layout
        /// </summary>
        /// <value>Determines whether the document should be saved using a booklet printing layout</value>
        [DataMember(Name="UseBookFoldPrintingSettings", EmitDefaultValue=false)]
        public bool? UseBookFoldPrintingSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingXpsSaveOptionsData {\n");
            sb.Append("  BookmarksOutlineLevel: ").Append(BookmarksOutlineLevel).Append("\n");
            sb.Append("  HeadingsOutlineLevels: ").Append(HeadingsOutlineLevels).Append("\n");
            sb.Append("  OutlineOptions: ").Append(OutlineOptions).Append("\n");
            sb.Append("  UseBookFoldPrintingSettings: ").Append(UseBookFoldPrintingSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingXpsSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingXpsSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingXpsSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingXpsSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookmarksOutlineLevel == other.BookmarksOutlineLevel ||
                    this.BookmarksOutlineLevel != null &&
                    this.BookmarksOutlineLevel.Equals(other.BookmarksOutlineLevel)
                ) && 
                (
                    this.HeadingsOutlineLevels == other.HeadingsOutlineLevels ||
                    this.HeadingsOutlineLevels != null &&
                    this.HeadingsOutlineLevels.Equals(other.HeadingsOutlineLevels)
                ) && 
                (
                    this.OutlineOptions == other.OutlineOptions ||
                    this.OutlineOptions != null &&
                    this.OutlineOptions.Equals(other.OutlineOptions)
                ) && 
                (
                    this.UseBookFoldPrintingSettings == other.UseBookFoldPrintingSettings ||
                    this.UseBookFoldPrintingSettings != null &&
                    this.UseBookFoldPrintingSettings.Equals(other.UseBookFoldPrintingSettings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookmarksOutlineLevel != null)
                    hash = hash * 59 + this.BookmarksOutlineLevel.GetHashCode();
                if (this.HeadingsOutlineLevels != null)
                    hash = hash * 59 + this.HeadingsOutlineLevels.GetHashCode();
                if (this.OutlineOptions != null)
                    hash = hash * 59 + this.OutlineOptions.GetHashCode();
                if (this.UseBookFoldPrintingSettings != null)
                    hash = hash * 59 + this.UseBookFoldPrintingSettings.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
