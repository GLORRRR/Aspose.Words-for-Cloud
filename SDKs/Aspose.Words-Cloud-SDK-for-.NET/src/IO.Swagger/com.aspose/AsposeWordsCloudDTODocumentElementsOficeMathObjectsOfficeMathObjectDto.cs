/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// OfficeMath object.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto :  IEquatable<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto>, IValidatableObject
    {
        /// <summary>
        /// Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text  or displayed on its own line.
        /// </summary>
        /// <value>Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text  or displayed on its own line.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayTypeEnum
        {
            
            /// <summary>
            /// Enum Display for "Display"
            /// </summary>
            [EnumMember(Value = "Display")]
            Display,
            
            /// <summary>
            /// Enum Inline for "Inline"
            /// </summary>
            [EnumMember(Value = "Inline")]
            Inline
        }

        /// <summary>
        /// Gets/sets Office Math justification.
        /// </summary>
        /// <value>Gets/sets Office Math justification.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JustificationEnum
        {
            
            /// <summary>
            /// Enum CenterGroup for "CenterGroup"
            /// </summary>
            [EnumMember(Value = "CenterGroup")]
            CenterGroup,
            
            /// <summary>
            /// Enum Center for "Center"
            /// </summary>
            [EnumMember(Value = "Center")]
            Center,
            
            /// <summary>
            /// Enum Left for "Left"
            /// </summary>
            [EnumMember(Value = "Left")]
            Left,
            
            /// <summary>
            /// Enum Right for "Right"
            /// </summary>
            [EnumMember(Value = "Right")]
            Right,
            
            /// <summary>
            /// Enum Inline for "Inline"
            /// </summary>
            [EnumMember(Value = "Inline")]
            Inline,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default
        }

        /// <summary>
        /// Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object.
        /// </summary>
        /// <value>Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MathObjectTypeEnum
        {
            
            /// <summary>
            /// Enum OMath for "OMath"
            /// </summary>
            [EnumMember(Value = "OMath")]
            OMath,
            
            /// <summary>
            /// Enum OMathPara for "OMathPara"
            /// </summary>
            [EnumMember(Value = "OMathPara")]
            OMathPara,
            
            /// <summary>
            /// Enum Accent for "Accent"
            /// </summary>
            [EnumMember(Value = "Accent")]
            Accent,
            
            /// <summary>
            /// Enum Bar for "Bar"
            /// </summary>
            [EnumMember(Value = "Bar")]
            Bar,
            
            /// <summary>
            /// Enum BorderBox for "BorderBox"
            /// </summary>
            [EnumMember(Value = "BorderBox")]
            BorderBox,
            
            /// <summary>
            /// Enum Box for "Box"
            /// </summary>
            [EnumMember(Value = "Box")]
            Box,
            
            /// <summary>
            /// Enum Delimiter for "Delimiter"
            /// </summary>
            [EnumMember(Value = "Delimiter")]
            Delimiter,
            
            /// <summary>
            /// Enum Degree for "Degree"
            /// </summary>
            [EnumMember(Value = "Degree")]
            Degree,
            
            /// <summary>
            /// Enum Argument for "Argument"
            /// </summary>
            [EnumMember(Value = "Argument")]
            Argument,
            
            /// <summary>
            /// Enum Array for "Array"
            /// </summary>
            [EnumMember(Value = "Array")]
            Array,
            
            /// <summary>
            /// Enum Fraction for "Fraction"
            /// </summary>
            [EnumMember(Value = "Fraction")]
            Fraction,
            
            /// <summary>
            /// Enum Denominator for "Denominator"
            /// </summary>
            [EnumMember(Value = "Denominator")]
            Denominator,
            
            /// <summary>
            /// Enum Numerator for "Numerator"
            /// </summary>
            [EnumMember(Value = "Numerator")]
            Numerator,
            
            /// <summary>
            /// Enum Function for "Function"
            /// </summary>
            [EnumMember(Value = "Function")]
            Function,
            
            /// <summary>
            /// Enum FunctionName for "FunctionName"
            /// </summary>
            [EnumMember(Value = "FunctionName")]
            FunctionName,
            
            /// <summary>
            /// Enum GroupCharacter for "GroupCharacter"
            /// </summary>
            [EnumMember(Value = "GroupCharacter")]
            GroupCharacter,
            
            /// <summary>
            /// Enum Limit for "Limit"
            /// </summary>
            [EnumMember(Value = "Limit")]
            Limit,
            
            /// <summary>
            /// Enum LowerLimit for "LowerLimit"
            /// </summary>
            [EnumMember(Value = "LowerLimit")]
            LowerLimit,
            
            /// <summary>
            /// Enum UpperLimit for "UpperLimit"
            /// </summary>
            [EnumMember(Value = "UpperLimit")]
            UpperLimit,
            
            /// <summary>
            /// Enum Matrix for "Matrix"
            /// </summary>
            [EnumMember(Value = "Matrix")]
            Matrix,
            
            /// <summary>
            /// Enum MatrixRow for "MatrixRow"
            /// </summary>
            [EnumMember(Value = "MatrixRow")]
            MatrixRow,
            
            /// <summary>
            /// Enum NAry for "NAry"
            /// </summary>
            [EnumMember(Value = "NAry")]
            NAry,
            
            /// <summary>
            /// Enum Phantom for "Phantom"
            /// </summary>
            [EnumMember(Value = "Phantom")]
            Phantom,
            
            /// <summary>
            /// Enum Radical for "Radical"
            /// </summary>
            [EnumMember(Value = "Radical")]
            Radical,
            
            /// <summary>
            /// Enum SubscriptPart for "SubscriptPart"
            /// </summary>
            [EnumMember(Value = "SubscriptPart")]
            SubscriptPart,
            
            /// <summary>
            /// Enum SuperscriptPart for "SuperscriptPart"
            /// </summary>
            [EnumMember(Value = "SuperscriptPart")]
            SuperscriptPart,
            
            /// <summary>
            /// Enum PreSubSuperscript for "PreSubSuperscript"
            /// </summary>
            [EnumMember(Value = "PreSubSuperscript")]
            PreSubSuperscript,
            
            /// <summary>
            /// Enum Subscript for "Subscript"
            /// </summary>
            [EnumMember(Value = "Subscript")]
            Subscript,
            
            /// <summary>
            /// Enum SubSuperscript for "SubSuperscript"
            /// </summary>
            [EnumMember(Value = "SubSuperscript")]
            SubSuperscript,
            
            /// <summary>
            /// Enum Supercript for "Supercript"
            /// </summary>
            [EnumMember(Value = "Supercript")]
            Supercript
        }

        /// <summary>
        /// Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text  or displayed on its own line.
        /// </summary>
        /// <value>Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text  or displayed on its own line.</value>
        [DataMember(Name="DisplayType", EmitDefaultValue=false)]
        public DisplayTypeEnum? DisplayType { get; set; }
        /// <summary>
        /// Gets/sets Office Math justification.
        /// </summary>
        /// <value>Gets/sets Office Math justification.</value>
        [DataMember(Name="Justification", EmitDefaultValue=false)]
        public JustificationEnum? Justification { get; set; }
        /// <summary>
        /// Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object.
        /// </summary>
        /// <value>Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object.</value>
        [DataMember(Name="MathObjectType", EmitDefaultValue=false)]
        public MathObjectTypeEnum? MathObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto" /> class.
        /// </summary>
        /// <param name="Content">Content of footnote..</param>
        /// <param name="DisplayType">Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text  or displayed on its own line..</param>
        /// <param name="Justification">Gets/sets Office Math justification..</param>
        /// <param name="MathObjectType">Gets type Aspose.Words.Math.OfficeMath.MathObjectType of this Office Math object..</param>
        /// <param name="NodeId">Node id.</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto(AsposeWordsCloudDTODocumentElementsStoryChildNodes Content = default(AsposeWordsCloudDTODocumentElementsStoryChildNodes), DisplayTypeEnum? DisplayType = default(DisplayTypeEnum?), JustificationEnum? Justification = default(JustificationEnum?), MathObjectTypeEnum? MathObjectType = default(MathObjectTypeEnum?), string NodeId = default(string), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.Content = Content;
            this.DisplayType = DisplayType;
            this.Justification = Justification;
            this.MathObjectType = MathObjectType;
            this.NodeId = NodeId;
            this.Link = Link;
        }
        
        /// <summary>
        /// Content of footnote.
        /// </summary>
        /// <value>Content of footnote.</value>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentElementsStoryChildNodes Content { get; set; }




        /// <summary>
        /// Node id
        /// </summary>
        /// <value>Node id</value>
        [DataMember(Name="NodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  Justification: ").Append(Justification).Append("\n");
            sb.Append("  MathObjectType: ").Append(MathObjectType).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.DisplayType == other.DisplayType ||
                    this.DisplayType != null &&
                    this.DisplayType.Equals(other.DisplayType)
                ) && 
                (
                    this.Justification == other.Justification ||
                    this.Justification != null &&
                    this.Justification.Equals(other.Justification)
                ) && 
                (
                    this.MathObjectType == other.MathObjectType ||
                    this.MathObjectType != null &&
                    this.MathObjectType.Equals(other.MathObjectType)
                ) && 
                (
                    this.NodeId == other.NodeId ||
                    this.NodeId != null &&
                    this.NodeId.Equals(other.NodeId)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.DisplayType != null)
                    hash = hash * 59 + this.DisplayType.GetHashCode();
                if (this.Justification != null)
                    hash = hash * 59 + this.Justification.GetHashCode();
                if (this.MathObjectType != null)
                    hash = hash * 59 + this.MathObjectType.GetHashCode();
                if (this.NodeId != null)
                    hash = hash * 59 + this.NodeId.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
