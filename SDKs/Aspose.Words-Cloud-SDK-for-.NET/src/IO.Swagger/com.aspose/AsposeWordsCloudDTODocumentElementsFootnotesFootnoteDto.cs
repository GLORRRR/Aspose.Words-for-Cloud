/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Footnote.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto :  IEquatable<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto>, IValidatableObject
    {
        /// <summary>
        /// Returns a value that specifies whether this is a footnote or endnote.
        /// </summary>
        /// <value>Returns a value that specifies whether this is a footnote or endnote.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FootnoteTypeEnum
        {
            
            /// <summary>
            /// Enum Footnote for "Footnote"
            /// </summary>
            [EnumMember(Value = "Footnote")]
            Footnote,
            
            /// <summary>
            /// Enum Endnote for "Endnote"
            /// </summary>
            [EnumMember(Value = "Endnote")]
            Endnote
        }

        /// <summary>
        /// Returns a value that specifies whether this is a footnote or endnote.
        /// </summary>
        /// <value>Returns a value that specifies whether this is a footnote or endnote.</value>
        [DataMember(Name="FootnoteType", EmitDefaultValue=false)]
        public FootnoteTypeEnum? FootnoteType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto" /> class.
        /// </summary>
        /// <param name="Position">Link to comment range start node..</param>
        /// <param name="FootnoteType">Returns a value that specifies whether this is a footnote or endnote..</param>
        /// <param name="ReferenceMark">Gets/sets custom reference mark to be used for this footnote.  Default value is {System.String.Empty}, meaning auto-numbered footnotes are used..</param>
        /// <param name="Text">This is a convenience property that allows to easily get or set text of the footnote..</param>
        /// <param name="Content">Content of footnote..</param>
        /// <param name="NodeId">Node id.</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto(AsposeWordsCloudDTODocumentPositionDto Position = default(AsposeWordsCloudDTODocumentPositionDto), FootnoteTypeEnum? FootnoteType = default(FootnoteTypeEnum?), string ReferenceMark = default(string), string Text = default(string), AsposeWordsCloudDTODocumentElementsStoryChildNodes Content = default(AsposeWordsCloudDTODocumentElementsStoryChildNodes), string NodeId = default(string), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.Position = Position;
            this.FootnoteType = FootnoteType;
            this.ReferenceMark = ReferenceMark;
            this.Text = Text;
            this.Content = Content;
            this.NodeId = NodeId;
            this.Link = Link;
        }
        
        /// <summary>
        /// Link to comment range start node.
        /// </summary>
        /// <value>Link to comment range start node.</value>
        [DataMember(Name="Position", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentPositionDto Position { get; set; }


        /// <summary>
        /// Gets/sets custom reference mark to be used for this footnote.  Default value is {System.String.Empty}, meaning auto-numbered footnotes are used.
        /// </summary>
        /// <value>Gets/sets custom reference mark to be used for this footnote.  Default value is {System.String.Empty}, meaning auto-numbered footnotes are used.</value>
        [DataMember(Name="ReferenceMark", EmitDefaultValue=false)]
        public string ReferenceMark { get; set; }

        /// <summary>
        /// This is a convenience property that allows to easily get or set text of the footnote.
        /// </summary>
        /// <value>This is a convenience property that allows to easily get or set text of the footnote.</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Content of footnote.
        /// </summary>
        /// <value>Content of footnote.</value>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentElementsStoryChildNodes Content { get; set; }

        /// <summary>
        /// Node id
        /// </summary>
        /// <value>Node id</value>
        [DataMember(Name="NodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  FootnoteType: ").Append(FootnoteType).Append("\n");
            sb.Append("  ReferenceMark: ").Append(ReferenceMark).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.FootnoteType == other.FootnoteType ||
                    this.FootnoteType != null &&
                    this.FootnoteType.Equals(other.FootnoteType)
                ) && 
                (
                    this.ReferenceMark == other.ReferenceMark ||
                    this.ReferenceMark != null &&
                    this.ReferenceMark.Equals(other.ReferenceMark)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.NodeId == other.NodeId ||
                    this.NodeId != null &&
                    this.NodeId.Equals(other.NodeId)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.FootnoteType != null)
                    hash = hash * 59 + this.FootnoteType.GetHashCode();
                if (this.ReferenceMark != null)
                    hash = hash * 59 + this.ReferenceMark.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.NodeId != null)
                    hash = hash * 59 + this.NodeId.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
