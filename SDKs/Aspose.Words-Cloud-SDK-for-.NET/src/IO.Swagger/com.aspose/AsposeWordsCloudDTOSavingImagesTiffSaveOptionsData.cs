/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Container class for tiff save options.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData" /> class.
        /// </summary>
        /// <param name="TiffBinarizationMethod">Specifies method used while converting images to 1 bpp format..</param>
        /// <param name="TiffCompression">Type of compression..</param>
        public AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData(string TiffBinarizationMethod = default(string), string TiffCompression = default(string))
        {
            this.TiffBinarizationMethod = TiffBinarizationMethod;
            this.TiffCompression = TiffCompression;
        }
        
        /// <summary>
        /// Specifies method used while converting images to 1 bpp format.
        /// </summary>
        /// <value>Specifies method used while converting images to 1 bpp format.</value>
        [DataMember(Name="TiffBinarizationMethod", EmitDefaultValue=false)]
        public string TiffBinarizationMethod { get; set; }

        /// <summary>
        /// Type of compression.
        /// </summary>
        /// <value>Type of compression.</value>
        [DataMember(Name="TiffCompression", EmitDefaultValue=false)]
        public string TiffCompression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData {\n");
            sb.Append("  TiffBinarizationMethod: ").Append(TiffBinarizationMethod).Append("\n");
            sb.Append("  TiffCompression: ").Append(TiffCompression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TiffBinarizationMethod == other.TiffBinarizationMethod ||
                    this.TiffBinarizationMethod != null &&
                    this.TiffBinarizationMethod.Equals(other.TiffBinarizationMethod)
                ) && 
                (
                    this.TiffCompression == other.TiffCompression ||
                    this.TiffCompression != null &&
                    this.TiffCompression.Equals(other.TiffCompression)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TiffBinarizationMethod != null)
                    hash = hash * 59 + this.TiffBinarizationMethod.GetHashCode();
                if (this.TiffCompression != null)
                    hash = hash * 59 + this.TiffCompression.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
