/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for docx/docm/dotx/dotm/flatopc save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingOoxmlSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingOoxmlSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingOoxmlSaveOptionsData" /> class.
        /// </summary>
        /// <param name="PrettyFormat">Specifies whether or not use pretty formats output.</param>
        /// <param name="Compliance">Specifies the OOXML version for the output document.</param>
        /// <param name="Password">Specifies a password to encrypt document using ECMA376 Standard encryption algorithm.</param>
        public AsposeWordsCloudDTOSavingOoxmlSaveOptionsData(bool? PrettyFormat = default(bool?), string Compliance = default(string), string Password = default(string))
        {
            this.PrettyFormat = PrettyFormat;
            this.Compliance = Compliance;
            this.Password = Password;
        }
        
        /// <summary>
        /// Specifies whether or not use pretty formats output
        /// </summary>
        /// <value>Specifies whether or not use pretty formats output</value>
        [DataMember(Name="PrettyFormat", EmitDefaultValue=false)]
        public bool? PrettyFormat { get; set; }

        /// <summary>
        /// Specifies the OOXML version for the output document
        /// </summary>
        /// <value>Specifies the OOXML version for the output document</value>
        [DataMember(Name="Compliance", EmitDefaultValue=false)]
        public string Compliance { get; set; }

        /// <summary>
        /// Specifies a password to encrypt document using ECMA376 Standard encryption algorithm
        /// </summary>
        /// <value>Specifies a password to encrypt document using ECMA376 Standard encryption algorithm</value>
        [DataMember(Name="Password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingOoxmlSaveOptionsData {\n");
            sb.Append("  PrettyFormat: ").Append(PrettyFormat).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingOoxmlSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingOoxmlSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingOoxmlSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingOoxmlSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PrettyFormat == other.PrettyFormat ||
                    this.PrettyFormat != null &&
                    this.PrettyFormat.Equals(other.PrettyFormat)
                ) && 
                (
                    this.Compliance == other.Compliance ||
                    this.Compliance != null &&
                    this.Compliance.Equals(other.Compliance)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PrettyFormat != null)
                    hash = hash * 59 + this.PrettyFormat.GetHashCode();
                if (this.Compliance != null)
                    hash = hash * 59 + this.Compliance.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
