/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for fixed html save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData" /> class.
        /// </summary>
        /// <param name="CssClassNamesPrefix">Specifies prefix which is added to all class names in style.css file.  Default value is \&quot;aw\&quot;..</param>
        /// <param name="ExportEmbeddedCss">Specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document..</param>
        /// <param name="ExportEmbeddedFonts">Specifies whether fonts should be embedded into Html document in Base64 format..</param>
        /// <param name="ExportEmbeddedImages">Specifies whether images should be embedded into Html document in Base64 format..</param>
        /// <param name="ExportFormFields">Gets or sets indication of whether form fields are exported as interactive items (as &#39;input&#39; tag) rather than converted to text or graphics..</param>
        /// <param name="Encoding">Encoding..</param>
        /// <param name="FontFormat">Specifies export format of fonts.</param>
        /// <param name="ResourcesFolder">Specifies the physical folder where resources are saved when exporting a document.</param>
        /// <param name="ResourcesFolderAlias">Specifies the name of the folder used to construct resource URIs.</param>
        /// <param name="ShowPageBorder">Specifies whether border around pages should be shown..</param>
        /// <param name="PageHorizontalAlignment">Specifies the horizontal alignment of pages in an HTML document.  Default value is HtmlFixedHorizontalPageAlignment.Center..</param>
        /// <param name="PageMargins">Specifies the margins around pages in an HTML document.  The margins value is measured in points and should be equal to or greater than 0.  Default value is 10 points..</param>
        public AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData(string CssClassNamesPrefix = default(string), bool? ExportEmbeddedCss = default(bool?), bool? ExportEmbeddedFonts = default(bool?), bool? ExportEmbeddedImages = default(bool?), bool? ExportFormFields = default(bool?), string Encoding = default(string), string FontFormat = default(string), string ResourcesFolder = default(string), string ResourcesFolderAlias = default(string), bool? ShowPageBorder = default(bool?), string PageHorizontalAlignment = default(string), double? PageMargins = default(double?))
        {
            this.CssClassNamesPrefix = CssClassNamesPrefix;
            this.ExportEmbeddedCss = ExportEmbeddedCss;
            this.ExportEmbeddedFonts = ExportEmbeddedFonts;
            this.ExportEmbeddedImages = ExportEmbeddedImages;
            this.ExportFormFields = ExportFormFields;
            this.Encoding = Encoding;
            this.FontFormat = FontFormat;
            this.ResourcesFolder = ResourcesFolder;
            this.ResourcesFolderAlias = ResourcesFolderAlias;
            this.ShowPageBorder = ShowPageBorder;
            this.PageHorizontalAlignment = PageHorizontalAlignment;
            this.PageMargins = PageMargins;
        }
        
        /// <summary>
        /// Specifies prefix which is added to all class names in style.css file.  Default value is \&quot;aw\&quot;.
        /// </summary>
        /// <value>Specifies prefix which is added to all class names in style.css file.  Default value is \&quot;aw\&quot;.</value>
        [DataMember(Name="CssClassNamesPrefix", EmitDefaultValue=false)]
        public string CssClassNamesPrefix { get; set; }

        /// <summary>
        /// Specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document.
        /// </summary>
        /// <value>Specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document.</value>
        [DataMember(Name="ExportEmbeddedCss", EmitDefaultValue=false)]
        public bool? ExportEmbeddedCss { get; set; }

        /// <summary>
        /// Specifies whether fonts should be embedded into Html document in Base64 format.
        /// </summary>
        /// <value>Specifies whether fonts should be embedded into Html document in Base64 format.</value>
        [DataMember(Name="ExportEmbeddedFonts", EmitDefaultValue=false)]
        public bool? ExportEmbeddedFonts { get; set; }

        /// <summary>
        /// Specifies whether images should be embedded into Html document in Base64 format.
        /// </summary>
        /// <value>Specifies whether images should be embedded into Html document in Base64 format.</value>
        [DataMember(Name="ExportEmbeddedImages", EmitDefaultValue=false)]
        public bool? ExportEmbeddedImages { get; set; }

        /// <summary>
        /// Gets or sets indication of whether form fields are exported as interactive items (as &#39;input&#39; tag) rather than converted to text or graphics.
        /// </summary>
        /// <value>Gets or sets indication of whether form fields are exported as interactive items (as &#39;input&#39; tag) rather than converted to text or graphics.</value>
        [DataMember(Name="ExportFormFields", EmitDefaultValue=false)]
        public bool? ExportFormFields { get; set; }

        /// <summary>
        /// Encoding.
        /// </summary>
        /// <value>Encoding.</value>
        [DataMember(Name="Encoding", EmitDefaultValue=false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Specifies export format of fonts
        /// </summary>
        /// <value>Specifies export format of fonts</value>
        [DataMember(Name="FontFormat", EmitDefaultValue=false)]
        public string FontFormat { get; set; }

        /// <summary>
        /// Specifies the physical folder where resources are saved when exporting a document
        /// </summary>
        /// <value>Specifies the physical folder where resources are saved when exporting a document</value>
        [DataMember(Name="ResourcesFolder", EmitDefaultValue=false)]
        public string ResourcesFolder { get; set; }

        /// <summary>
        /// Specifies the name of the folder used to construct resource URIs
        /// </summary>
        /// <value>Specifies the name of the folder used to construct resource URIs</value>
        [DataMember(Name="ResourcesFolderAlias", EmitDefaultValue=false)]
        public string ResourcesFolderAlias { get; set; }

        /// <summary>
        /// Specifies whether border around pages should be shown.
        /// </summary>
        /// <value>Specifies whether border around pages should be shown.</value>
        [DataMember(Name="ShowPageBorder", EmitDefaultValue=false)]
        public bool? ShowPageBorder { get; set; }

        /// <summary>
        /// Specifies the horizontal alignment of pages in an HTML document.  Default value is HtmlFixedHorizontalPageAlignment.Center.
        /// </summary>
        /// <value>Specifies the horizontal alignment of pages in an HTML document.  Default value is HtmlFixedHorizontalPageAlignment.Center.</value>
        [DataMember(Name="PageHorizontalAlignment", EmitDefaultValue=false)]
        public string PageHorizontalAlignment { get; set; }

        /// <summary>
        /// Specifies the margins around pages in an HTML document.  The margins value is measured in points and should be equal to or greater than 0.  Default value is 10 points.
        /// </summary>
        /// <value>Specifies the margins around pages in an HTML document.  The margins value is measured in points and should be equal to or greater than 0.  Default value is 10 points.</value>
        [DataMember(Name="PageMargins", EmitDefaultValue=false)]
        public double? PageMargins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData {\n");
            sb.Append("  CssClassNamesPrefix: ").Append(CssClassNamesPrefix).Append("\n");
            sb.Append("  ExportEmbeddedCss: ").Append(ExportEmbeddedCss).Append("\n");
            sb.Append("  ExportEmbeddedFonts: ").Append(ExportEmbeddedFonts).Append("\n");
            sb.Append("  ExportEmbeddedImages: ").Append(ExportEmbeddedImages).Append("\n");
            sb.Append("  ExportFormFields: ").Append(ExportFormFields).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  FontFormat: ").Append(FontFormat).Append("\n");
            sb.Append("  ResourcesFolder: ").Append(ResourcesFolder).Append("\n");
            sb.Append("  ResourcesFolderAlias: ").Append(ResourcesFolderAlias).Append("\n");
            sb.Append("  ShowPageBorder: ").Append(ShowPageBorder).Append("\n");
            sb.Append("  PageHorizontalAlignment: ").Append(PageHorizontalAlignment).Append("\n");
            sb.Append("  PageMargins: ").Append(PageMargins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingHtmlFixedSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CssClassNamesPrefix == other.CssClassNamesPrefix ||
                    this.CssClassNamesPrefix != null &&
                    this.CssClassNamesPrefix.Equals(other.CssClassNamesPrefix)
                ) && 
                (
                    this.ExportEmbeddedCss == other.ExportEmbeddedCss ||
                    this.ExportEmbeddedCss != null &&
                    this.ExportEmbeddedCss.Equals(other.ExportEmbeddedCss)
                ) && 
                (
                    this.ExportEmbeddedFonts == other.ExportEmbeddedFonts ||
                    this.ExportEmbeddedFonts != null &&
                    this.ExportEmbeddedFonts.Equals(other.ExportEmbeddedFonts)
                ) && 
                (
                    this.ExportEmbeddedImages == other.ExportEmbeddedImages ||
                    this.ExportEmbeddedImages != null &&
                    this.ExportEmbeddedImages.Equals(other.ExportEmbeddedImages)
                ) && 
                (
                    this.ExportFormFields == other.ExportFormFields ||
                    this.ExportFormFields != null &&
                    this.ExportFormFields.Equals(other.ExportFormFields)
                ) && 
                (
                    this.Encoding == other.Encoding ||
                    this.Encoding != null &&
                    this.Encoding.Equals(other.Encoding)
                ) && 
                (
                    this.FontFormat == other.FontFormat ||
                    this.FontFormat != null &&
                    this.FontFormat.Equals(other.FontFormat)
                ) && 
                (
                    this.ResourcesFolder == other.ResourcesFolder ||
                    this.ResourcesFolder != null &&
                    this.ResourcesFolder.Equals(other.ResourcesFolder)
                ) && 
                (
                    this.ResourcesFolderAlias == other.ResourcesFolderAlias ||
                    this.ResourcesFolderAlias != null &&
                    this.ResourcesFolderAlias.Equals(other.ResourcesFolderAlias)
                ) && 
                (
                    this.ShowPageBorder == other.ShowPageBorder ||
                    this.ShowPageBorder != null &&
                    this.ShowPageBorder.Equals(other.ShowPageBorder)
                ) && 
                (
                    this.PageHorizontalAlignment == other.PageHorizontalAlignment ||
                    this.PageHorizontalAlignment != null &&
                    this.PageHorizontalAlignment.Equals(other.PageHorizontalAlignment)
                ) && 
                (
                    this.PageMargins == other.PageMargins ||
                    this.PageMargins != null &&
                    this.PageMargins.Equals(other.PageMargins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CssClassNamesPrefix != null)
                    hash = hash * 59 + this.CssClassNamesPrefix.GetHashCode();
                if (this.ExportEmbeddedCss != null)
                    hash = hash * 59 + this.ExportEmbeddedCss.GetHashCode();
                if (this.ExportEmbeddedFonts != null)
                    hash = hash * 59 + this.ExportEmbeddedFonts.GetHashCode();
                if (this.ExportEmbeddedImages != null)
                    hash = hash * 59 + this.ExportEmbeddedImages.GetHashCode();
                if (this.ExportFormFields != null)
                    hash = hash * 59 + this.ExportFormFields.GetHashCode();
                if (this.Encoding != null)
                    hash = hash * 59 + this.Encoding.GetHashCode();
                if (this.FontFormat != null)
                    hash = hash * 59 + this.FontFormat.GetHashCode();
                if (this.ResourcesFolder != null)
                    hash = hash * 59 + this.ResourcesFolder.GetHashCode();
                if (this.ResourcesFolderAlias != null)
                    hash = hash * 59 + this.ResourcesFolderAlias.GetHashCode();
                if (this.ShowPageBorder != null)
                    hash = hash * 59 + this.ShowPageBorder.GetHashCode();
                if (this.PageHorizontalAlignment != null)
                    hash = hash * 59 + this.PageHorizontalAlignment.GetHashCode();
                if (this.PageMargins != null)
                    hash = hash * 59 + this.PageMargins.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
