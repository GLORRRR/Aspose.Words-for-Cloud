/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents all formatting for a table row.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto :  IEquatable<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto>, IValidatableObject
    {
        /// <summary>
        /// Specifies how the cell is merged horizontally with other cells in the row.
        /// </summary>
        /// <value>Specifies how the cell is merged horizontally with other cells in the row.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HorizontalMergeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum First for "First"
            /// </summary>
            [EnumMember(Value = "First")]
            First,
            
            /// <summary>
            /// Enum Previous for "Previous"
            /// </summary>
            [EnumMember(Value = "Previous")]
            Previous
        }

        /// <summary>
        /// Returns or sets the orientation of text in a table cell.
        /// </summary>
        /// <value>Returns or sets the orientation of text in a table cell.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            
            /// <summary>
            /// Enum Horizontal for "Horizontal"
            /// </summary>
            [EnumMember(Value = "Horizontal")]
            Horizontal,
            
            /// <summary>
            /// Enum Downward for "Downward"
            /// </summary>
            [EnumMember(Value = "Downward")]
            Downward,
            
            /// <summary>
            /// Enum Upward for "Upward"
            /// </summary>
            [EnumMember(Value = "Upward")]
            Upward,
            
            /// <summary>
            /// Enum HorizontalRotatedFarEast for "HorizontalRotatedFarEast"
            /// </summary>
            [EnumMember(Value = "HorizontalRotatedFarEast")]
            HorizontalRotatedFarEast,
            
            /// <summary>
            /// Enum VerticalFarEast for "VerticalFarEast"
            /// </summary>
            [EnumMember(Value = "VerticalFarEast")]
            VerticalFarEast,
            
            /// <summary>
            /// Enum VerticalRotatedFarEast for "VerticalRotatedFarEast"
            /// </summary>
            [EnumMember(Value = "VerticalRotatedFarEast")]
            VerticalRotatedFarEast
        }

        /// <summary>
        /// Returns or sets the vertical alignment of text in the cell.
        /// </summary>
        /// <value>Returns or sets the vertical alignment of text in the cell.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerticalAlignmentEnum
        {
            
            /// <summary>
            /// Enum Top for "Top"
            /// </summary>
            [EnumMember(Value = "Top")]
            Top,
            
            /// <summary>
            /// Enum Center for "Center"
            /// </summary>
            [EnumMember(Value = "Center")]
            Center,
            
            /// <summary>
            /// Enum Bottom for "Bottom"
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom
        }

        /// <summary>
        /// Specifies how the cell is merged with other cells vertically.
        /// </summary>
        /// <value>Specifies how the cell is merged with other cells vertically.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerticalMergeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum First for "First"
            /// </summary>
            [EnumMember(Value = "First")]
            First,
            
            /// <summary>
            /// Enum Previous for "Previous"
            /// </summary>
            [EnumMember(Value = "Previous")]
            Previous
        }

        /// <summary>
        /// Specifies how the cell is merged horizontally with other cells in the row.
        /// </summary>
        /// <value>Specifies how the cell is merged horizontally with other cells in the row.</value>
        [DataMember(Name="HorizontalMerge", EmitDefaultValue=false)]
        public HorizontalMergeEnum? HorizontalMerge { get; set; }
        /// <summary>
        /// Returns or sets the orientation of text in a table cell.
        /// </summary>
        /// <value>Returns or sets the orientation of text in a table cell.</value>
        [DataMember(Name="Orientation", EmitDefaultValue=false)]
        public OrientationEnum? Orientation { get; set; }
        /// <summary>
        /// Returns or sets the vertical alignment of text in the cell.
        /// </summary>
        /// <value>Returns or sets the vertical alignment of text in the cell.</value>
        [DataMember(Name="VerticalAlignment", EmitDefaultValue=false)]
        public VerticalAlignmentEnum? VerticalAlignment { get; set; }
        /// <summary>
        /// Specifies how the cell is merged with other cells vertically.
        /// </summary>
        /// <value>Specifies how the cell is merged with other cells vertically.</value>
        [DataMember(Name="VerticalMerge", EmitDefaultValue=false)]
        public VerticalMergeEnum? VerticalMerge { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto" /> class.
        /// </summary>
        /// <param name="BottomPadding">Returns or sets the amount of space (in points) to add below the contents of cell..</param>
        /// <param name="FitText">If true, fits text in the cell, compressing each paragraph to the width of the cell..</param>
        /// <param name="HorizontalMerge">Specifies how the cell is merged horizontally with other cells in the row..</param>
        /// <param name="LeftPadding">Returns or sets the amount of space (in points) to add to the left of the contents of cell..</param>
        /// <param name="Orientation">Returns or sets the orientation of text in a table cell..</param>
        /// <param name="PreferredWidth">Returns or sets the preferred width of the cell..</param>
        /// <param name="RightPadding">Returns or sets the amount of space (in points) to add to the right of the contents of cell..</param>
        /// <param name="TopPadding">Returns or sets the amount of space (in points) to add above the contents of cell..</param>
        /// <param name="VerticalAlignment">Returns or sets the vertical alignment of text in the cell..</param>
        /// <param name="VerticalMerge">Specifies how the cell is merged with other cells vertically..</param>
        /// <param name="Width">Gets the width of the cell in points..</param>
        /// <param name="WrapText">If true, wrap text for the cell..</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto(double? BottomPadding = default(double?), bool? FitText = default(bool?), HorizontalMergeEnum? HorizontalMerge = default(HorizontalMergeEnum?), double? LeftPadding = default(double?), OrientationEnum? Orientation = default(OrientationEnum?), AsposeWordsCloudDTODocumentElementsTablesPreferredWidthDto PreferredWidth = default(AsposeWordsCloudDTODocumentElementsTablesPreferredWidthDto), double? RightPadding = default(double?), double? TopPadding = default(double?), VerticalAlignmentEnum? VerticalAlignment = default(VerticalAlignmentEnum?), VerticalMergeEnum? VerticalMerge = default(VerticalMergeEnum?), double? Width = default(double?), bool? WrapText = default(bool?), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.BottomPadding = BottomPadding;
            this.FitText = FitText;
            this.HorizontalMerge = HorizontalMerge;
            this.LeftPadding = LeftPadding;
            this.Orientation = Orientation;
            this.PreferredWidth = PreferredWidth;
            this.RightPadding = RightPadding;
            this.TopPadding = TopPadding;
            this.VerticalAlignment = VerticalAlignment;
            this.VerticalMerge = VerticalMerge;
            this.Width = Width;
            this.WrapText = WrapText;
            this.Link = Link;
        }
        
        /// <summary>
        /// Returns or sets the amount of space (in points) to add below the contents of cell.
        /// </summary>
        /// <value>Returns or sets the amount of space (in points) to add below the contents of cell.</value>
        [DataMember(Name="BottomPadding", EmitDefaultValue=false)]
        public double? BottomPadding { get; set; }

        /// <summary>
        /// If true, fits text in the cell, compressing each paragraph to the width of the cell.
        /// </summary>
        /// <value>If true, fits text in the cell, compressing each paragraph to the width of the cell.</value>
        [DataMember(Name="FitText", EmitDefaultValue=false)]
        public bool? FitText { get; set; }


        /// <summary>
        /// Returns or sets the amount of space (in points) to add to the left of the contents of cell.
        /// </summary>
        /// <value>Returns or sets the amount of space (in points) to add to the left of the contents of cell.</value>
        [DataMember(Name="LeftPadding", EmitDefaultValue=false)]
        public double? LeftPadding { get; set; }


        /// <summary>
        /// Returns or sets the preferred width of the cell.
        /// </summary>
        /// <value>Returns or sets the preferred width of the cell.</value>
        [DataMember(Name="PreferredWidth", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentElementsTablesPreferredWidthDto PreferredWidth { get; set; }

        /// <summary>
        /// Returns or sets the amount of space (in points) to add to the right of the contents of cell.
        /// </summary>
        /// <value>Returns or sets the amount of space (in points) to add to the right of the contents of cell.</value>
        [DataMember(Name="RightPadding", EmitDefaultValue=false)]
        public double? RightPadding { get; set; }

        /// <summary>
        /// Returns or sets the amount of space (in points) to add above the contents of cell.
        /// </summary>
        /// <value>Returns or sets the amount of space (in points) to add above the contents of cell.</value>
        [DataMember(Name="TopPadding", EmitDefaultValue=false)]
        public double? TopPadding { get; set; }



        /// <summary>
        /// Gets the width of the cell in points.
        /// </summary>
        /// <value>Gets the width of the cell in points.</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// If true, wrap text for the cell.
        /// </summary>
        /// <value>If true, wrap text for the cell.</value>
        [DataMember(Name="WrapText", EmitDefaultValue=false)]
        public bool? WrapText { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto {\n");
            sb.Append("  BottomPadding: ").Append(BottomPadding).Append("\n");
            sb.Append("  FitText: ").Append(FitText).Append("\n");
            sb.Append("  HorizontalMerge: ").Append(HorizontalMerge).Append("\n");
            sb.Append("  LeftPadding: ").Append(LeftPadding).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  PreferredWidth: ").Append(PreferredWidth).Append("\n");
            sb.Append("  RightPadding: ").Append(RightPadding).Append("\n");
            sb.Append("  TopPadding: ").Append(TopPadding).Append("\n");
            sb.Append("  VerticalAlignment: ").Append(VerticalAlignment).Append("\n");
            sb.Append("  VerticalMerge: ").Append(VerticalMerge).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  WrapText: ").Append(WrapText).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BottomPadding == other.BottomPadding ||
                    this.BottomPadding != null &&
                    this.BottomPadding.Equals(other.BottomPadding)
                ) && 
                (
                    this.FitText == other.FitText ||
                    this.FitText != null &&
                    this.FitText.Equals(other.FitText)
                ) && 
                (
                    this.HorizontalMerge == other.HorizontalMerge ||
                    this.HorizontalMerge != null &&
                    this.HorizontalMerge.Equals(other.HorizontalMerge)
                ) && 
                (
                    this.LeftPadding == other.LeftPadding ||
                    this.LeftPadding != null &&
                    this.LeftPadding.Equals(other.LeftPadding)
                ) && 
                (
                    this.Orientation == other.Orientation ||
                    this.Orientation != null &&
                    this.Orientation.Equals(other.Orientation)
                ) && 
                (
                    this.PreferredWidth == other.PreferredWidth ||
                    this.PreferredWidth != null &&
                    this.PreferredWidth.Equals(other.PreferredWidth)
                ) && 
                (
                    this.RightPadding == other.RightPadding ||
                    this.RightPadding != null &&
                    this.RightPadding.Equals(other.RightPadding)
                ) && 
                (
                    this.TopPadding == other.TopPadding ||
                    this.TopPadding != null &&
                    this.TopPadding.Equals(other.TopPadding)
                ) && 
                (
                    this.VerticalAlignment == other.VerticalAlignment ||
                    this.VerticalAlignment != null &&
                    this.VerticalAlignment.Equals(other.VerticalAlignment)
                ) && 
                (
                    this.VerticalMerge == other.VerticalMerge ||
                    this.VerticalMerge != null &&
                    this.VerticalMerge.Equals(other.VerticalMerge)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.WrapText == other.WrapText ||
                    this.WrapText != null &&
                    this.WrapText.Equals(other.WrapText)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BottomPadding != null)
                    hash = hash * 59 + this.BottomPadding.GetHashCode();
                if (this.FitText != null)
                    hash = hash * 59 + this.FitText.GetHashCode();
                if (this.HorizontalMerge != null)
                    hash = hash * 59 + this.HorizontalMerge.GetHashCode();
                if (this.LeftPadding != null)
                    hash = hash * 59 + this.LeftPadding.GetHashCode();
                if (this.Orientation != null)
                    hash = hash * 59 + this.Orientation.GetHashCode();
                if (this.PreferredWidth != null)
                    hash = hash * 59 + this.PreferredWidth.GetHashCode();
                if (this.RightPadding != null)
                    hash = hash * 59 + this.RightPadding.GetHashCode();
                if (this.TopPadding != null)
                    hash = hash * 59 + this.TopPadding.GetHashCode();
                if (this.VerticalAlignment != null)
                    hash = hash * 59 + this.VerticalAlignment.GetHashCode();
                if (this.VerticalMerge != null)
                    hash = hash * 59 + this.VerticalMerge.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.WrapText != null)
                    hash = hash * 59 + this.WrapText.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
