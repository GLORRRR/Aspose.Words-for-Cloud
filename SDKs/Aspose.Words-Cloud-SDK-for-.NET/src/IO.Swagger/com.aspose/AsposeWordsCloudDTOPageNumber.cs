/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Class is used for insert page number request building.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOPageNumber :  IEquatable<AsposeWordsCloudDTOPageNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOPageNumber" /> class.
        /// </summary>
        /// <param name="Format">Page number format, e.g. \&quot;{PAGE} of {NUMPAGES}\&quot;..</param>
        /// <param name="Alignment">Text alignment, possible values are left, right, center or justify..</param>
        /// <param name="IsTop">If true the page number is added at the top of the page, else at the bottom..</param>
        /// <param name="SetPageNumberOnFirstPage">If true the page number is added on first page too..</param>
        public AsposeWordsCloudDTOPageNumber(string Format = default(string), string Alignment = default(string), bool? IsTop = default(bool?), bool? SetPageNumberOnFirstPage = default(bool?))
        {
            this.Format = Format;
            this.Alignment = Alignment;
            this.IsTop = IsTop;
            this.SetPageNumberOnFirstPage = SetPageNumberOnFirstPage;
        }
        
        /// <summary>
        /// Page number format, e.g. \&quot;{PAGE} of {NUMPAGES}\&quot;.
        /// </summary>
        /// <value>Page number format, e.g. \&quot;{PAGE} of {NUMPAGES}\&quot;.</value>
        [DataMember(Name="Format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Text alignment, possible values are left, right, center or justify.
        /// </summary>
        /// <value>Text alignment, possible values are left, right, center or justify.</value>
        [DataMember(Name="Alignment", EmitDefaultValue=false)]
        public string Alignment { get; set; }

        /// <summary>
        /// If true the page number is added at the top of the page, else at the bottom.
        /// </summary>
        /// <value>If true the page number is added at the top of the page, else at the bottom.</value>
        [DataMember(Name="IsTop", EmitDefaultValue=false)]
        public bool? IsTop { get; set; }

        /// <summary>
        /// If true the page number is added on first page too.
        /// </summary>
        /// <value>If true the page number is added on first page too.</value>
        [DataMember(Name="SetPageNumberOnFirstPage", EmitDefaultValue=false)]
        public bool? SetPageNumberOnFirstPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOPageNumber {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  IsTop: ").Append(IsTop).Append("\n");
            sb.Append("  SetPageNumberOnFirstPage: ").Append(SetPageNumberOnFirstPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOPageNumber);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOPageNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOPageNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOPageNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Format == other.Format ||
                    this.Format != null &&
                    this.Format.Equals(other.Format)
                ) && 
                (
                    this.Alignment == other.Alignment ||
                    this.Alignment != null &&
                    this.Alignment.Equals(other.Alignment)
                ) && 
                (
                    this.IsTop == other.IsTop ||
                    this.IsTop != null &&
                    this.IsTop.Equals(other.IsTop)
                ) && 
                (
                    this.SetPageNumberOnFirstPage == other.SetPageNumberOnFirstPage ||
                    this.SetPageNumberOnFirstPage != null &&
                    this.SetPageNumberOnFirstPage.Equals(other.SetPageNumberOnFirstPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Format != null)
                    hash = hash * 59 + this.Format.GetHashCode();
                if (this.Alignment != null)
                    hash = hash * 59 + this.Alignment.GetHashCode();
                if (this.IsTop != null)
                    hash = hash * 59 + this.IsTop.GetHashCode();
                if (this.SetPageNumberOnFirstPage != null)
                    hash = hash * 59 + this.SetPageNumberOnFirstPage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
