/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for pdf save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingPdfSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingPdfSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingPdfSaveOptionsData" /> class.
        /// </summary>
        /// <param name="BookmarksOutlineLevel">Specifies the level in the PDF document outline at which to display Word bookmarks.</param>
        /// <param name="CreateNoteHyperlinks">Specifies whether to convert footnote/endnote references in main text story into active hyperlinks.  When clicked the hyperlink will lead to the corresponding footnote/endnote.  Default is false..</param>
        /// <param name="Compliance">Specifies the PDF standards compliance level for output documents.</param>
        /// <param name="DigitalSignatureDetails">Specifies the details for signing the output PDF document.</param>
        /// <param name="DisplayDocTitle">A flag specifying whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary..</param>
        /// <param name="DownsampleImages">Specifies whether or not the images should be downsampled.</param>
        /// <param name="DownsampleResolution">Specifies the resolution in pixels per inch to which the images should be downsampled.</param>
        /// <param name="DownsampleOptions">Allows to specify downsample options..</param>
        /// <param name="EmbedFullFonts">Controls how fonts are embedded into the resulting PDF documents.</param>
        /// <param name="EmbedStandardWindowsFonts">Determines whether or not to embed standard windows fonts Arial and Times New Roman.</param>
        /// <param name="EncryptionDetails">Specifies the details for encrypting the output PDF document.</param>
        /// <param name="ExpandedOutlineLevels">Specifies how many levels in the PDF document outline to show expanded when the PDF file is viewed.</param>
        /// <param name="ExportCustomPropertiesAsMetadata">Determines whether or not to export custom properties of document as Metadata.</param>
        /// <param name="ExportDocumentStructure">Determines whether or not to export document structure.</param>
        /// <param name="FontEmbeddingMode">Specifies the font embedding mode.</param>
        /// <param name="HeadingsOutlineLevels">Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the PDF document outline.</param>
        /// <param name="ImageCompression">Specifies compression type to be used for all images in the document.</param>
        /// <param name="OpenHyperlinksInNewWindow">Determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.</param>
        /// <param name="OutlineOptions">Allows to specify outline options.</param>
        /// <param name="PageMode">Specifies how the PDF document should be displayed when opened in the PDF reader.</param>
        /// <param name="ImageColorSpaceExportMode">Specifies how the color space will be selected for the images in PDF document..</param>
        /// <param name="PreserveFormFields">Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.</param>
        /// <param name="TextCompression">Specifies compression type to be used for all textual content in the document.</param>
        /// <param name="UseCoreFonts">Determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.</param>
        /// <param name="UseBookFoldPrintingSettings">Determines whether the document should be saved using a booklet printing layout.</param>
        /// <param name="ZoomBehavior">Determines what type of zoom should be applied when a document is opened with a PDF viewer.</param>
        /// <param name="ZoomFactor">Determines zoom factor (in percentages) for a document.</param>
        /// <param name="CustomPropertiesExport">Gets or sets a value determining the way {Aspose.Words.Properties.CustomDocumentProperties} are exported to PDF file.  Default value is {Aspose.Words.Saving.PdfCustomPropertiesExport.None}..</param>
        /// <param name="PreblendImages">Gets or sets a value determining whether or not to preblend transparent images with black background color..</param>
        public AsposeWordsCloudDTOSavingPdfSaveOptionsData(int? BookmarksOutlineLevel = default(int?), bool? CreateNoteHyperlinks = default(bool?), string Compliance = default(string), AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData DigitalSignatureDetails = default(AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData), bool? DisplayDocTitle = default(bool?), bool? DownsampleImages = default(bool?), int? DownsampleResolution = default(int?), AsposeWordsCloudDTOSavingDownsampleOptionsData DownsampleOptions = default(AsposeWordsCloudDTOSavingDownsampleOptionsData), bool? EmbedFullFonts = default(bool?), bool? EmbedStandardWindowsFonts = default(bool?), AsposeWordsCloudDTOSavingPdfEncryptionDetailsData EncryptionDetails = default(AsposeWordsCloudDTOSavingPdfEncryptionDetailsData), int? ExpandedOutlineLevels = default(int?), bool? ExportCustomPropertiesAsMetadata = default(bool?), bool? ExportDocumentStructure = default(bool?), string FontEmbeddingMode = default(string), int? HeadingsOutlineLevels = default(int?), string ImageCompression = default(string), bool? OpenHyperlinksInNewWindow = default(bool?), AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions = default(AsposeWordsCloudDTOSavingOutlineOptionsData), string PageMode = default(string), string ImageColorSpaceExportMode = default(string), bool? PreserveFormFields = default(bool?), string TextCompression = default(string), bool? UseCoreFonts = default(bool?), bool? UseBookFoldPrintingSettings = default(bool?), string ZoomBehavior = default(string), int? ZoomFactor = default(int?), string CustomPropertiesExport = default(string), bool? PreblendImages = default(bool?))
        {
            this.BookmarksOutlineLevel = BookmarksOutlineLevel;
            this.CreateNoteHyperlinks = CreateNoteHyperlinks;
            this.Compliance = Compliance;
            this.DigitalSignatureDetails = DigitalSignatureDetails;
            this.DisplayDocTitle = DisplayDocTitle;
            this.DownsampleImages = DownsampleImages;
            this.DownsampleResolution = DownsampleResolution;
            this.DownsampleOptions = DownsampleOptions;
            this.EmbedFullFonts = EmbedFullFonts;
            this.EmbedStandardWindowsFonts = EmbedStandardWindowsFonts;
            this.EncryptionDetails = EncryptionDetails;
            this.ExpandedOutlineLevels = ExpandedOutlineLevels;
            this.ExportCustomPropertiesAsMetadata = ExportCustomPropertiesAsMetadata;
            this.ExportDocumentStructure = ExportDocumentStructure;
            this.FontEmbeddingMode = FontEmbeddingMode;
            this.HeadingsOutlineLevels = HeadingsOutlineLevels;
            this.ImageCompression = ImageCompression;
            this.OpenHyperlinksInNewWindow = OpenHyperlinksInNewWindow;
            this.OutlineOptions = OutlineOptions;
            this.PageMode = PageMode;
            this.ImageColorSpaceExportMode = ImageColorSpaceExportMode;
            this.PreserveFormFields = PreserveFormFields;
            this.TextCompression = TextCompression;
            this.UseCoreFonts = UseCoreFonts;
            this.UseBookFoldPrintingSettings = UseBookFoldPrintingSettings;
            this.ZoomBehavior = ZoomBehavior;
            this.ZoomFactor = ZoomFactor;
            this.CustomPropertiesExport = CustomPropertiesExport;
            this.PreblendImages = PreblendImages;
        }
        
        /// <summary>
        /// Specifies the level in the PDF document outline at which to display Word bookmarks
        /// </summary>
        /// <value>Specifies the level in the PDF document outline at which to display Word bookmarks</value>
        [DataMember(Name="BookmarksOutlineLevel", EmitDefaultValue=false)]
        public int? BookmarksOutlineLevel { get; set; }

        /// <summary>
        /// Specifies whether to convert footnote/endnote references in main text story into active hyperlinks.  When clicked the hyperlink will lead to the corresponding footnote/endnote.  Default is false.
        /// </summary>
        /// <value>Specifies whether to convert footnote/endnote references in main text story into active hyperlinks.  When clicked the hyperlink will lead to the corresponding footnote/endnote.  Default is false.</value>
        [DataMember(Name="CreateNoteHyperlinks", EmitDefaultValue=false)]
        public bool? CreateNoteHyperlinks { get; set; }

        /// <summary>
        /// Specifies the PDF standards compliance level for output documents
        /// </summary>
        /// <value>Specifies the PDF standards compliance level for output documents</value>
        [DataMember(Name="Compliance", EmitDefaultValue=false)]
        public string Compliance { get; set; }

        /// <summary>
        /// Specifies the details for signing the output PDF document
        /// </summary>
        /// <value>Specifies the details for signing the output PDF document</value>
        [DataMember(Name="DigitalSignatureDetails", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData DigitalSignatureDetails { get; set; }

        /// <summary>
        /// A flag specifying whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary.
        /// </summary>
        /// <value>A flag specifying whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary.</value>
        [DataMember(Name="DisplayDocTitle", EmitDefaultValue=false)]
        public bool? DisplayDocTitle { get; set; }

        /// <summary>
        /// Specifies whether or not the images should be downsampled
        /// </summary>
        /// <value>Specifies whether or not the images should be downsampled</value>
        [DataMember(Name="DownsampleImages", EmitDefaultValue=false)]
        public bool? DownsampleImages { get; set; }

        /// <summary>
        /// Specifies the resolution in pixels per inch to which the images should be downsampled
        /// </summary>
        /// <value>Specifies the resolution in pixels per inch to which the images should be downsampled</value>
        [DataMember(Name="DownsampleResolution", EmitDefaultValue=false)]
        public int? DownsampleResolution { get; set; }

        /// <summary>
        /// Allows to specify downsample options.
        /// </summary>
        /// <value>Allows to specify downsample options.</value>
        [DataMember(Name="DownsampleOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingDownsampleOptionsData DownsampleOptions { get; set; }

        /// <summary>
        /// Controls how fonts are embedded into the resulting PDF documents
        /// </summary>
        /// <value>Controls how fonts are embedded into the resulting PDF documents</value>
        [DataMember(Name="EmbedFullFonts", EmitDefaultValue=false)]
        public bool? EmbedFullFonts { get; set; }

        /// <summary>
        /// Determines whether or not to embed standard windows fonts Arial and Times New Roman
        /// </summary>
        /// <value>Determines whether or not to embed standard windows fonts Arial and Times New Roman</value>
        [DataMember(Name="EmbedStandardWindowsFonts", EmitDefaultValue=false)]
        public bool? EmbedStandardWindowsFonts { get; set; }

        /// <summary>
        /// Specifies the details for encrypting the output PDF document
        /// </summary>
        /// <value>Specifies the details for encrypting the output PDF document</value>
        [DataMember(Name="EncryptionDetails", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingPdfEncryptionDetailsData EncryptionDetails { get; set; }

        /// <summary>
        /// Specifies how many levels in the PDF document outline to show expanded when the PDF file is viewed
        /// </summary>
        /// <value>Specifies how many levels in the PDF document outline to show expanded when the PDF file is viewed</value>
        [DataMember(Name="ExpandedOutlineLevels", EmitDefaultValue=false)]
        public int? ExpandedOutlineLevels { get; set; }

        /// <summary>
        /// Determines whether or not to export custom properties of document as Metadata
        /// </summary>
        /// <value>Determines whether or not to export custom properties of document as Metadata</value>
        [DataMember(Name="ExportCustomPropertiesAsMetadata", EmitDefaultValue=false)]
        public bool? ExportCustomPropertiesAsMetadata { get; set; }

        /// <summary>
        /// Determines whether or not to export document structure
        /// </summary>
        /// <value>Determines whether or not to export document structure</value>
        [DataMember(Name="ExportDocumentStructure", EmitDefaultValue=false)]
        public bool? ExportDocumentStructure { get; set; }

        /// <summary>
        /// Specifies the font embedding mode
        /// </summary>
        /// <value>Specifies the font embedding mode</value>
        [DataMember(Name="FontEmbeddingMode", EmitDefaultValue=false)]
        public string FontEmbeddingMode { get; set; }

        /// <summary>
        /// Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the PDF document outline
        /// </summary>
        /// <value>Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the PDF document outline</value>
        [DataMember(Name="HeadingsOutlineLevels", EmitDefaultValue=false)]
        public int? HeadingsOutlineLevels { get; set; }

        /// <summary>
        /// Specifies compression type to be used for all images in the document
        /// </summary>
        /// <value>Specifies compression type to be used for all images in the document</value>
        [DataMember(Name="ImageCompression", EmitDefaultValue=false)]
        public string ImageCompression { get; set; }

        /// <summary>
        /// Determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser
        /// </summary>
        /// <value>Determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser</value>
        [DataMember(Name="OpenHyperlinksInNewWindow", EmitDefaultValue=false)]
        public bool? OpenHyperlinksInNewWindow { get; set; }

        /// <summary>
        /// Allows to specify outline options
        /// </summary>
        /// <value>Allows to specify outline options</value>
        [DataMember(Name="OutlineOptions", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingOutlineOptionsData OutlineOptions { get; set; }

        /// <summary>
        /// Specifies how the PDF document should be displayed when opened in the PDF reader
        /// </summary>
        /// <value>Specifies how the PDF document should be displayed when opened in the PDF reader</value>
        [DataMember(Name="PageMode", EmitDefaultValue=false)]
        public string PageMode { get; set; }

        /// <summary>
        /// Specifies how the color space will be selected for the images in PDF document.
        /// </summary>
        /// <value>Specifies how the color space will be selected for the images in PDF document.</value>
        [DataMember(Name="ImageColorSpaceExportMode", EmitDefaultValue=false)]
        public string ImageColorSpaceExportMode { get; set; }

        /// <summary>
        /// Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text
        /// </summary>
        /// <value>Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text</value>
        [DataMember(Name="PreserveFormFields", EmitDefaultValue=false)]
        public bool? PreserveFormFields { get; set; }

        /// <summary>
        /// Specifies compression type to be used for all textual content in the document
        /// </summary>
        /// <value>Specifies compression type to be used for all textual content in the document</value>
        [DataMember(Name="TextCompression", EmitDefaultValue=false)]
        public string TextCompression { get; set; }

        /// <summary>
        /// Determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts
        /// </summary>
        /// <value>Determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts</value>
        [DataMember(Name="UseCoreFonts", EmitDefaultValue=false)]
        public bool? UseCoreFonts { get; set; }

        /// <summary>
        /// Determines whether the document should be saved using a booklet printing layout
        /// </summary>
        /// <value>Determines whether the document should be saved using a booklet printing layout</value>
        [DataMember(Name="UseBookFoldPrintingSettings", EmitDefaultValue=false)]
        public bool? UseBookFoldPrintingSettings { get; set; }

        /// <summary>
        /// Determines what type of zoom should be applied when a document is opened with a PDF viewer
        /// </summary>
        /// <value>Determines what type of zoom should be applied when a document is opened with a PDF viewer</value>
        [DataMember(Name="ZoomBehavior", EmitDefaultValue=false)]
        public string ZoomBehavior { get; set; }

        /// <summary>
        /// Determines zoom factor (in percentages) for a document
        /// </summary>
        /// <value>Determines zoom factor (in percentages) for a document</value>
        [DataMember(Name="ZoomFactor", EmitDefaultValue=false)]
        public int? ZoomFactor { get; set; }

        /// <summary>
        /// Gets or sets a value determining the way {Aspose.Words.Properties.CustomDocumentProperties} are exported to PDF file.  Default value is {Aspose.Words.Saving.PdfCustomPropertiesExport.None}.
        /// </summary>
        /// <value>Gets or sets a value determining the way {Aspose.Words.Properties.CustomDocumentProperties} are exported to PDF file.  Default value is {Aspose.Words.Saving.PdfCustomPropertiesExport.None}.</value>
        [DataMember(Name="CustomPropertiesExport", EmitDefaultValue=false)]
        public string CustomPropertiesExport { get; set; }

        /// <summary>
        /// Gets or sets a value determining whether or not to preblend transparent images with black background color.
        /// </summary>
        /// <value>Gets or sets a value determining whether or not to preblend transparent images with black background color.</value>
        [DataMember(Name="PreblendImages", EmitDefaultValue=false)]
        public bool? PreblendImages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingPdfSaveOptionsData {\n");
            sb.Append("  BookmarksOutlineLevel: ").Append(BookmarksOutlineLevel).Append("\n");
            sb.Append("  CreateNoteHyperlinks: ").Append(CreateNoteHyperlinks).Append("\n");
            sb.Append("  Compliance: ").Append(Compliance).Append("\n");
            sb.Append("  DigitalSignatureDetails: ").Append(DigitalSignatureDetails).Append("\n");
            sb.Append("  DisplayDocTitle: ").Append(DisplayDocTitle).Append("\n");
            sb.Append("  DownsampleImages: ").Append(DownsampleImages).Append("\n");
            sb.Append("  DownsampleResolution: ").Append(DownsampleResolution).Append("\n");
            sb.Append("  DownsampleOptions: ").Append(DownsampleOptions).Append("\n");
            sb.Append("  EmbedFullFonts: ").Append(EmbedFullFonts).Append("\n");
            sb.Append("  EmbedStandardWindowsFonts: ").Append(EmbedStandardWindowsFonts).Append("\n");
            sb.Append("  EncryptionDetails: ").Append(EncryptionDetails).Append("\n");
            sb.Append("  ExpandedOutlineLevels: ").Append(ExpandedOutlineLevels).Append("\n");
            sb.Append("  ExportCustomPropertiesAsMetadata: ").Append(ExportCustomPropertiesAsMetadata).Append("\n");
            sb.Append("  ExportDocumentStructure: ").Append(ExportDocumentStructure).Append("\n");
            sb.Append("  FontEmbeddingMode: ").Append(FontEmbeddingMode).Append("\n");
            sb.Append("  HeadingsOutlineLevels: ").Append(HeadingsOutlineLevels).Append("\n");
            sb.Append("  ImageCompression: ").Append(ImageCompression).Append("\n");
            sb.Append("  OpenHyperlinksInNewWindow: ").Append(OpenHyperlinksInNewWindow).Append("\n");
            sb.Append("  OutlineOptions: ").Append(OutlineOptions).Append("\n");
            sb.Append("  PageMode: ").Append(PageMode).Append("\n");
            sb.Append("  ImageColorSpaceExportMode: ").Append(ImageColorSpaceExportMode).Append("\n");
            sb.Append("  PreserveFormFields: ").Append(PreserveFormFields).Append("\n");
            sb.Append("  TextCompression: ").Append(TextCompression).Append("\n");
            sb.Append("  UseCoreFonts: ").Append(UseCoreFonts).Append("\n");
            sb.Append("  UseBookFoldPrintingSettings: ").Append(UseBookFoldPrintingSettings).Append("\n");
            sb.Append("  ZoomBehavior: ").Append(ZoomBehavior).Append("\n");
            sb.Append("  ZoomFactor: ").Append(ZoomFactor).Append("\n");
            sb.Append("  CustomPropertiesExport: ").Append(CustomPropertiesExport).Append("\n");
            sb.Append("  PreblendImages: ").Append(PreblendImages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingPdfSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingPdfSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingPdfSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingPdfSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookmarksOutlineLevel == other.BookmarksOutlineLevel ||
                    this.BookmarksOutlineLevel != null &&
                    this.BookmarksOutlineLevel.Equals(other.BookmarksOutlineLevel)
                ) && 
                (
                    this.CreateNoteHyperlinks == other.CreateNoteHyperlinks ||
                    this.CreateNoteHyperlinks != null &&
                    this.CreateNoteHyperlinks.Equals(other.CreateNoteHyperlinks)
                ) && 
                (
                    this.Compliance == other.Compliance ||
                    this.Compliance != null &&
                    this.Compliance.Equals(other.Compliance)
                ) && 
                (
                    this.DigitalSignatureDetails == other.DigitalSignatureDetails ||
                    this.DigitalSignatureDetails != null &&
                    this.DigitalSignatureDetails.Equals(other.DigitalSignatureDetails)
                ) && 
                (
                    this.DisplayDocTitle == other.DisplayDocTitle ||
                    this.DisplayDocTitle != null &&
                    this.DisplayDocTitle.Equals(other.DisplayDocTitle)
                ) && 
                (
                    this.DownsampleImages == other.DownsampleImages ||
                    this.DownsampleImages != null &&
                    this.DownsampleImages.Equals(other.DownsampleImages)
                ) && 
                (
                    this.DownsampleResolution == other.DownsampleResolution ||
                    this.DownsampleResolution != null &&
                    this.DownsampleResolution.Equals(other.DownsampleResolution)
                ) && 
                (
                    this.DownsampleOptions == other.DownsampleOptions ||
                    this.DownsampleOptions != null &&
                    this.DownsampleOptions.Equals(other.DownsampleOptions)
                ) && 
                (
                    this.EmbedFullFonts == other.EmbedFullFonts ||
                    this.EmbedFullFonts != null &&
                    this.EmbedFullFonts.Equals(other.EmbedFullFonts)
                ) && 
                (
                    this.EmbedStandardWindowsFonts == other.EmbedStandardWindowsFonts ||
                    this.EmbedStandardWindowsFonts != null &&
                    this.EmbedStandardWindowsFonts.Equals(other.EmbedStandardWindowsFonts)
                ) && 
                (
                    this.EncryptionDetails == other.EncryptionDetails ||
                    this.EncryptionDetails != null &&
                    this.EncryptionDetails.Equals(other.EncryptionDetails)
                ) && 
                (
                    this.ExpandedOutlineLevels == other.ExpandedOutlineLevels ||
                    this.ExpandedOutlineLevels != null &&
                    this.ExpandedOutlineLevels.Equals(other.ExpandedOutlineLevels)
                ) && 
                (
                    this.ExportCustomPropertiesAsMetadata == other.ExportCustomPropertiesAsMetadata ||
                    this.ExportCustomPropertiesAsMetadata != null &&
                    this.ExportCustomPropertiesAsMetadata.Equals(other.ExportCustomPropertiesAsMetadata)
                ) && 
                (
                    this.ExportDocumentStructure == other.ExportDocumentStructure ||
                    this.ExportDocumentStructure != null &&
                    this.ExportDocumentStructure.Equals(other.ExportDocumentStructure)
                ) && 
                (
                    this.FontEmbeddingMode == other.FontEmbeddingMode ||
                    this.FontEmbeddingMode != null &&
                    this.FontEmbeddingMode.Equals(other.FontEmbeddingMode)
                ) && 
                (
                    this.HeadingsOutlineLevels == other.HeadingsOutlineLevels ||
                    this.HeadingsOutlineLevels != null &&
                    this.HeadingsOutlineLevels.Equals(other.HeadingsOutlineLevels)
                ) && 
                (
                    this.ImageCompression == other.ImageCompression ||
                    this.ImageCompression != null &&
                    this.ImageCompression.Equals(other.ImageCompression)
                ) && 
                (
                    this.OpenHyperlinksInNewWindow == other.OpenHyperlinksInNewWindow ||
                    this.OpenHyperlinksInNewWindow != null &&
                    this.OpenHyperlinksInNewWindow.Equals(other.OpenHyperlinksInNewWindow)
                ) && 
                (
                    this.OutlineOptions == other.OutlineOptions ||
                    this.OutlineOptions != null &&
                    this.OutlineOptions.Equals(other.OutlineOptions)
                ) && 
                (
                    this.PageMode == other.PageMode ||
                    this.PageMode != null &&
                    this.PageMode.Equals(other.PageMode)
                ) && 
                (
                    this.ImageColorSpaceExportMode == other.ImageColorSpaceExportMode ||
                    this.ImageColorSpaceExportMode != null &&
                    this.ImageColorSpaceExportMode.Equals(other.ImageColorSpaceExportMode)
                ) && 
                (
                    this.PreserveFormFields == other.PreserveFormFields ||
                    this.PreserveFormFields != null &&
                    this.PreserveFormFields.Equals(other.PreserveFormFields)
                ) && 
                (
                    this.TextCompression == other.TextCompression ||
                    this.TextCompression != null &&
                    this.TextCompression.Equals(other.TextCompression)
                ) && 
                (
                    this.UseCoreFonts == other.UseCoreFonts ||
                    this.UseCoreFonts != null &&
                    this.UseCoreFonts.Equals(other.UseCoreFonts)
                ) && 
                (
                    this.UseBookFoldPrintingSettings == other.UseBookFoldPrintingSettings ||
                    this.UseBookFoldPrintingSettings != null &&
                    this.UseBookFoldPrintingSettings.Equals(other.UseBookFoldPrintingSettings)
                ) && 
                (
                    this.ZoomBehavior == other.ZoomBehavior ||
                    this.ZoomBehavior != null &&
                    this.ZoomBehavior.Equals(other.ZoomBehavior)
                ) && 
                (
                    this.ZoomFactor == other.ZoomFactor ||
                    this.ZoomFactor != null &&
                    this.ZoomFactor.Equals(other.ZoomFactor)
                ) && 
                (
                    this.CustomPropertiesExport == other.CustomPropertiesExport ||
                    this.CustomPropertiesExport != null &&
                    this.CustomPropertiesExport.Equals(other.CustomPropertiesExport)
                ) && 
                (
                    this.PreblendImages == other.PreblendImages ||
                    this.PreblendImages != null &&
                    this.PreblendImages.Equals(other.PreblendImages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookmarksOutlineLevel != null)
                    hash = hash * 59 + this.BookmarksOutlineLevel.GetHashCode();
                if (this.CreateNoteHyperlinks != null)
                    hash = hash * 59 + this.CreateNoteHyperlinks.GetHashCode();
                if (this.Compliance != null)
                    hash = hash * 59 + this.Compliance.GetHashCode();
                if (this.DigitalSignatureDetails != null)
                    hash = hash * 59 + this.DigitalSignatureDetails.GetHashCode();
                if (this.DisplayDocTitle != null)
                    hash = hash * 59 + this.DisplayDocTitle.GetHashCode();
                if (this.DownsampleImages != null)
                    hash = hash * 59 + this.DownsampleImages.GetHashCode();
                if (this.DownsampleResolution != null)
                    hash = hash * 59 + this.DownsampleResolution.GetHashCode();
                if (this.DownsampleOptions != null)
                    hash = hash * 59 + this.DownsampleOptions.GetHashCode();
                if (this.EmbedFullFonts != null)
                    hash = hash * 59 + this.EmbedFullFonts.GetHashCode();
                if (this.EmbedStandardWindowsFonts != null)
                    hash = hash * 59 + this.EmbedStandardWindowsFonts.GetHashCode();
                if (this.EncryptionDetails != null)
                    hash = hash * 59 + this.EncryptionDetails.GetHashCode();
                if (this.ExpandedOutlineLevels != null)
                    hash = hash * 59 + this.ExpandedOutlineLevels.GetHashCode();
                if (this.ExportCustomPropertiesAsMetadata != null)
                    hash = hash * 59 + this.ExportCustomPropertiesAsMetadata.GetHashCode();
                if (this.ExportDocumentStructure != null)
                    hash = hash * 59 + this.ExportDocumentStructure.GetHashCode();
                if (this.FontEmbeddingMode != null)
                    hash = hash * 59 + this.FontEmbeddingMode.GetHashCode();
                if (this.HeadingsOutlineLevels != null)
                    hash = hash * 59 + this.HeadingsOutlineLevels.GetHashCode();
                if (this.ImageCompression != null)
                    hash = hash * 59 + this.ImageCompression.GetHashCode();
                if (this.OpenHyperlinksInNewWindow != null)
                    hash = hash * 59 + this.OpenHyperlinksInNewWindow.GetHashCode();
                if (this.OutlineOptions != null)
                    hash = hash * 59 + this.OutlineOptions.GetHashCode();
                if (this.PageMode != null)
                    hash = hash * 59 + this.PageMode.GetHashCode();
                if (this.ImageColorSpaceExportMode != null)
                    hash = hash * 59 + this.ImageColorSpaceExportMode.GetHashCode();
                if (this.PreserveFormFields != null)
                    hash = hash * 59 + this.PreserveFormFields.GetHashCode();
                if (this.TextCompression != null)
                    hash = hash * 59 + this.TextCompression.GetHashCode();
                if (this.UseCoreFonts != null)
                    hash = hash * 59 + this.UseCoreFonts.GetHashCode();
                if (this.UseBookFoldPrintingSettings != null)
                    hash = hash * 59 + this.UseBookFoldPrintingSettings.GetHashCode();
                if (this.ZoomBehavior != null)
                    hash = hash * 59 + this.ZoomBehavior.GetHashCode();
                if (this.ZoomFactor != null)
                    hash = hash * 59 + this.ZoomFactor.GetHashCode();
                if (this.CustomPropertiesExport != null)
                    hash = hash * 59 + this.CustomPropertiesExport.GetHashCode();
                if (this.PreblendImages != null)
                    hash = hash * 59 + this.PreblendImages.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
