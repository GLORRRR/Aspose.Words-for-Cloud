/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Section element
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsSectionsSectionDto :  IEquatable<AsposeWordsCloudDTODocumentElementsSectionsSectionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsSectionsSectionDto" /> class.
        /// </summary>
        /// <param name="Paragraphs">Link to Paragraphs resource.</param>
        /// <param name="PageSetup">Link to PageSetup resource.</param>
        /// <param name="HeaderFooters">Link to HeaderFooters resource.</param>
        /// <param name="Tables">Link to Tables resource.</param>
        /// <param name="ChildNodes">Child nodes..</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsSectionsSectionDto(AsposeWordsCloudDTOLinkElement Paragraphs = default(AsposeWordsCloudDTOLinkElement), AsposeWordsCloudDTOLinkElement PageSetup = default(AsposeWordsCloudDTOLinkElement), AsposeWordsCloudDTOLinkElement HeaderFooters = default(AsposeWordsCloudDTOLinkElement), AsposeWordsCloudDTOLinkElement Tables = default(AsposeWordsCloudDTOLinkElement), List<Object> ChildNodes = default(List<Object>), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.Paragraphs = Paragraphs;
            this.PageSetup = PageSetup;
            this.HeaderFooters = HeaderFooters;
            this.Tables = Tables;
            this.ChildNodes = ChildNodes;
            this.Link = Link;
        }
        
        /// <summary>
        /// Link to Paragraphs resource
        /// </summary>
        /// <value>Link to Paragraphs resource</value>
        [DataMember(Name="Paragraphs", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOLinkElement Paragraphs { get; set; }

        /// <summary>
        /// Link to PageSetup resource
        /// </summary>
        /// <value>Link to PageSetup resource</value>
        [DataMember(Name="PageSetup", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOLinkElement PageSetup { get; set; }

        /// <summary>
        /// Link to HeaderFooters resource
        /// </summary>
        /// <value>Link to HeaderFooters resource</value>
        [DataMember(Name="HeaderFooters", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOLinkElement HeaderFooters { get; set; }

        /// <summary>
        /// Link to Tables resource
        /// </summary>
        /// <value>Link to Tables resource</value>
        [DataMember(Name="Tables", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOLinkElement Tables { get; set; }

        /// <summary>
        /// Child nodes.
        /// </summary>
        /// <value>Child nodes.</value>
        [DataMember(Name="ChildNodes", EmitDefaultValue=false)]
        public List<Object> ChildNodes { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsSectionsSectionDto {\n");
            sb.Append("  Paragraphs: ").Append(Paragraphs).Append("\n");
            sb.Append("  PageSetup: ").Append(PageSetup).Append("\n");
            sb.Append("  HeaderFooters: ").Append(HeaderFooters).Append("\n");
            sb.Append("  Tables: ").Append(Tables).Append("\n");
            sb.Append("  ChildNodes: ").Append(ChildNodes).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsSectionsSectionDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsSectionsSectionDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsSectionsSectionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsSectionsSectionDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Paragraphs == other.Paragraphs ||
                    this.Paragraphs != null &&
                    this.Paragraphs.Equals(other.Paragraphs)
                ) && 
                (
                    this.PageSetup == other.PageSetup ||
                    this.PageSetup != null &&
                    this.PageSetup.Equals(other.PageSetup)
                ) && 
                (
                    this.HeaderFooters == other.HeaderFooters ||
                    this.HeaderFooters != null &&
                    this.HeaderFooters.Equals(other.HeaderFooters)
                ) && 
                (
                    this.Tables == other.Tables ||
                    this.Tables != null &&
                    this.Tables.Equals(other.Tables)
                ) && 
                (
                    this.ChildNodes == other.ChildNodes ||
                    this.ChildNodes != null &&
                    this.ChildNodes.SequenceEqual(other.ChildNodes)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Paragraphs != null)
                    hash = hash * 59 + this.Paragraphs.GetHashCode();
                if (this.PageSetup != null)
                    hash = hash * 59 + this.PageSetup.GetHashCode();
                if (this.HeaderFooters != null)
                    hash = hash * 59 + this.HeaderFooters.GetHashCode();
                if (this.Tables != null)
                    hash = hash * 59 + this.Tables.GetHashCode();
                if (this.ChildNodes != null)
                    hash = hash * 59 + this.ChildNodes.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
