/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents a border of an object.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsCommonBorder :  IEquatable<AsposeWordsCloudDTODocumentElementsCommonBorder>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the border type.
        /// </summary>
        /// <value>Gets or sets the border type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BorderTypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Bottom for "Bottom"
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom,
            
            /// <summary>
            /// Enum Left for "Left"
            /// </summary>
            [EnumMember(Value = "Left")]
            Left,
            
            /// <summary>
            /// Enum Right for "Right"
            /// </summary>
            [EnumMember(Value = "Right")]
            Right,
            
            /// <summary>
            /// Enum Top for "Top"
            /// </summary>
            [EnumMember(Value = "Top")]
            Top,
            
            /// <summary>
            /// Enum Horizontal for "Horizontal"
            /// </summary>
            [EnumMember(Value = "Horizontal")]
            Horizontal,
            
            /// <summary>
            /// Enum Vertical for "Vertical"
            /// </summary>
            [EnumMember(Value = "Vertical")]
            Vertical,
            
            /// <summary>
            /// Enum DiagonalDown for "DiagonalDown"
            /// </summary>
            [EnumMember(Value = "DiagonalDown")]
            DiagonalDown,
            
            /// <summary>
            /// Enum DiagonalUp for "DiagonalUp"
            /// </summary>
            [EnumMember(Value = "DiagonalUp")]
            DiagonalUp
        }

        /// <summary>
        /// Gets or sets the border style.
        /// </summary>
        /// <value>Gets or sets the border style.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineStyleEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Single for "Single"
            /// </summary>
            [EnumMember(Value = "Single")]
            Single,
            
            /// <summary>
            /// Enum Thick for "Thick"
            /// </summary>
            [EnumMember(Value = "Thick")]
            Thick,
            
            /// <summary>
            /// Enum Double for "Double"
            /// </summary>
            [EnumMember(Value = "Double")]
            Double,
            
            /// <summary>
            /// Enum Hairline for "Hairline"
            /// </summary>
            [EnumMember(Value = "Hairline")]
            Hairline,
            
            /// <summary>
            /// Enum Dot for "Dot"
            /// </summary>
            [EnumMember(Value = "Dot")]
            Dot,
            
            /// <summary>
            /// Enum DashLargeGap for "DashLargeGap"
            /// </summary>
            [EnumMember(Value = "DashLargeGap")]
            DashLargeGap,
            
            /// <summary>
            /// Enum DotDash for "DotDash"
            /// </summary>
            [EnumMember(Value = "DotDash")]
            DotDash,
            
            /// <summary>
            /// Enum DotDotDash for "DotDotDash"
            /// </summary>
            [EnumMember(Value = "DotDotDash")]
            DotDotDash,
            
            /// <summary>
            /// Enum Triple for "Triple"
            /// </summary>
            [EnumMember(Value = "Triple")]
            Triple,
            
            /// <summary>
            /// Enum ThinThickSmallGap for "ThinThickSmallGap"
            /// </summary>
            [EnumMember(Value = "ThinThickSmallGap")]
            ThinThickSmallGap,
            
            /// <summary>
            /// Enum ThickThinSmallGap for "ThickThinSmallGap"
            /// </summary>
            [EnumMember(Value = "ThickThinSmallGap")]
            ThickThinSmallGap,
            
            /// <summary>
            /// Enum ThinThickThinSmallGap for "ThinThickThinSmallGap"
            /// </summary>
            [EnumMember(Value = "ThinThickThinSmallGap")]
            ThinThickThinSmallGap,
            
            /// <summary>
            /// Enum ThinThickMediumGap for "ThinThickMediumGap"
            /// </summary>
            [EnumMember(Value = "ThinThickMediumGap")]
            ThinThickMediumGap,
            
            /// <summary>
            /// Enum ThickThinMediumGap for "ThickThinMediumGap"
            /// </summary>
            [EnumMember(Value = "ThickThinMediumGap")]
            ThickThinMediumGap,
            
            /// <summary>
            /// Enum ThinThickThinMediumGap for "ThinThickThinMediumGap"
            /// </summary>
            [EnumMember(Value = "ThinThickThinMediumGap")]
            ThinThickThinMediumGap,
            
            /// <summary>
            /// Enum ThinThickLargeGap for "ThinThickLargeGap"
            /// </summary>
            [EnumMember(Value = "ThinThickLargeGap")]
            ThinThickLargeGap,
            
            /// <summary>
            /// Enum ThickThinLargeGap for "ThickThinLargeGap"
            /// </summary>
            [EnumMember(Value = "ThickThinLargeGap")]
            ThickThinLargeGap,
            
            /// <summary>
            /// Enum ThinThickThinLargeGap for "ThinThickThinLargeGap"
            /// </summary>
            [EnumMember(Value = "ThinThickThinLargeGap")]
            ThinThickThinLargeGap,
            
            /// <summary>
            /// Enum Wave for "Wave"
            /// </summary>
            [EnumMember(Value = "Wave")]
            Wave,
            
            /// <summary>
            /// Enum DoubleWave for "DoubleWave"
            /// </summary>
            [EnumMember(Value = "DoubleWave")]
            DoubleWave,
            
            /// <summary>
            /// Enum DashSmallGap for "DashSmallGap"
            /// </summary>
            [EnumMember(Value = "DashSmallGap")]
            DashSmallGap,
            
            /// <summary>
            /// Enum DashDotStroker for "DashDotStroker"
            /// </summary>
            [EnumMember(Value = "DashDotStroker")]
            DashDotStroker,
            
            /// <summary>
            /// Enum Emboss3D for "Emboss3D"
            /// </summary>
            [EnumMember(Value = "Emboss3D")]
            Emboss3D,
            
            /// <summary>
            /// Enum Engrave3D for "Engrave3D"
            /// </summary>
            [EnumMember(Value = "Engrave3D")]
            Engrave3D,
            
            /// <summary>
            /// Enum Outset for "Outset"
            /// </summary>
            [EnumMember(Value = "Outset")]
            Outset,
            
            /// <summary>
            /// Enum Inset for "Inset"
            /// </summary>
            [EnumMember(Value = "Inset")]
            Inset
        }

        /// <summary>
        /// Gets or sets the border type.
        /// </summary>
        /// <value>Gets or sets the border type.</value>
        [DataMember(Name="BorderType", EmitDefaultValue=false)]
        public BorderTypeEnum? BorderType { get; set; }
        /// <summary>
        /// Gets or sets the border style.
        /// </summary>
        /// <value>Gets or sets the border style.</value>
        [DataMember(Name="LineStyle", EmitDefaultValue=false)]
        public LineStyleEnum? LineStyle { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsCommonBorder" /> class.
        /// </summary>
        /// <param name="BorderType">Gets or sets the border type..</param>
        /// <param name="Color">Gets or sets the border color..</param>
        /// <param name="DistanceFromText">Gets or sets distance of the border from text or from the page edge in points..</param>
        /// <param name="LineStyle">Gets or sets the border style..</param>
        /// <param name="LineWidth">Gets or sets the border width in points..</param>
        /// <param name="Shadow">Gets or sets a value indicating whether the border has a shadow..</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsCommonBorder(BorderTypeEnum? BorderType = default(BorderTypeEnum?), AsposeWordsCloudDTOXmlColor Color = default(AsposeWordsCloudDTOXmlColor), double? DistanceFromText = default(double?), LineStyleEnum? LineStyle = default(LineStyleEnum?), double? LineWidth = default(double?), bool? Shadow = default(bool?), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.BorderType = BorderType;
            this.Color = Color;
            this.DistanceFromText = DistanceFromText;
            this.LineStyle = LineStyle;
            this.LineWidth = LineWidth;
            this.Shadow = Shadow;
            this.Link = Link;
        }
        

        /// <summary>
        /// Gets or sets the border color.
        /// </summary>
        /// <value>Gets or sets the border color.</value>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOXmlColor Color { get; set; }

        /// <summary>
        /// Gets or sets distance of the border from text or from the page edge in points.
        /// </summary>
        /// <value>Gets or sets distance of the border from text or from the page edge in points.</value>
        [DataMember(Name="DistanceFromText", EmitDefaultValue=false)]
        public double? DistanceFromText { get; set; }


        /// <summary>
        /// Gets or sets the border width in points.
        /// </summary>
        /// <value>Gets or sets the border width in points.</value>
        [DataMember(Name="LineWidth", EmitDefaultValue=false)]
        public double? LineWidth { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the border has a shadow.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the border has a shadow.</value>
        [DataMember(Name="Shadow", EmitDefaultValue=false)]
        public bool? Shadow { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsCommonBorder {\n");
            sb.Append("  BorderType: ").Append(BorderType).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  DistanceFromText: ").Append(DistanceFromText).Append("\n");
            sb.Append("  LineStyle: ").Append(LineStyle).Append("\n");
            sb.Append("  LineWidth: ").Append(LineWidth).Append("\n");
            sb.Append("  Shadow: ").Append(Shadow).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsCommonBorder);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsCommonBorder instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsCommonBorder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsCommonBorder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BorderType == other.BorderType ||
                    this.BorderType != null &&
                    this.BorderType.Equals(other.BorderType)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.DistanceFromText == other.DistanceFromText ||
                    this.DistanceFromText != null &&
                    this.DistanceFromText.Equals(other.DistanceFromText)
                ) && 
                (
                    this.LineStyle == other.LineStyle ||
                    this.LineStyle != null &&
                    this.LineStyle.Equals(other.LineStyle)
                ) && 
                (
                    this.LineWidth == other.LineWidth ||
                    this.LineWidth != null &&
                    this.LineWidth.Equals(other.LineWidth)
                ) && 
                (
                    this.Shadow == other.Shadow ||
                    this.Shadow != null &&
                    this.Shadow.Equals(other.Shadow)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BorderType != null)
                    hash = hash * 59 + this.BorderType.GetHashCode();
                if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                if (this.DistanceFromText != null)
                    hash = hash * 59 + this.DistanceFromText.GetHashCode();
                if (this.LineStyle != null)
                    hash = hash * 59 + this.LineStyle.GetHashCode();
                if (this.LineWidth != null)
                    hash = hash * 59 + this.LineWidth.GetHashCode();
                if (this.Shadow != null)
                    hash = hash * 59 + this.Shadow.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
