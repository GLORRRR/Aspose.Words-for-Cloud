/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Comment.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsCommentsCommentDto :  IEquatable<AsposeWordsCloudDTODocumentElementsCommentsCommentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsCommentsCommentDto" /> class.
        /// </summary>
        /// <param name="RangeStart">Link to comment range start node..</param>
        /// <param name="RangeEnd">Link to comment range end node..</param>
        /// <param name="Author">Returns or sets the author name for a comment..</param>
        /// <param name="Initial">Returns or sets the initials of the user associated with a specific comment..</param>
        /// <param name="DateTime">Gets the date and time that the comment was made..</param>
        /// <param name="Text">This is a convenience property that allows to easily get or set text of the comment..</param>
        /// <param name="Content">Content of comment.</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsCommentsCommentDto(AsposeWordsCloudDTODocumentPositionDto RangeStart = default(AsposeWordsCloudDTODocumentPositionDto), AsposeWordsCloudDTODocumentPositionDto RangeEnd = default(AsposeWordsCloudDTODocumentPositionDto), string Author = default(string), string Initial = default(string), DateTime? DateTime = default(DateTime?), string Text = default(string), AsposeWordsCloudDTODocumentElementsStoryChildNodes Content = default(AsposeWordsCloudDTODocumentElementsStoryChildNodes), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.RangeStart = RangeStart;
            this.RangeEnd = RangeEnd;
            this.Author = Author;
            this.Initial = Initial;
            this.DateTime = DateTime;
            this.Text = Text;
            this.Content = Content;
            this.Link = Link;
        }
        
        /// <summary>
        /// Link to comment range start node.
        /// </summary>
        /// <value>Link to comment range start node.</value>
        [DataMember(Name="RangeStart", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentPositionDto RangeStart { get; set; }

        /// <summary>
        /// Link to comment range end node.
        /// </summary>
        /// <value>Link to comment range end node.</value>
        [DataMember(Name="RangeEnd", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentPositionDto RangeEnd { get; set; }

        /// <summary>
        /// Returns or sets the author name for a comment.
        /// </summary>
        /// <value>Returns or sets the author name for a comment.</value>
        [DataMember(Name="Author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Returns or sets the initials of the user associated with a specific comment.
        /// </summary>
        /// <value>Returns or sets the initials of the user associated with a specific comment.</value>
        [DataMember(Name="Initial", EmitDefaultValue=false)]
        public string Initial { get; set; }

        /// <summary>
        /// Gets the date and time that the comment was made.
        /// </summary>
        /// <value>Gets the date and time that the comment was made.</value>
        [DataMember(Name="DateTime", EmitDefaultValue=false)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// This is a convenience property that allows to easily get or set text of the comment.
        /// </summary>
        /// <value>This is a convenience property that allows to easily get or set text of the comment.</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Content of comment
        /// </summary>
        /// <value>Content of comment</value>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentElementsStoryChildNodes Content { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsCommentsCommentDto {\n");
            sb.Append("  RangeStart: ").Append(RangeStart).Append("\n");
            sb.Append("  RangeEnd: ").Append(RangeEnd).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Initial: ").Append(Initial).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsCommentsCommentDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsCommentsCommentDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsCommentsCommentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsCommentsCommentDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RangeStart == other.RangeStart ||
                    this.RangeStart != null &&
                    this.RangeStart.Equals(other.RangeStart)
                ) && 
                (
                    this.RangeEnd == other.RangeEnd ||
                    this.RangeEnd != null &&
                    this.RangeEnd.Equals(other.RangeEnd)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.Initial == other.Initial ||
                    this.Initial != null &&
                    this.Initial.Equals(other.Initial)
                ) && 
                (
                    this.DateTime == other.DateTime ||
                    this.DateTime != null &&
                    this.DateTime.Equals(other.DateTime)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RangeStart != null)
                    hash = hash * 59 + this.RangeStart.GetHashCode();
                if (this.RangeEnd != null)
                    hash = hash * 59 + this.RangeEnd.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.Initial != null)
                    hash = hash * 59 + this.Initial.GetHashCode();
                if (this.DateTime != null)
                    hash = hash * 59 + this.DateTime.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
