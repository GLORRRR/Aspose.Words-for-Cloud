/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for outline options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingOutlineOptionsData :  IEquatable<AsposeWordsCloudDTOSavingOutlineOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingOutlineOptionsData" /> class.
        /// </summary>
        /// <param name="BookmarksOutlineLevels">Allows to specify individual bookmarks outline level.</param>
        /// <param name="DefaultBookmarksOutlineLevel">Specifies the default level in the document outline at which to display Word bookmarks.</param>
        /// <param name="ExpandedOutlineLevels">Specifies how many levels in the document outline to show expanded when the file is viewed.</param>
        /// <param name="HeadingsOutlineLevels">Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the document outline.</param>
        public AsposeWordsCloudDTOSavingOutlineOptionsData(List<AsposeWordsCloudDTOSavingBookmarksOutlineLevelData> BookmarksOutlineLevels = default(List<AsposeWordsCloudDTOSavingBookmarksOutlineLevelData>), int? DefaultBookmarksOutlineLevel = default(int?), int? ExpandedOutlineLevels = default(int?), int? HeadingsOutlineLevels = default(int?))
        {
            this.BookmarksOutlineLevels = BookmarksOutlineLevels;
            this.DefaultBookmarksOutlineLevel = DefaultBookmarksOutlineLevel;
            this.ExpandedOutlineLevels = ExpandedOutlineLevels;
            this.HeadingsOutlineLevels = HeadingsOutlineLevels;
        }
        
        /// <summary>
        /// Allows to specify individual bookmarks outline level
        /// </summary>
        /// <value>Allows to specify individual bookmarks outline level</value>
        [DataMember(Name="BookmarksOutlineLevels", EmitDefaultValue=false)]
        public List<AsposeWordsCloudDTOSavingBookmarksOutlineLevelData> BookmarksOutlineLevels { get; set; }

        /// <summary>
        /// Specifies the default level in the document outline at which to display Word bookmarks
        /// </summary>
        /// <value>Specifies the default level in the document outline at which to display Word bookmarks</value>
        [DataMember(Name="DefaultBookmarksOutlineLevel", EmitDefaultValue=false)]
        public int? DefaultBookmarksOutlineLevel { get; set; }

        /// <summary>
        /// Specifies how many levels in the document outline to show expanded when the file is viewed
        /// </summary>
        /// <value>Specifies how many levels in the document outline to show expanded when the file is viewed</value>
        [DataMember(Name="ExpandedOutlineLevels", EmitDefaultValue=false)]
        public int? ExpandedOutlineLevels { get; set; }

        /// <summary>
        /// Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the document outline
        /// </summary>
        /// <value>Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the document outline</value>
        [DataMember(Name="HeadingsOutlineLevels", EmitDefaultValue=false)]
        public int? HeadingsOutlineLevels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingOutlineOptionsData {\n");
            sb.Append("  BookmarksOutlineLevels: ").Append(BookmarksOutlineLevels).Append("\n");
            sb.Append("  DefaultBookmarksOutlineLevel: ").Append(DefaultBookmarksOutlineLevel).Append("\n");
            sb.Append("  ExpandedOutlineLevels: ").Append(ExpandedOutlineLevels).Append("\n");
            sb.Append("  HeadingsOutlineLevels: ").Append(HeadingsOutlineLevels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingOutlineOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingOutlineOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingOutlineOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingOutlineOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BookmarksOutlineLevels == other.BookmarksOutlineLevels ||
                    this.BookmarksOutlineLevels != null &&
                    this.BookmarksOutlineLevels.SequenceEqual(other.BookmarksOutlineLevels)
                ) && 
                (
                    this.DefaultBookmarksOutlineLevel == other.DefaultBookmarksOutlineLevel ||
                    this.DefaultBookmarksOutlineLevel != null &&
                    this.DefaultBookmarksOutlineLevel.Equals(other.DefaultBookmarksOutlineLevel)
                ) && 
                (
                    this.ExpandedOutlineLevels == other.ExpandedOutlineLevels ||
                    this.ExpandedOutlineLevels != null &&
                    this.ExpandedOutlineLevels.Equals(other.ExpandedOutlineLevels)
                ) && 
                (
                    this.HeadingsOutlineLevels == other.HeadingsOutlineLevels ||
                    this.HeadingsOutlineLevels != null &&
                    this.HeadingsOutlineLevels.Equals(other.HeadingsOutlineLevels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BookmarksOutlineLevels != null)
                    hash = hash * 59 + this.BookmarksOutlineLevels.GetHashCode();
                if (this.DefaultBookmarksOutlineLevel != null)
                    hash = hash * 59 + this.DefaultBookmarksOutlineLevel.GetHashCode();
                if (this.ExpandedOutlineLevels != null)
                    hash = hash * 59 + this.ExpandedOutlineLevels.GetHashCode();
                if (this.HeadingsOutlineLevels != null)
                    hash = hash * 59 + this.HeadingsOutlineLevels.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
