/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Allows to specify additional System.Drawing.Graphics quality options.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData :  IEquatable<AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets a value that specifies how composited images are drawn to this Graphics.
        /// </summary>
        /// <value>Gets or sets a value that specifies how composited images are drawn to this Graphics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompositingModeEnum
        {
            
            /// <summary>
            /// Enum SourceOver for "SourceOver"
            /// </summary>
            [EnumMember(Value = "SourceOver")]
            SourceOver,
            
            /// <summary>
            /// Enum SourceCopy for "SourceCopy"
            /// </summary>
            [EnumMember(Value = "SourceCopy")]
            SourceCopy
        }

        /// <summary>
        /// Gets or sets the rendering quality of composited images drawn to this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering quality of composited images drawn to this Graphics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CompositingQualityEnum
        {
            
            /// <summary>
            /// Enum Invalid for "Invalid"
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum HighSpeed for "HighSpeed"
            /// </summary>
            [EnumMember(Value = "HighSpeed")]
            HighSpeed,
            
            /// <summary>
            /// Enum HighQuality for "HighQuality"
            /// </summary>
            [EnumMember(Value = "HighQuality")]
            HighQuality,
            
            /// <summary>
            /// Enum GammaCorrected for "GammaCorrected"
            /// </summary>
            [EnumMember(Value = "GammaCorrected")]
            GammaCorrected,
            
            /// <summary>
            /// Enum AssumeLinear for "AssumeLinear"
            /// </summary>
            [EnumMember(Value = "AssumeLinear")]
            AssumeLinear
        }

        /// <summary>
        /// Gets or sets the interpolation mode associated with this Graphics.
        /// </summary>
        /// <value>Gets or sets the interpolation mode associated with this Graphics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InterpolationModeEnum
        {
            
            /// <summary>
            /// Enum Invalid for "Invalid"
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum Low for "Low"
            /// </summary>
            [EnumMember(Value = "Low")]
            Low,
            
            /// <summary>
            /// Enum High for "High"
            /// </summary>
            [EnumMember(Value = "High")]
            High,
            
            /// <summary>
            /// Enum Bilinear for "Bilinear"
            /// </summary>
            [EnumMember(Value = "Bilinear")]
            Bilinear,
            
            /// <summary>
            /// Enum Bicubic for "Bicubic"
            /// </summary>
            [EnumMember(Value = "Bicubic")]
            Bicubic,
            
            /// <summary>
            /// Enum NearestNeighbor for "NearestNeighbor"
            /// </summary>
            [EnumMember(Value = "NearestNeighbor")]
            NearestNeighbor,
            
            /// <summary>
            /// Enum HighQualityBilinear for "HighQualityBilinear"
            /// </summary>
            [EnumMember(Value = "HighQualityBilinear")]
            HighQualityBilinear,
            
            /// <summary>
            /// Enum HighQualityBicubic for "HighQualityBicubic"
            /// </summary>
            [EnumMember(Value = "HighQualityBicubic")]
            HighQualityBicubic
        }

        /// <summary>
        /// Gets or sets the rendering quality for this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering quality for this Graphics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SmoothingModeEnum
        {
            
            /// <summary>
            /// Enum Invalid for "Invalid"
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum HighSpeed for "HighSpeed"
            /// </summary>
            [EnumMember(Value = "HighSpeed")]
            HighSpeed,
            
            /// <summary>
            /// Enum HighQuality for "HighQuality"
            /// </summary>
            [EnumMember(Value = "HighQuality")]
            HighQuality,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum AntiAlias for "AntiAlias"
            /// </summary>
            [EnumMember(Value = "AntiAlias")]
            AntiAlias
        }

        /// <summary>
        /// Gets or sets the rendering mode for text associated with this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering mode for text associated with this Graphics.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TextRenderingHintEnum
        {
            
            /// <summary>
            /// Enum SystemDefault for "SystemDefault"
            /// </summary>
            [EnumMember(Value = "SystemDefault")]
            SystemDefault,
            
            /// <summary>
            /// Enum SingleBitPerPixelGridFit for "SingleBitPerPixelGridFit"
            /// </summary>
            [EnumMember(Value = "SingleBitPerPixelGridFit")]
            SingleBitPerPixelGridFit,
            
            /// <summary>
            /// Enum SingleBitPerPixel for "SingleBitPerPixel"
            /// </summary>
            [EnumMember(Value = "SingleBitPerPixel")]
            SingleBitPerPixel,
            
            /// <summary>
            /// Enum AntiAliasGridFit for "AntiAliasGridFit"
            /// </summary>
            [EnumMember(Value = "AntiAliasGridFit")]
            AntiAliasGridFit,
            
            /// <summary>
            /// Enum AntiAlias for "AntiAlias"
            /// </summary>
            [EnumMember(Value = "AntiAlias")]
            AntiAlias,
            
            /// <summary>
            /// Enum ClearTypeGridFit for "ClearTypeGridFit"
            /// </summary>
            [EnumMember(Value = "ClearTypeGridFit")]
            ClearTypeGridFit
        }

        /// <summary>
        /// Gets or sets a value that specifies how composited images are drawn to this Graphics.
        /// </summary>
        /// <value>Gets or sets a value that specifies how composited images are drawn to this Graphics.</value>
        [DataMember(Name="CompositingMode", EmitDefaultValue=false)]
        public CompositingModeEnum? CompositingMode { get; set; }
        /// <summary>
        /// Gets or sets the rendering quality of composited images drawn to this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering quality of composited images drawn to this Graphics.</value>
        [DataMember(Name="CompositingQuality", EmitDefaultValue=false)]
        public CompositingQualityEnum? CompositingQuality { get; set; }
        /// <summary>
        /// Gets or sets the interpolation mode associated with this Graphics.
        /// </summary>
        /// <value>Gets or sets the interpolation mode associated with this Graphics.</value>
        [DataMember(Name="InterpolationMode", EmitDefaultValue=false)]
        public InterpolationModeEnum? InterpolationMode { get; set; }
        /// <summary>
        /// Gets or sets the rendering quality for this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering quality for this Graphics.</value>
        [DataMember(Name="SmoothingMode", EmitDefaultValue=false)]
        public SmoothingModeEnum? SmoothingMode { get; set; }
        /// <summary>
        /// Gets or sets the rendering mode for text associated with this Graphics.
        /// </summary>
        /// <value>Gets or sets the rendering mode for text associated with this Graphics.</value>
        [DataMember(Name="TextRenderingHint", EmitDefaultValue=false)]
        public TextRenderingHintEnum? TextRenderingHint { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData" /> class.
        /// </summary>
        /// <param name="CompositingMode">Gets or sets a value that specifies how composited images are drawn to this Graphics..</param>
        /// <param name="CompositingQuality">Gets or sets the rendering quality of composited images drawn to this Graphics..</param>
        /// <param name="InterpolationMode">Gets or sets the interpolation mode associated with this Graphics..</param>
        /// <param name="SmoothingMode">Gets or sets the rendering quality for this Graphics..</param>
        /// <param name="StringFormat">Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features..</param>
        /// <param name="TextRenderingHint">Gets or sets the rendering mode for text associated with this Graphics..</param>
        public AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData(CompositingModeEnum? CompositingMode = default(CompositingModeEnum?), CompositingQualityEnum? CompositingQuality = default(CompositingQualityEnum?), InterpolationModeEnum? InterpolationMode = default(InterpolationModeEnum?), SmoothingModeEnum? SmoothingMode = default(SmoothingModeEnum?), AsposeWordsCloudDTOSavingImagesStringFormatData StringFormat = default(AsposeWordsCloudDTOSavingImagesStringFormatData), TextRenderingHintEnum? TextRenderingHint = default(TextRenderingHintEnum?))
        {
            this.CompositingMode = CompositingMode;
            this.CompositingQuality = CompositingQuality;
            this.InterpolationMode = InterpolationMode;
            this.SmoothingMode = SmoothingMode;
            this.StringFormat = StringFormat;
            this.TextRenderingHint = TextRenderingHint;
        }
        




        /// <summary>
        /// Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.
        /// </summary>
        /// <value>Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations (such as ellipsis insertion and national digit substitution) and OpenType features.</value>
        [DataMember(Name="StringFormat", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOSavingImagesStringFormatData StringFormat { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData {\n");
            sb.Append("  CompositingMode: ").Append(CompositingMode).Append("\n");
            sb.Append("  CompositingQuality: ").Append(CompositingQuality).Append("\n");
            sb.Append("  InterpolationMode: ").Append(InterpolationMode).Append("\n");
            sb.Append("  SmoothingMode: ").Append(SmoothingMode).Append("\n");
            sb.Append("  StringFormat: ").Append(StringFormat).Append("\n");
            sb.Append("  TextRenderingHint: ").Append(TextRenderingHint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingImagesGraphicsQualityOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompositingMode == other.CompositingMode ||
                    this.CompositingMode != null &&
                    this.CompositingMode.Equals(other.CompositingMode)
                ) && 
                (
                    this.CompositingQuality == other.CompositingQuality ||
                    this.CompositingQuality != null &&
                    this.CompositingQuality.Equals(other.CompositingQuality)
                ) && 
                (
                    this.InterpolationMode == other.InterpolationMode ||
                    this.InterpolationMode != null &&
                    this.InterpolationMode.Equals(other.InterpolationMode)
                ) && 
                (
                    this.SmoothingMode == other.SmoothingMode ||
                    this.SmoothingMode != null &&
                    this.SmoothingMode.Equals(other.SmoothingMode)
                ) && 
                (
                    this.StringFormat == other.StringFormat ||
                    this.StringFormat != null &&
                    this.StringFormat.Equals(other.StringFormat)
                ) && 
                (
                    this.TextRenderingHint == other.TextRenderingHint ||
                    this.TextRenderingHint != null &&
                    this.TextRenderingHint.Equals(other.TextRenderingHint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompositingMode != null)
                    hash = hash * 59 + this.CompositingMode.GetHashCode();
                if (this.CompositingQuality != null)
                    hash = hash * 59 + this.CompositingQuality.GetHashCode();
                if (this.InterpolationMode != null)
                    hash = hash * 59 + this.InterpolationMode.GetHashCode();
                if (this.SmoothingMode != null)
                    hash = hash * 59 + this.SmoothingMode.GetHashCode();
                if (this.StringFormat != null)
                    hash = hash * 59 + this.StringFormat.GetHashCode();
                if (this.TextRenderingHint != null)
                    hash = hash * 59 + this.TextRenderingHint.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
