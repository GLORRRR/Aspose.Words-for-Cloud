/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Allows to specify System.Drawing.StringFormat options.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingImagesStringFormatData :  IEquatable<AsposeWordsCloudDTOSavingImagesStringFormatData>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets horizontal alignment of the string.
        /// </summary>
        /// <value>Gets or sets horizontal alignment of the string.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignmentEnum
        {
            
            /// <summary>
            /// Enum Near for "Near"
            /// </summary>
            [EnumMember(Value = "Near")]
            Near,
            
            /// <summary>
            /// Enum Center for "Center"
            /// </summary>
            [EnumMember(Value = "Center")]
            Center,
            
            /// <summary>
            /// Enum Far for "Far"
            /// </summary>
            [EnumMember(Value = "Far")]
            Far
        }

        /// <summary>
        /// Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.
        /// </summary>
        /// <value>Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatFlagsEnum
        {
            
            /// <summary>
            /// Enum DirectionRightToLeft for "DirectionRightToLeft"
            /// </summary>
            [EnumMember(Value = "DirectionRightToLeft")]
            DirectionRightToLeft,
            
            /// <summary>
            /// Enum DirectionVertical for "DirectionVertical"
            /// </summary>
            [EnumMember(Value = "DirectionVertical")]
            DirectionVertical,
            
            /// <summary>
            /// Enum FitBlackBox for "FitBlackBox"
            /// </summary>
            [EnumMember(Value = "FitBlackBox")]
            FitBlackBox,
            
            /// <summary>
            /// Enum DisplayFormatControl for "DisplayFormatControl"
            /// </summary>
            [EnumMember(Value = "DisplayFormatControl")]
            DisplayFormatControl,
            
            /// <summary>
            /// Enum NoFontFallback for "NoFontFallback"
            /// </summary>
            [EnumMember(Value = "NoFontFallback")]
            NoFontFallback,
            
            /// <summary>
            /// Enum MeasureTrailingSpaces for "MeasureTrailingSpaces"
            /// </summary>
            [EnumMember(Value = "MeasureTrailingSpaces")]
            MeasureTrailingSpaces,
            
            /// <summary>
            /// Enum NoWrap for "NoWrap"
            /// </summary>
            [EnumMember(Value = "NoWrap")]
            NoWrap,
            
            /// <summary>
            /// Enum LineLimit for "LineLimit"
            /// </summary>
            [EnumMember(Value = "LineLimit")]
            LineLimit,
            
            /// <summary>
            /// Enum NoClip for "NoClip"
            /// </summary>
            [EnumMember(Value = "NoClip")]
            NoClip
        }

        /// <summary>
        /// Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.
        /// </summary>
        /// <value>Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HotkeyPrefixEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Show for "Show"
            /// </summary>
            [EnumMember(Value = "Show")]
            Show,
            
            /// <summary>
            /// Enum Hide for "Hide"
            /// </summary>
            [EnumMember(Value = "Hide")]
            Hide
        }

        /// <summary>
        /// Gets or sets the vertical alignment of the string.
        /// </summary>
        /// <value>Gets or sets the vertical alignment of the string.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineAlignmentEnum
        {
            
            /// <summary>
            /// Enum Near for "Near"
            /// </summary>
            [EnumMember(Value = "Near")]
            Near,
            
            /// <summary>
            /// Enum Center for "Center"
            /// </summary>
            [EnumMember(Value = "Center")]
            Center,
            
            /// <summary>
            /// Enum Far for "Far"
            /// </summary>
            [EnumMember(Value = "Far")]
            Far
        }

        /// <summary>
        /// Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.
        /// </summary>
        /// <value>Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrimmingEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Character for "Character"
            /// </summary>
            [EnumMember(Value = "Character")]
            Character,
            
            /// <summary>
            /// Enum Word for "Word"
            /// </summary>
            [EnumMember(Value = "Word")]
            Word,
            
            /// <summary>
            /// Enum EllipsisCharacter for "EllipsisCharacter"
            /// </summary>
            [EnumMember(Value = "EllipsisCharacter")]
            EllipsisCharacter,
            
            /// <summary>
            /// Enum EllipsisWord for "EllipsisWord"
            /// </summary>
            [EnumMember(Value = "EllipsisWord")]
            EllipsisWord,
            
            /// <summary>
            /// Enum EllipsisPath for "EllipsisPath"
            /// </summary>
            [EnumMember(Value = "EllipsisPath")]
            EllipsisPath
        }

        /// <summary>
        /// Gets or sets horizontal alignment of the string.
        /// </summary>
        /// <value>Gets or sets horizontal alignment of the string.</value>
        [DataMember(Name="Alignment", EmitDefaultValue=false)]
        public AlignmentEnum? Alignment { get; set; }
        /// <summary>
        /// Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.
        /// </summary>
        /// <value>Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.</value>
        [DataMember(Name="FormatFlags", EmitDefaultValue=false)]
        public FormatFlagsEnum? FormatFlags { get; set; }
        /// <summary>
        /// Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.
        /// </summary>
        /// <value>Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.</value>
        [DataMember(Name="HotkeyPrefix", EmitDefaultValue=false)]
        public HotkeyPrefixEnum? HotkeyPrefix { get; set; }
        /// <summary>
        /// Gets or sets the vertical alignment of the string.
        /// </summary>
        /// <value>Gets or sets the vertical alignment of the string.</value>
        [DataMember(Name="LineAlignment", EmitDefaultValue=false)]
        public LineAlignmentEnum? LineAlignment { get; set; }
        /// <summary>
        /// Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.
        /// </summary>
        /// <value>Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.</value>
        [DataMember(Name="Trimming", EmitDefaultValue=false)]
        public TrimmingEnum? Trimming { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingImagesStringFormatData" /> class.
        /// </summary>
        /// <param name="Alignment">Gets or sets horizontal alignment of the string..</param>
        /// <param name="FormatFlags">Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information..</param>
        /// <param name="HotkeyPrefix">Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object..</param>
        /// <param name="LineAlignment">Gets or sets the vertical alignment of the string..</param>
        /// <param name="Trimming">Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object..</param>
        public AsposeWordsCloudDTOSavingImagesStringFormatData(AlignmentEnum? Alignment = default(AlignmentEnum?), FormatFlagsEnum? FormatFlags = default(FormatFlagsEnum?), HotkeyPrefixEnum? HotkeyPrefix = default(HotkeyPrefixEnum?), LineAlignmentEnum? LineAlignment = default(LineAlignmentEnum?), TrimmingEnum? Trimming = default(TrimmingEnum?))
        {
            this.Alignment = Alignment;
            this.FormatFlags = FormatFlags;
            this.HotkeyPrefix = HotkeyPrefix;
            this.LineAlignment = LineAlignment;
            this.Trimming = Trimming;
        }
        





        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingImagesStringFormatData {\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  FormatFlags: ").Append(FormatFlags).Append("\n");
            sb.Append("  HotkeyPrefix: ").Append(HotkeyPrefix).Append("\n");
            sb.Append("  LineAlignment: ").Append(LineAlignment).Append("\n");
            sb.Append("  Trimming: ").Append(Trimming).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingImagesStringFormatData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingImagesStringFormatData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingImagesStringFormatData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingImagesStringFormatData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Alignment == other.Alignment ||
                    this.Alignment != null &&
                    this.Alignment.Equals(other.Alignment)
                ) && 
                (
                    this.FormatFlags == other.FormatFlags ||
                    this.FormatFlags != null &&
                    this.FormatFlags.Equals(other.FormatFlags)
                ) && 
                (
                    this.HotkeyPrefix == other.HotkeyPrefix ||
                    this.HotkeyPrefix != null &&
                    this.HotkeyPrefix.Equals(other.HotkeyPrefix)
                ) && 
                (
                    this.LineAlignment == other.LineAlignment ||
                    this.LineAlignment != null &&
                    this.LineAlignment.Equals(other.LineAlignment)
                ) && 
                (
                    this.Trimming == other.Trimming ||
                    this.Trimming != null &&
                    this.Trimming.Equals(other.Trimming)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Alignment != null)
                    hash = hash * 59 + this.Alignment.GetHashCode();
                if (this.FormatFlags != null)
                    hash = hash * 59 + this.FormatFlags.GetHashCode();
                if (this.HotkeyPrefix != null)
                    hash = hash * 59 + this.HotkeyPrefix.GetHashCode();
                if (this.LineAlignment != null)
                    hash = hash * 59 + this.LineAlignment.GetHashCode();
                if (this.Trimming != null)
                    hash = hash * 59 + this.Trimming.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
