/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for svg save options
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingSvgSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingSvgSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingSvgSaveOptionsData" /> class.
        /// </summary>
        /// <param name="ExportEmbeddedImages">Specified whether images should be embedded into SVG document as base64.</param>
        /// <param name="FitToViewPort">Specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%..</param>
        /// <param name="ResourcesFolder">Specifies the physical folder where resources (images) are saved when exporting.</param>
        /// <param name="ResourcesFolderAlias">Specifies the name of the folder used to construct image URIs.</param>
        /// <param name="ShowPageBorder">Show/hide page stepper.</param>
        /// <param name="TextOutputMode">Determines how text should be rendered.</param>
        public AsposeWordsCloudDTOSavingSvgSaveOptionsData(bool? ExportEmbeddedImages = default(bool?), bool? FitToViewPort = default(bool?), string ResourcesFolder = default(string), string ResourcesFolderAlias = default(string), bool? ShowPageBorder = default(bool?), string TextOutputMode = default(string))
        {
            this.ExportEmbeddedImages = ExportEmbeddedImages;
            this.FitToViewPort = FitToViewPort;
            this.ResourcesFolder = ResourcesFolder;
            this.ResourcesFolderAlias = ResourcesFolderAlias;
            this.ShowPageBorder = ShowPageBorder;
            this.TextOutputMode = TextOutputMode;
        }
        
        /// <summary>
        /// Specified whether images should be embedded into SVG document as base64
        /// </summary>
        /// <value>Specified whether images should be embedded into SVG document as base64</value>
        [DataMember(Name="ExportEmbeddedImages", EmitDefaultValue=false)]
        public bool? ExportEmbeddedImages { get; set; }

        /// <summary>
        /// Specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.
        /// </summary>
        /// <value>Specifies if the output SVG should fill the available viewport area (browser window or container). When set to true width and height of output SVG are set to 100%.</value>
        [DataMember(Name="FitToViewPort", EmitDefaultValue=false)]
        public bool? FitToViewPort { get; set; }

        /// <summary>
        /// Specifies the physical folder where resources (images) are saved when exporting
        /// </summary>
        /// <value>Specifies the physical folder where resources (images) are saved when exporting</value>
        [DataMember(Name="ResourcesFolder", EmitDefaultValue=false)]
        public string ResourcesFolder { get; set; }

        /// <summary>
        /// Specifies the name of the folder used to construct image URIs
        /// </summary>
        /// <value>Specifies the name of the folder used to construct image URIs</value>
        [DataMember(Name="ResourcesFolderAlias", EmitDefaultValue=false)]
        public string ResourcesFolderAlias { get; set; }

        /// <summary>
        /// Show/hide page stepper
        /// </summary>
        /// <value>Show/hide page stepper</value>
        [DataMember(Name="ShowPageBorder", EmitDefaultValue=false)]
        public bool? ShowPageBorder { get; set; }

        /// <summary>
        /// Determines how text should be rendered
        /// </summary>
        /// <value>Determines how text should be rendered</value>
        [DataMember(Name="TextOutputMode", EmitDefaultValue=false)]
        public string TextOutputMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingSvgSaveOptionsData {\n");
            sb.Append("  ExportEmbeddedImages: ").Append(ExportEmbeddedImages).Append("\n");
            sb.Append("  FitToViewPort: ").Append(FitToViewPort).Append("\n");
            sb.Append("  ResourcesFolder: ").Append(ResourcesFolder).Append("\n");
            sb.Append("  ResourcesFolderAlias: ").Append(ResourcesFolderAlias).Append("\n");
            sb.Append("  ShowPageBorder: ").Append(ShowPageBorder).Append("\n");
            sb.Append("  TextOutputMode: ").Append(TextOutputMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingSvgSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingSvgSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingSvgSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingSvgSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExportEmbeddedImages == other.ExportEmbeddedImages ||
                    this.ExportEmbeddedImages != null &&
                    this.ExportEmbeddedImages.Equals(other.ExportEmbeddedImages)
                ) && 
                (
                    this.FitToViewPort == other.FitToViewPort ||
                    this.FitToViewPort != null &&
                    this.FitToViewPort.Equals(other.FitToViewPort)
                ) && 
                (
                    this.ResourcesFolder == other.ResourcesFolder ||
                    this.ResourcesFolder != null &&
                    this.ResourcesFolder.Equals(other.ResourcesFolder)
                ) && 
                (
                    this.ResourcesFolderAlias == other.ResourcesFolderAlias ||
                    this.ResourcesFolderAlias != null &&
                    this.ResourcesFolderAlias.Equals(other.ResourcesFolderAlias)
                ) && 
                (
                    this.ShowPageBorder == other.ShowPageBorder ||
                    this.ShowPageBorder != null &&
                    this.ShowPageBorder.Equals(other.ShowPageBorder)
                ) && 
                (
                    this.TextOutputMode == other.TextOutputMode ||
                    this.TextOutputMode != null &&
                    this.TextOutputMode.Equals(other.TextOutputMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExportEmbeddedImages != null)
                    hash = hash * 59 + this.ExportEmbeddedImages.GetHashCode();
                if (this.FitToViewPort != null)
                    hash = hash * 59 + this.FitToViewPort.GetHashCode();
                if (this.ResourcesFolder != null)
                    hash = hash * 59 + this.ResourcesFolder.GetHashCode();
                if (this.ResourcesFolderAlias != null)
                    hash = hash * 59 + this.ResourcesFolderAlias.GetHashCode();
                if (this.ShowPageBorder != null)
                    hash = hash * 59 + this.ShowPageBorder.GetHashCode();
                if (this.TextOutputMode != null)
                    hash = hash * 59 + this.TextOutputMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
