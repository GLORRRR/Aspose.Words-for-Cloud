/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents Words document DTO.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocument :  IEquatable<AsposeWordsCloudDTODocument>, IValidatableObject
    {
        /// <summary>
        /// Gets the original format of the document.
        /// </summary>
        /// <value>Gets the original format of the document.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceFormatEnum
        {
            
            /// <summary>
            /// Enum Unknown for "Unknown"
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Doc for "Doc"
            /// </summary>
            [EnumMember(Value = "Doc")]
            Doc,
            
            /// <summary>
            /// Enum Dot for "Dot"
            /// </summary>
            [EnumMember(Value = "Dot")]
            Dot,
            
            /// <summary>
            /// Enum DocPreWord60 for "DocPreWord60"
            /// </summary>
            [EnumMember(Value = "DocPreWord60")]
            DocPreWord60,
            
            /// <summary>
            /// Enum Docx for "Docx"
            /// </summary>
            [EnumMember(Value = "Docx")]
            Docx,
            
            /// <summary>
            /// Enum Docm for "Docm"
            /// </summary>
            [EnumMember(Value = "Docm")]
            Docm,
            
            /// <summary>
            /// Enum Dotx for "Dotx"
            /// </summary>
            [EnumMember(Value = "Dotx")]
            Dotx,
            
            /// <summary>
            /// Enum Dotm for "Dotm"
            /// </summary>
            [EnumMember(Value = "Dotm")]
            Dotm,
            
            /// <summary>
            /// Enum FlatOpc for "FlatOpc"
            /// </summary>
            [EnumMember(Value = "FlatOpc")]
            FlatOpc,
            
            /// <summary>
            /// Enum Rtf for "Rtf"
            /// </summary>
            [EnumMember(Value = "Rtf")]
            Rtf,
            
            /// <summary>
            /// Enum WordML for "WordML"
            /// </summary>
            [EnumMember(Value = "WordML")]
            WordML,
            
            /// <summary>
            /// Enum Html for "Html"
            /// </summary>
            [EnumMember(Value = "Html")]
            Html,
            
            /// <summary>
            /// Enum Mhtml for "Mhtml"
            /// </summary>
            [EnumMember(Value = "Mhtml")]
            Mhtml,
            
            /// <summary>
            /// Enum Epub for "Epub"
            /// </summary>
            [EnumMember(Value = "Epub")]
            Epub,
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text,
            
            /// <summary>
            /// Enum Odt for "Odt"
            /// </summary>
            [EnumMember(Value = "Odt")]
            Odt,
            
            /// <summary>
            /// Enum Ott for "Ott"
            /// </summary>
            [EnumMember(Value = "Ott")]
            Ott,
            
            /// <summary>
            /// Enum Pdf for "Pdf"
            /// </summary>
            [EnumMember(Value = "Pdf")]
            Pdf,
            
            /// <summary>
            /// Enum Xps for "Xps"
            /// </summary>
            [EnumMember(Value = "Xps")]
            Xps,
            
            /// <summary>
            /// Enum Swf for "Swf"
            /// </summary>
            [EnumMember(Value = "Swf")]
            Swf,
            
            /// <summary>
            /// Enum Tiff for "Tiff"
            /// </summary>
            [EnumMember(Value = "Tiff")]
            Tiff,
            
            /// <summary>
            /// Enum Svg for "Svg"
            /// </summary>
            [EnumMember(Value = "Svg")]
            Svg
        }

        /// <summary>
        /// Gets the original format of the document.
        /// </summary>
        /// <value>Gets the original format of the document.</value>
        [DataMember(Name="SourceFormat", EmitDefaultValue=false)]
        public SourceFormatEnum? SourceFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocument" /> class.
        /// </summary>
        /// <param name="Links">A list of links that originate from this document..</param>
        /// <param name="FileName">Gets the name of the file..</param>
        /// <param name="SourceFormat">Gets the original format of the document..</param>
        /// <param name="IsEncrypted">Returns true if the document is encrypted and requires a password to open..</param>
        /// <param name="IsSigned">Returns true if the document contains a digital signature. This property merely informs that a   digital signature is present on a document, but it does not specify whether the signature is valid or not..</param>
        /// <param name="DocumentProperties">Returns document properties..</param>
        public AsposeWordsCloudDTODocument(List<AsposeWordsCloudDTOCommonLink> Links = default(List<AsposeWordsCloudDTOCommonLink>), string FileName = default(string), SourceFormatEnum? SourceFormat = default(SourceFormatEnum?), bool? IsEncrypted = default(bool?), bool? IsSigned = default(bool?), AsposeWordsCloudDTODocumentProperties DocumentProperties = default(AsposeWordsCloudDTODocumentProperties))
        {
            this.Links = Links;
            this.FileName = FileName;
            this.SourceFormat = SourceFormat;
            this.IsEncrypted = IsEncrypted;
            this.IsSigned = IsSigned;
            this.DocumentProperties = DocumentProperties;
        }
        
        /// <summary>
        /// A list of links that originate from this document.
        /// </summary>
        /// <value>A list of links that originate from this document.</value>
        [DataMember(Name="Links", EmitDefaultValue=false)]
        public List<AsposeWordsCloudDTOCommonLink> Links { get; set; }

        /// <summary>
        /// Gets the name of the file.
        /// </summary>
        /// <value>Gets the name of the file.</value>
        [DataMember(Name="FileName", EmitDefaultValue=false)]
        public string FileName { get; set; }


        /// <summary>
        /// Returns true if the document is encrypted and requires a password to open.
        /// </summary>
        /// <value>Returns true if the document is encrypted and requires a password to open.</value>
        [DataMember(Name="IsEncrypted", EmitDefaultValue=false)]
        public bool? IsEncrypted { get; set; }

        /// <summary>
        /// Returns true if the document contains a digital signature. This property merely informs that a   digital signature is present on a document, but it does not specify whether the signature is valid or not.
        /// </summary>
        /// <value>Returns true if the document contains a digital signature. This property merely informs that a   digital signature is present on a document, but it does not specify whether the signature is valid or not.</value>
        [DataMember(Name="IsSigned", EmitDefaultValue=false)]
        public bool? IsSigned { get; set; }

        /// <summary>
        /// Returns document properties.
        /// </summary>
        /// <value>Returns document properties.</value>
        [DataMember(Name="DocumentProperties", EmitDefaultValue=false)]
        public AsposeWordsCloudDTODocumentProperties DocumentProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocument {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  SourceFormat: ").Append(SourceFormat).Append("\n");
            sb.Append("  IsEncrypted: ").Append(IsEncrypted).Append("\n");
            sb.Append("  IsSigned: ").Append(IsSigned).Append("\n");
            sb.Append("  DocumentProperties: ").Append(DocumentProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocument);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocument instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.SourceFormat == other.SourceFormat ||
                    this.SourceFormat != null &&
                    this.SourceFormat.Equals(other.SourceFormat)
                ) && 
                (
                    this.IsEncrypted == other.IsEncrypted ||
                    this.IsEncrypted != null &&
                    this.IsEncrypted.Equals(other.IsEncrypted)
                ) && 
                (
                    this.IsSigned == other.IsSigned ||
                    this.IsSigned != null &&
                    this.IsSigned.Equals(other.IsSigned)
                ) && 
                (
                    this.DocumentProperties == other.DocumentProperties ||
                    this.DocumentProperties != null &&
                    this.DocumentProperties.Equals(other.DocumentProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.SourceFormat != null)
                    hash = hash * 59 + this.SourceFormat.GetHashCode();
                if (this.IsEncrypted != null)
                    hash = hash * 59 + this.IsEncrypted.GetHashCode();
                if (this.IsSigned != null)
                    hash = hash * 59 + this.IsSigned.GetHashCode();
                if (this.DocumentProperties != null)
                    hash = hash * 59 + this.DocumentProperties.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
