/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents all formatting for a table row.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto :  IEquatable<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or sets the rule for determining the height of the table row.
        /// </summary>
        /// <value>Gets or sets the rule for determining the height of the table row.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HeightRuleEnum
        {
            
            /// <summary>
            /// Enum AtLeast for "AtLeast"
            /// </summary>
            [EnumMember(Value = "AtLeast")]
            AtLeast,
            
            /// <summary>
            /// Enum Exactly for "Exactly"
            /// </summary>
            [EnumMember(Value = "Exactly")]
            Exactly,
            
            /// <summary>
            /// Enum Auto for "Auto"
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto
        }

        /// <summary>
        /// Gets or sets the rule for determining the height of the table row.
        /// </summary>
        /// <value>Gets or sets the rule for determining the height of the table row.</value>
        [DataMember(Name="HeightRule", EmitDefaultValue=false)]
        public HeightRuleEnum? HeightRule { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto" /> class.
        /// </summary>
        /// <param name="Height">Gets or sets the height of the table row in points..</param>
        /// <param name="HeightRule">Gets or sets the rule for determining the height of the table row..</param>
        /// <param name="AllowBreakAcrossPages">True if the text in a table row is allowed to split across a page break..</param>
        /// <param name="HeadingFormat">True if the row is repeated as a table heading on every page when the table spans more than one page..</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto(double? Height = default(double?), HeightRuleEnum? HeightRule = default(HeightRuleEnum?), bool? AllowBreakAcrossPages = default(bool?), bool? HeadingFormat = default(bool?), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.Height = Height;
            this.HeightRule = HeightRule;
            this.AllowBreakAcrossPages = AllowBreakAcrossPages;
            this.HeadingFormat = HeadingFormat;
            this.Link = Link;
        }
        
        /// <summary>
        /// Gets or sets the height of the table row in points.
        /// </summary>
        /// <value>Gets or sets the height of the table row in points.</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public double? Height { get; set; }


        /// <summary>
        /// True if the text in a table row is allowed to split across a page break.
        /// </summary>
        /// <value>True if the text in a table row is allowed to split across a page break.</value>
        [DataMember(Name="AllowBreakAcrossPages", EmitDefaultValue=false)]
        public bool? AllowBreakAcrossPages { get; set; }

        /// <summary>
        /// True if the row is repeated as a table heading on every page when the table spans more than one page.
        /// </summary>
        /// <value>True if the row is repeated as a table heading on every page when the table spans more than one page.</value>
        [DataMember(Name="HeadingFormat", EmitDefaultValue=false)]
        public bool? HeadingFormat { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HeightRule: ").Append(HeightRule).Append("\n");
            sb.Append("  AllowBreakAcrossPages: ").Append(AllowBreakAcrossPages).Append("\n");
            sb.Append("  HeadingFormat: ").Append(HeadingFormat).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.HeightRule == other.HeightRule ||
                    this.HeightRule != null &&
                    this.HeightRule.Equals(other.HeightRule)
                ) && 
                (
                    this.AllowBreakAcrossPages == other.AllowBreakAcrossPages ||
                    this.AllowBreakAcrossPages != null &&
                    this.AllowBreakAcrossPages.Equals(other.AllowBreakAcrossPages)
                ) && 
                (
                    this.HeadingFormat == other.HeadingFormat ||
                    this.HeadingFormat != null &&
                    this.HeadingFormat.Equals(other.HeadingFormat)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.HeightRule != null)
                    hash = hash * 59 + this.HeightRule.GetHashCode();
                if (this.AllowBreakAcrossPages != null)
                    hash = hash * 59 + this.AllowBreakAcrossPages.GetHashCode();
                if (this.HeadingFormat != null)
                    hash = hash * 59 + this.HeadingFormat.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
