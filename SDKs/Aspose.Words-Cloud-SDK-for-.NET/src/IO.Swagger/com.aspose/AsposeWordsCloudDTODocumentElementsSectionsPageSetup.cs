/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents the page setup properties of a section.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsSectionsPageSetup :  IEquatable<AsposeWordsCloudDTODocumentElementsSectionsPageSetup>, IValidatableObject
    {
        /// <summary>
        /// Specifies which pages the page border is printed on.
        /// </summary>
        /// <value>Specifies which pages the page border is printed on.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BorderAppliesToEnum
        {
            
            /// <summary>
            /// Enum AllPages for "AllPages"
            /// </summary>
            [EnumMember(Value = "AllPages")]
            AllPages,
            
            /// <summary>
            /// Enum FirstPage for "FirstPage"
            /// </summary>
            [EnumMember(Value = "FirstPage")]
            FirstPage,
            
            /// <summary>
            /// Enum OtherPages for "OtherPages"
            /// </summary>
            [EnumMember(Value = "OtherPages")]
            OtherPages
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from  the text it surrounds.
        /// </summary>
        /// <value>Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from  the text it surrounds.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BorderDistanceFromEnum
        {
            
            /// <summary>
            /// Enum Text for "Text"
            /// </summary>
            [EnumMember(Value = "Text")]
            Text,
            
            /// <summary>
            /// Enum PageEdge for "PageEdge"
            /// </summary>
            [EnumMember(Value = "PageEdge")]
            PageEdge
        }

        /// <summary>
        /// Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new  page or section or runs continuously.
        /// </summary>
        /// <value>Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new  page or section or runs continuously.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LineNumberRestartModeEnum
        {
            
            /// <summary>
            /// Enum RestartPage for "RestartPage"
            /// </summary>
            [EnumMember(Value = "RestartPage")]
            RestartPage,
            
            /// <summary>
            /// Enum RestartSection for "RestartSection"
            /// </summary>
            [EnumMember(Value = "RestartSection")]
            RestartSection,
            
            /// <summary>
            /// Enum Continuous for "Continuous"
            /// </summary>
            [EnumMember(Value = "Continuous")]
            Continuous
        }

        /// <summary>
        /// Returns or sets the orientation of the page.
        /// </summary>
        /// <value>Returns or sets the orientation of the page.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrientationEnum
        {
            
            /// <summary>
            /// Enum Portrait for "Portrait"
            /// </summary>
            [EnumMember(Value = "Portrait")]
            Portrait,
            
            /// <summary>
            /// Enum Landscape for "Landscape"
            /// </summary>
            [EnumMember(Value = "Landscape")]
            Landscape
        }

        /// <summary>
        /// Gets or sets the page number format.
        /// </summary>
        /// <value>Gets or sets the page number format.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PageNumberStyleEnum
        {
            
            /// <summary>
            /// Enum Arabic for "Arabic"
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic,
            
            /// <summary>
            /// Enum UppercaseRoman for "UppercaseRoman"
            /// </summary>
            [EnumMember(Value = "UppercaseRoman")]
            UppercaseRoman,
            
            /// <summary>
            /// Enum LowercaseRoman for "LowercaseRoman"
            /// </summary>
            [EnumMember(Value = "LowercaseRoman")]
            LowercaseRoman,
            
            /// <summary>
            /// Enum UppercaseLetter for "UppercaseLetter"
            /// </summary>
            [EnumMember(Value = "UppercaseLetter")]
            UppercaseLetter,
            
            /// <summary>
            /// Enum LowercaseLetter for "LowercaseLetter"
            /// </summary>
            [EnumMember(Value = "LowercaseLetter")]
            LowercaseLetter,
            
            /// <summary>
            /// Enum Ordinal for "Ordinal"
            /// </summary>
            [EnumMember(Value = "Ordinal")]
            Ordinal,
            
            /// <summary>
            /// Enum Number for "Number"
            /// </summary>
            [EnumMember(Value = "Number")]
            Number,
            
            /// <summary>
            /// Enum OrdinalText for "OrdinalText"
            /// </summary>
            [EnumMember(Value = "OrdinalText")]
            OrdinalText,
            
            /// <summary>
            /// Enum Hex for "Hex"
            /// </summary>
            [EnumMember(Value = "Hex")]
            Hex,
            
            /// <summary>
            /// Enum ChicagoManual for "ChicagoManual"
            /// </summary>
            [EnumMember(Value = "ChicagoManual")]
            ChicagoManual,
            
            /// <summary>
            /// Enum Kanji for "Kanji"
            /// </summary>
            [EnumMember(Value = "Kanji")]
            Kanji,
            
            /// <summary>
            /// Enum KanjiDigit for "KanjiDigit"
            /// </summary>
            [EnumMember(Value = "KanjiDigit")]
            KanjiDigit,
            
            /// <summary>
            /// Enum AiueoHalfWidth for "AiueoHalfWidth"
            /// </summary>
            [EnumMember(Value = "AiueoHalfWidth")]
            AiueoHalfWidth,
            
            /// <summary>
            /// Enum IrohaHalfWidth for "IrohaHalfWidth"
            /// </summary>
            [EnumMember(Value = "IrohaHalfWidth")]
            IrohaHalfWidth,
            
            /// <summary>
            /// Enum ArabicFullWidth for "ArabicFullWidth"
            /// </summary>
            [EnumMember(Value = "ArabicFullWidth")]
            ArabicFullWidth,
            
            /// <summary>
            /// Enum ArabicHalfWidth for "ArabicHalfWidth"
            /// </summary>
            [EnumMember(Value = "ArabicHalfWidth")]
            ArabicHalfWidth,
            
            /// <summary>
            /// Enum KanjiTraditional for "KanjiTraditional"
            /// </summary>
            [EnumMember(Value = "KanjiTraditional")]
            KanjiTraditional,
            
            /// <summary>
            /// Enum KanjiTraditional2 for "KanjiTraditional2"
            /// </summary>
            [EnumMember(Value = "KanjiTraditional2")]
            KanjiTraditional2,
            
            /// <summary>
            /// Enum NumberInCircle for "NumberInCircle"
            /// </summary>
            [EnumMember(Value = "NumberInCircle")]
            NumberInCircle,
            
            /// <summary>
            /// Enum DecimalFullWidth for "DecimalFullWidth"
            /// </summary>
            [EnumMember(Value = "DecimalFullWidth")]
            DecimalFullWidth,
            
            /// <summary>
            /// Enum Aiueo for "Aiueo"
            /// </summary>
            [EnumMember(Value = "Aiueo")]
            Aiueo,
            
            /// <summary>
            /// Enum Iroha for "Iroha"
            /// </summary>
            [EnumMember(Value = "Iroha")]
            Iroha,
            
            /// <summary>
            /// Enum LeadingZero for "LeadingZero"
            /// </summary>
            [EnumMember(Value = "LeadingZero")]
            LeadingZero,
            
            /// <summary>
            /// Enum Bullet for "Bullet"
            /// </summary>
            [EnumMember(Value = "Bullet")]
            Bullet,
            
            /// <summary>
            /// Enum Ganada for "Ganada"
            /// </summary>
            [EnumMember(Value = "Ganada")]
            Ganada,
            
            /// <summary>
            /// Enum Chosung for "Chosung"
            /// </summary>
            [EnumMember(Value = "Chosung")]
            Chosung,
            
            /// <summary>
            /// Enum GB1 for "GB1"
            /// </summary>
            [EnumMember(Value = "GB1")]
            GB1,
            
            /// <summary>
            /// Enum GB2 for "GB2"
            /// </summary>
            [EnumMember(Value = "GB2")]
            GB2,
            
            /// <summary>
            /// Enum GB3 for "GB3"
            /// </summary>
            [EnumMember(Value = "GB3")]
            GB3,
            
            /// <summary>
            /// Enum GB4 for "GB4"
            /// </summary>
            [EnumMember(Value = "GB4")]
            GB4,
            
            /// <summary>
            /// Enum Zodiac1 for "Zodiac1"
            /// </summary>
            [EnumMember(Value = "Zodiac1")]
            Zodiac1,
            
            /// <summary>
            /// Enum Zodiac2 for "Zodiac2"
            /// </summary>
            [EnumMember(Value = "Zodiac2")]
            Zodiac2,
            
            /// <summary>
            /// Enum Zodiac3 for "Zodiac3"
            /// </summary>
            [EnumMember(Value = "Zodiac3")]
            Zodiac3,
            
            /// <summary>
            /// Enum TradChinNum1 for "TradChinNum1"
            /// </summary>
            [EnumMember(Value = "TradChinNum1")]
            TradChinNum1,
            
            /// <summary>
            /// Enum TradChinNum2 for "TradChinNum2"
            /// </summary>
            [EnumMember(Value = "TradChinNum2")]
            TradChinNum2,
            
            /// <summary>
            /// Enum TradChinNum3 for "TradChinNum3"
            /// </summary>
            [EnumMember(Value = "TradChinNum3")]
            TradChinNum3,
            
            /// <summary>
            /// Enum TradChinNum4 for "TradChinNum4"
            /// </summary>
            [EnumMember(Value = "TradChinNum4")]
            TradChinNum4,
            
            /// <summary>
            /// Enum SimpChinNum1 for "SimpChinNum1"
            /// </summary>
            [EnumMember(Value = "SimpChinNum1")]
            SimpChinNum1,
            
            /// <summary>
            /// Enum SimpChinNum2 for "SimpChinNum2"
            /// </summary>
            [EnumMember(Value = "SimpChinNum2")]
            SimpChinNum2,
            
            /// <summary>
            /// Enum SimpChinNum3 for "SimpChinNum3"
            /// </summary>
            [EnumMember(Value = "SimpChinNum3")]
            SimpChinNum3,
            
            /// <summary>
            /// Enum SimpChinNum4 for "SimpChinNum4"
            /// </summary>
            [EnumMember(Value = "SimpChinNum4")]
            SimpChinNum4,
            
            /// <summary>
            /// Enum HanjaRead for "HanjaRead"
            /// </summary>
            [EnumMember(Value = "HanjaRead")]
            HanjaRead,
            
            /// <summary>
            /// Enum HanjaReadDigit for "HanjaReadDigit"
            /// </summary>
            [EnumMember(Value = "HanjaReadDigit")]
            HanjaReadDigit,
            
            /// <summary>
            /// Enum Hangul for "Hangul"
            /// </summary>
            [EnumMember(Value = "Hangul")]
            Hangul,
            
            /// <summary>
            /// Enum Hanja for "Hanja"
            /// </summary>
            [EnumMember(Value = "Hanja")]
            Hanja,
            
            /// <summary>
            /// Enum Hebrew1 for "Hebrew1"
            /// </summary>
            [EnumMember(Value = "Hebrew1")]
            Hebrew1,
            
            /// <summary>
            /// Enum Arabic1 for "Arabic1"
            /// </summary>
            [EnumMember(Value = "Arabic1")]
            Arabic1,
            
            /// <summary>
            /// Enum Hebrew2 for "Hebrew2"
            /// </summary>
            [EnumMember(Value = "Hebrew2")]
            Hebrew2,
            
            /// <summary>
            /// Enum Arabic2 for "Arabic2"
            /// </summary>
            [EnumMember(Value = "Arabic2")]
            Arabic2,
            
            /// <summary>
            /// Enum HindiLetter1 for "HindiLetter1"
            /// </summary>
            [EnumMember(Value = "HindiLetter1")]
            HindiLetter1,
            
            /// <summary>
            /// Enum HindiLetter2 for "HindiLetter2"
            /// </summary>
            [EnumMember(Value = "HindiLetter2")]
            HindiLetter2,
            
            /// <summary>
            /// Enum HindiArabic for "HindiArabic"
            /// </summary>
            [EnumMember(Value = "HindiArabic")]
            HindiArabic,
            
            /// <summary>
            /// Enum HindiCardinalText for "HindiCardinalText"
            /// </summary>
            [EnumMember(Value = "HindiCardinalText")]
            HindiCardinalText,
            
            /// <summary>
            /// Enum ThaiLetter for "ThaiLetter"
            /// </summary>
            [EnumMember(Value = "ThaiLetter")]
            ThaiLetter,
            
            /// <summary>
            /// Enum ThaiArabic for "ThaiArabic"
            /// </summary>
            [EnumMember(Value = "ThaiArabic")]
            ThaiArabic,
            
            /// <summary>
            /// Enum ThaiCardinalText for "ThaiCardinalText"
            /// </summary>
            [EnumMember(Value = "ThaiCardinalText")]
            ThaiCardinalText,
            
            /// <summary>
            /// Enum VietCardinalText for "VietCardinalText"
            /// </summary>
            [EnumMember(Value = "VietCardinalText")]
            VietCardinalText,
            
            /// <summary>
            /// Enum NumberInDash for "NumberInDash"
            /// </summary>
            [EnumMember(Value = "NumberInDash")]
            NumberInDash,
            
            /// <summary>
            /// Enum NumInDash for "NumInDash"
            /// </summary>
            [EnumMember(Value = "NumInDash")]
            NumInDash,
            
            /// <summary>
            /// Enum LowercaseRussian for "LowercaseRussian"
            /// </summary>
            [EnumMember(Value = "LowercaseRussian")]
            LowercaseRussian,
            
            /// <summary>
            /// Enum UppercaseRussian for "UppercaseRussian"
            /// </summary>
            [EnumMember(Value = "UppercaseRussian")]
            UppercaseRussian,
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Custom for "Custom"
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom
        }

        /// <summary>
        /// Returns or sets the paper size.
        /// </summary>
        /// <value>Returns or sets the paper size.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaperSizeEnum
        {
            
            /// <summary>
            /// Enum A3 for "A3"
            /// </summary>
            [EnumMember(Value = "A3")]
            A3,
            
            /// <summary>
            /// Enum A4 for "A4"
            /// </summary>
            [EnumMember(Value = "A4")]
            A4,
            
            /// <summary>
            /// Enum A5 for "A5"
            /// </summary>
            [EnumMember(Value = "A5")]
            A5,
            
            /// <summary>
            /// Enum B4 for "B4"
            /// </summary>
            [EnumMember(Value = "B4")]
            B4,
            
            /// <summary>
            /// Enum B5 for "B5"
            /// </summary>
            [EnumMember(Value = "B5")]
            B5,
            
            /// <summary>
            /// Enum Executive for "Executive"
            /// </summary>
            [EnumMember(Value = "Executive")]
            Executive,
            
            /// <summary>
            /// Enum Folio for "Folio"
            /// </summary>
            [EnumMember(Value = "Folio")]
            Folio,
            
            /// <summary>
            /// Enum Ledger for "Ledger"
            /// </summary>
            [EnumMember(Value = "Ledger")]
            Ledger,
            
            /// <summary>
            /// Enum Legal for "Legal"
            /// </summary>
            [EnumMember(Value = "Legal")]
            Legal,
            
            /// <summary>
            /// Enum Letter for "Letter"
            /// </summary>
            [EnumMember(Value = "Letter")]
            Letter,
            
            /// <summary>
            /// Enum EnvelopeDL for "EnvelopeDL"
            /// </summary>
            [EnumMember(Value = "EnvelopeDL")]
            EnvelopeDL,
            
            /// <summary>
            /// Enum Quarto for "Quarto"
            /// </summary>
            [EnumMember(Value = "Quarto")]
            Quarto,
            
            /// <summary>
            /// Enum Statement for "Statement"
            /// </summary>
            [EnumMember(Value = "Statement")]
            Statement,
            
            /// <summary>
            /// Enum Tabloid for "Tabloid"
            /// </summary>
            [EnumMember(Value = "Tabloid")]
            Tabloid,
            
            /// <summary>
            /// Enum Paper10x14 for "Paper10x14"
            /// </summary>
            [EnumMember(Value = "Paper10x14")]
            Paper10x14,
            
            /// <summary>
            /// Enum Paper11x17 for "Paper11x17"
            /// </summary>
            [EnumMember(Value = "Paper11x17")]
            Paper11x17,
            
            /// <summary>
            /// Enum Custom for "Custom"
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom
        }

        /// <summary>
        /// Returns or sets the type of section break for the specified object.
        /// </summary>
        /// <value>Returns or sets the type of section break for the specified object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SectionStartEnum
        {
            
            /// <summary>
            /// Enum Continuous for "Continuous"
            /// </summary>
            [EnumMember(Value = "Continuous")]
            Continuous,
            
            /// <summary>
            /// Enum NewColumn for "NewColumn"
            /// </summary>
            [EnumMember(Value = "NewColumn")]
            NewColumn,
            
            /// <summary>
            /// Enum NewPage for "NewPage"
            /// </summary>
            [EnumMember(Value = "NewPage")]
            NewPage,
            
            /// <summary>
            /// Enum EvenPage for "EvenPage"
            /// </summary>
            [EnumMember(Value = "EvenPage")]
            EvenPage,
            
            /// <summary>
            /// Enum OddPage for "OddPage"
            /// </summary>
            [EnumMember(Value = "OddPage")]
            OddPage
        }

        /// <summary>
        /// Returns or sets the vertical alignment of text on each page in a document or section.
        /// </summary>
        /// <value>Returns or sets the vertical alignment of text on each page in a document or section.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerticalAlignmentEnum
        {
            
            /// <summary>
            /// Enum Bottom for "Bottom"
            /// </summary>
            [EnumMember(Value = "Bottom")]
            Bottom,
            
            /// <summary>
            /// Enum Center for "Center"
            /// </summary>
            [EnumMember(Value = "Center")]
            Center,
            
            /// <summary>
            /// Enum Justify for "Justify"
            /// </summary>
            [EnumMember(Value = "Justify")]
            Justify,
            
            /// <summary>
            /// Enum Top for "Top"
            /// </summary>
            [EnumMember(Value = "Top")]
            Top
        }

        /// <summary>
        /// Specifies which pages the page border is printed on.
        /// </summary>
        /// <value>Specifies which pages the page border is printed on.</value>
        [DataMember(Name="BorderAppliesTo", EmitDefaultValue=false)]
        public BorderAppliesToEnum? BorderAppliesTo { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from  the text it surrounds.
        /// </summary>
        /// <value>Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from  the text it surrounds.</value>
        [DataMember(Name="BorderDistanceFrom", EmitDefaultValue=false)]
        public BorderDistanceFromEnum? BorderDistanceFrom { get; set; }
        /// <summary>
        /// Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new  page or section or runs continuously.
        /// </summary>
        /// <value>Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new  page or section or runs continuously.</value>
        [DataMember(Name="LineNumberRestartMode", EmitDefaultValue=false)]
        public LineNumberRestartModeEnum? LineNumberRestartMode { get; set; }
        /// <summary>
        /// Returns or sets the orientation of the page.
        /// </summary>
        /// <value>Returns or sets the orientation of the page.</value>
        [DataMember(Name="Orientation", EmitDefaultValue=false)]
        public OrientationEnum? Orientation { get; set; }
        /// <summary>
        /// Gets or sets the page number format.
        /// </summary>
        /// <value>Gets or sets the page number format.</value>
        [DataMember(Name="PageNumberStyle", EmitDefaultValue=false)]
        public PageNumberStyleEnum? PageNumberStyle { get; set; }
        /// <summary>
        /// Returns or sets the paper size.
        /// </summary>
        /// <value>Returns or sets the paper size.</value>
        [DataMember(Name="PaperSize", EmitDefaultValue=false)]
        public PaperSizeEnum? PaperSize { get; set; }
        /// <summary>
        /// Returns or sets the type of section break for the specified object.
        /// </summary>
        /// <value>Returns or sets the type of section break for the specified object.</value>
        [DataMember(Name="SectionStart", EmitDefaultValue=false)]
        public SectionStartEnum? SectionStart { get; set; }
        /// <summary>
        /// Returns or sets the vertical alignment of text on each page in a document or section.
        /// </summary>
        /// <value>Returns or sets the vertical alignment of text on each page in a document or section.</value>
        [DataMember(Name="VerticalAlignment", EmitDefaultValue=false)]
        public VerticalAlignmentEnum? VerticalAlignment { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsSectionsPageSetup" /> class.
        /// </summary>
        /// <param name="Bidi">Specifies that this section contains bidirectional (complex scripts) text..</param>
        /// <param name="BorderAlwaysInFront">Specifies where the page border is positioned relative to intersecting texts and objects..</param>
        /// <param name="BorderAppliesTo">Specifies which pages the page border is printed on..</param>
        /// <param name="BorderDistanceFrom">Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from  the text it surrounds..</param>
        /// <param name="BottomMargin">Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body  text..</param>
        /// <param name="DifferentFirstPageHeaderFooter">&lt;b&gt;True&lt;/b&gt; if a different header or footer is used on the first page..</param>
        /// <param name="FirstPageTray">Gets or sets the paper tray (bin) to use for the first page of a section.  The value is implementation (printer) specific..</param>
        /// <param name="FooterDistance">Returns or sets the distance (in points) between the footer and the bottom of the page..</param>
        /// <param name="Gutter">Gets or sets the amount of extra space added to the margin for document binding..</param>
        /// <param name="HeaderDistance">Returns or sets the distance (in points) between the header and the top of the page..</param>
        /// <param name="LeftMargin">Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text..</param>
        /// <param name="LineNumberCountBy">Returns or sets the numeric increment for line numbers..</param>
        /// <param name="LineNumberDistanceFromText">Gets or sets distance between the right edge of line numbers and the left edge of the document..</param>
        /// <param name="LineNumberRestartMode">Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new  page or section or runs continuously..</param>
        /// <param name="LineStartingNumber">Gets or sets the starting line number..</param>
        /// <param name="Orientation">Returns or sets the orientation of the page..</param>
        /// <param name="OtherPagesTray">Gets or sets the paper tray (bin) to be used for all but the first page of a section.  The value is implementation (printer) specific..</param>
        /// <param name="PageHeight">Returns or sets the height of the page in points..</param>
        /// <param name="PageNumberStyle">Gets or sets the page number format..</param>
        /// <param name="PageStartingNumber">Gets or sets the starting page number of the section..</param>
        /// <param name="PageWidth">Returns or sets the width of the page in points..</param>
        /// <param name="PaperSize">Returns or sets the paper size..</param>
        /// <param name="RestartPageNumbering">&lt;b&gt;True&lt;/b&gt; if page numbering restarts at the beginning of the section..</param>
        /// <param name="RightMargin">Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body  text..</param>
        /// <param name="RtlGutter">Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a  left-to-right language..</param>
        /// <param name="SectionStart">Returns or sets the type of section break for the specified object..</param>
        /// <param name="SuppressEndnotes">&lt;b&gt;True&lt;/b&gt; if endnotes are printed at the end of the next section that doesn&#39;t suppress endnotes.                  Suppressed endnotes are printed before the endnotes in that section..</param>
        /// <param name="TopMargin">Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text..</param>
        /// <param name="VerticalAlignment">Returns or sets the vertical alignment of text on each page in a document or section..</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsSectionsPageSetup(bool? Bidi = default(bool?), bool? BorderAlwaysInFront = default(bool?), BorderAppliesToEnum? BorderAppliesTo = default(BorderAppliesToEnum?), BorderDistanceFromEnum? BorderDistanceFrom = default(BorderDistanceFromEnum?), double? BottomMargin = default(double?), bool? DifferentFirstPageHeaderFooter = default(bool?), int? FirstPageTray = default(int?), double? FooterDistance = default(double?), double? Gutter = default(double?), double? HeaderDistance = default(double?), double? LeftMargin = default(double?), int? LineNumberCountBy = default(int?), double? LineNumberDistanceFromText = default(double?), LineNumberRestartModeEnum? LineNumberRestartMode = default(LineNumberRestartModeEnum?), int? LineStartingNumber = default(int?), OrientationEnum? Orientation = default(OrientationEnum?), int? OtherPagesTray = default(int?), double? PageHeight = default(double?), PageNumberStyleEnum? PageNumberStyle = default(PageNumberStyleEnum?), int? PageStartingNumber = default(int?), double? PageWidth = default(double?), PaperSizeEnum? PaperSize = default(PaperSizeEnum?), bool? RestartPageNumbering = default(bool?), double? RightMargin = default(double?), bool? RtlGutter = default(bool?), SectionStartEnum? SectionStart = default(SectionStartEnum?), bool? SuppressEndnotes = default(bool?), double? TopMargin = default(double?), VerticalAlignmentEnum? VerticalAlignment = default(VerticalAlignmentEnum?), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.Bidi = Bidi;
            this.BorderAlwaysInFront = BorderAlwaysInFront;
            this.BorderAppliesTo = BorderAppliesTo;
            this.BorderDistanceFrom = BorderDistanceFrom;
            this.BottomMargin = BottomMargin;
            this.DifferentFirstPageHeaderFooter = DifferentFirstPageHeaderFooter;
            this.FirstPageTray = FirstPageTray;
            this.FooterDistance = FooterDistance;
            this.Gutter = Gutter;
            this.HeaderDistance = HeaderDistance;
            this.LeftMargin = LeftMargin;
            this.LineNumberCountBy = LineNumberCountBy;
            this.LineNumberDistanceFromText = LineNumberDistanceFromText;
            this.LineNumberRestartMode = LineNumberRestartMode;
            this.LineStartingNumber = LineStartingNumber;
            this.Orientation = Orientation;
            this.OtherPagesTray = OtherPagesTray;
            this.PageHeight = PageHeight;
            this.PageNumberStyle = PageNumberStyle;
            this.PageStartingNumber = PageStartingNumber;
            this.PageWidth = PageWidth;
            this.PaperSize = PaperSize;
            this.RestartPageNumbering = RestartPageNumbering;
            this.RightMargin = RightMargin;
            this.RtlGutter = RtlGutter;
            this.SectionStart = SectionStart;
            this.SuppressEndnotes = SuppressEndnotes;
            this.TopMargin = TopMargin;
            this.VerticalAlignment = VerticalAlignment;
            this.Link = Link;
        }
        
        /// <summary>
        /// Specifies that this section contains bidirectional (complex scripts) text.
        /// </summary>
        /// <value>Specifies that this section contains bidirectional (complex scripts) text.</value>
        [DataMember(Name="Bidi", EmitDefaultValue=false)]
        public bool? Bidi { get; set; }

        /// <summary>
        /// Specifies where the page border is positioned relative to intersecting texts and objects.
        /// </summary>
        /// <value>Specifies where the page border is positioned relative to intersecting texts and objects.</value>
        [DataMember(Name="BorderAlwaysInFront", EmitDefaultValue=false)]
        public bool? BorderAlwaysInFront { get; set; }



        /// <summary>
        /// Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body  text.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body  text.</value>
        [DataMember(Name="BottomMargin", EmitDefaultValue=false)]
        public double? BottomMargin { get; set; }

        /// <summary>
        /// &lt;b&gt;True&lt;/b&gt; if a different header or footer is used on the first page.
        /// </summary>
        /// <value>&lt;b&gt;True&lt;/b&gt; if a different header or footer is used on the first page.</value>
        [DataMember(Name="DifferentFirstPageHeaderFooter", EmitDefaultValue=false)]
        public bool? DifferentFirstPageHeaderFooter { get; set; }

        /// <summary>
        /// Gets or sets the paper tray (bin) to use for the first page of a section.  The value is implementation (printer) specific.
        /// </summary>
        /// <value>Gets or sets the paper tray (bin) to use for the first page of a section.  The value is implementation (printer) specific.</value>
        [DataMember(Name="FirstPageTray", EmitDefaultValue=false)]
        public int? FirstPageTray { get; set; }

        /// <summary>
        /// Returns or sets the distance (in points) between the footer and the bottom of the page.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the footer and the bottom of the page.</value>
        [DataMember(Name="FooterDistance", EmitDefaultValue=false)]
        public double? FooterDistance { get; set; }

        /// <summary>
        /// Gets or sets the amount of extra space added to the margin for document binding.
        /// </summary>
        /// <value>Gets or sets the amount of extra space added to the margin for document binding.</value>
        [DataMember(Name="Gutter", EmitDefaultValue=false)]
        public double? Gutter { get; set; }

        /// <summary>
        /// Returns or sets the distance (in points) between the header and the top of the page.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the header and the top of the page.</value>
        [DataMember(Name="HeaderDistance", EmitDefaultValue=false)]
        public double? HeaderDistance { get; set; }

        /// <summary>
        /// Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.</value>
        [DataMember(Name="LeftMargin", EmitDefaultValue=false)]
        public double? LeftMargin { get; set; }

        /// <summary>
        /// Returns or sets the numeric increment for line numbers.
        /// </summary>
        /// <value>Returns or sets the numeric increment for line numbers.</value>
        [DataMember(Name="LineNumberCountBy", EmitDefaultValue=false)]
        public int? LineNumberCountBy { get; set; }

        /// <summary>
        /// Gets or sets distance between the right edge of line numbers and the left edge of the document.
        /// </summary>
        /// <value>Gets or sets distance between the right edge of line numbers and the left edge of the document.</value>
        [DataMember(Name="LineNumberDistanceFromText", EmitDefaultValue=false)]
        public double? LineNumberDistanceFromText { get; set; }


        /// <summary>
        /// Gets or sets the starting line number.
        /// </summary>
        /// <value>Gets or sets the starting line number.</value>
        [DataMember(Name="LineStartingNumber", EmitDefaultValue=false)]
        public int? LineStartingNumber { get; set; }


        /// <summary>
        /// Gets or sets the paper tray (bin) to be used for all but the first page of a section.  The value is implementation (printer) specific.
        /// </summary>
        /// <value>Gets or sets the paper tray (bin) to be used for all but the first page of a section.  The value is implementation (printer) specific.</value>
        [DataMember(Name="OtherPagesTray", EmitDefaultValue=false)]
        public int? OtherPagesTray { get; set; }

        /// <summary>
        /// Returns or sets the height of the page in points.
        /// </summary>
        /// <value>Returns or sets the height of the page in points.</value>
        [DataMember(Name="PageHeight", EmitDefaultValue=false)]
        public double? PageHeight { get; set; }


        /// <summary>
        /// Gets or sets the starting page number of the section.
        /// </summary>
        /// <value>Gets or sets the starting page number of the section.</value>
        [DataMember(Name="PageStartingNumber", EmitDefaultValue=false)]
        public int? PageStartingNumber { get; set; }

        /// <summary>
        /// Returns or sets the width of the page in points.
        /// </summary>
        /// <value>Returns or sets the width of the page in points.</value>
        [DataMember(Name="PageWidth", EmitDefaultValue=false)]
        public double? PageWidth { get; set; }


        /// <summary>
        /// &lt;b&gt;True&lt;/b&gt; if page numbering restarts at the beginning of the section.
        /// </summary>
        /// <value>&lt;b&gt;True&lt;/b&gt; if page numbering restarts at the beginning of the section.</value>
        [DataMember(Name="RestartPageNumbering", EmitDefaultValue=false)]
        public bool? RestartPageNumbering { get; set; }

        /// <summary>
        /// Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body  text.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body  text.</value>
        [DataMember(Name="RightMargin", EmitDefaultValue=false)]
        public double? RightMargin { get; set; }

        /// <summary>
        /// Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a  left-to-right language.
        /// </summary>
        /// <value>Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a  left-to-right language.</value>
        [DataMember(Name="RtlGutter", EmitDefaultValue=false)]
        public bool? RtlGutter { get; set; }


        /// <summary>
        /// &lt;b&gt;True&lt;/b&gt; if endnotes are printed at the end of the next section that doesn&#39;t suppress endnotes.                  Suppressed endnotes are printed before the endnotes in that section.
        /// </summary>
        /// <value>&lt;b&gt;True&lt;/b&gt; if endnotes are printed at the end of the next section that doesn&#39;t suppress endnotes.                  Suppressed endnotes are printed before the endnotes in that section.</value>
        [DataMember(Name="SuppressEndnotes", EmitDefaultValue=false)]
        public bool? SuppressEndnotes { get; set; }

        /// <summary>
        /// Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.
        /// </summary>
        /// <value>Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.</value>
        [DataMember(Name="TopMargin", EmitDefaultValue=false)]
        public double? TopMargin { get; set; }


        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsSectionsPageSetup {\n");
            sb.Append("  Bidi: ").Append(Bidi).Append("\n");
            sb.Append("  BorderAlwaysInFront: ").Append(BorderAlwaysInFront).Append("\n");
            sb.Append("  BorderAppliesTo: ").Append(BorderAppliesTo).Append("\n");
            sb.Append("  BorderDistanceFrom: ").Append(BorderDistanceFrom).Append("\n");
            sb.Append("  BottomMargin: ").Append(BottomMargin).Append("\n");
            sb.Append("  DifferentFirstPageHeaderFooter: ").Append(DifferentFirstPageHeaderFooter).Append("\n");
            sb.Append("  FirstPageTray: ").Append(FirstPageTray).Append("\n");
            sb.Append("  FooterDistance: ").Append(FooterDistance).Append("\n");
            sb.Append("  Gutter: ").Append(Gutter).Append("\n");
            sb.Append("  HeaderDistance: ").Append(HeaderDistance).Append("\n");
            sb.Append("  LeftMargin: ").Append(LeftMargin).Append("\n");
            sb.Append("  LineNumberCountBy: ").Append(LineNumberCountBy).Append("\n");
            sb.Append("  LineNumberDistanceFromText: ").Append(LineNumberDistanceFromText).Append("\n");
            sb.Append("  LineNumberRestartMode: ").Append(LineNumberRestartMode).Append("\n");
            sb.Append("  LineStartingNumber: ").Append(LineStartingNumber).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  OtherPagesTray: ").Append(OtherPagesTray).Append("\n");
            sb.Append("  PageHeight: ").Append(PageHeight).Append("\n");
            sb.Append("  PageNumberStyle: ").Append(PageNumberStyle).Append("\n");
            sb.Append("  PageStartingNumber: ").Append(PageStartingNumber).Append("\n");
            sb.Append("  PageWidth: ").Append(PageWidth).Append("\n");
            sb.Append("  PaperSize: ").Append(PaperSize).Append("\n");
            sb.Append("  RestartPageNumbering: ").Append(RestartPageNumbering).Append("\n");
            sb.Append("  RightMargin: ").Append(RightMargin).Append("\n");
            sb.Append("  RtlGutter: ").Append(RtlGutter).Append("\n");
            sb.Append("  SectionStart: ").Append(SectionStart).Append("\n");
            sb.Append("  SuppressEndnotes: ").Append(SuppressEndnotes).Append("\n");
            sb.Append("  TopMargin: ").Append(TopMargin).Append("\n");
            sb.Append("  VerticalAlignment: ").Append(VerticalAlignment).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsSectionsPageSetup);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsSectionsPageSetup instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsSectionsPageSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsSectionsPageSetup other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Bidi == other.Bidi ||
                    this.Bidi != null &&
                    this.Bidi.Equals(other.Bidi)
                ) && 
                (
                    this.BorderAlwaysInFront == other.BorderAlwaysInFront ||
                    this.BorderAlwaysInFront != null &&
                    this.BorderAlwaysInFront.Equals(other.BorderAlwaysInFront)
                ) && 
                (
                    this.BorderAppliesTo == other.BorderAppliesTo ||
                    this.BorderAppliesTo != null &&
                    this.BorderAppliesTo.Equals(other.BorderAppliesTo)
                ) && 
                (
                    this.BorderDistanceFrom == other.BorderDistanceFrom ||
                    this.BorderDistanceFrom != null &&
                    this.BorderDistanceFrom.Equals(other.BorderDistanceFrom)
                ) && 
                (
                    this.BottomMargin == other.BottomMargin ||
                    this.BottomMargin != null &&
                    this.BottomMargin.Equals(other.BottomMargin)
                ) && 
                (
                    this.DifferentFirstPageHeaderFooter == other.DifferentFirstPageHeaderFooter ||
                    this.DifferentFirstPageHeaderFooter != null &&
                    this.DifferentFirstPageHeaderFooter.Equals(other.DifferentFirstPageHeaderFooter)
                ) && 
                (
                    this.FirstPageTray == other.FirstPageTray ||
                    this.FirstPageTray != null &&
                    this.FirstPageTray.Equals(other.FirstPageTray)
                ) && 
                (
                    this.FooterDistance == other.FooterDistance ||
                    this.FooterDistance != null &&
                    this.FooterDistance.Equals(other.FooterDistance)
                ) && 
                (
                    this.Gutter == other.Gutter ||
                    this.Gutter != null &&
                    this.Gutter.Equals(other.Gutter)
                ) && 
                (
                    this.HeaderDistance == other.HeaderDistance ||
                    this.HeaderDistance != null &&
                    this.HeaderDistance.Equals(other.HeaderDistance)
                ) && 
                (
                    this.LeftMargin == other.LeftMargin ||
                    this.LeftMargin != null &&
                    this.LeftMargin.Equals(other.LeftMargin)
                ) && 
                (
                    this.LineNumberCountBy == other.LineNumberCountBy ||
                    this.LineNumberCountBy != null &&
                    this.LineNumberCountBy.Equals(other.LineNumberCountBy)
                ) && 
                (
                    this.LineNumberDistanceFromText == other.LineNumberDistanceFromText ||
                    this.LineNumberDistanceFromText != null &&
                    this.LineNumberDistanceFromText.Equals(other.LineNumberDistanceFromText)
                ) && 
                (
                    this.LineNumberRestartMode == other.LineNumberRestartMode ||
                    this.LineNumberRestartMode != null &&
                    this.LineNumberRestartMode.Equals(other.LineNumberRestartMode)
                ) && 
                (
                    this.LineStartingNumber == other.LineStartingNumber ||
                    this.LineStartingNumber != null &&
                    this.LineStartingNumber.Equals(other.LineStartingNumber)
                ) && 
                (
                    this.Orientation == other.Orientation ||
                    this.Orientation != null &&
                    this.Orientation.Equals(other.Orientation)
                ) && 
                (
                    this.OtherPagesTray == other.OtherPagesTray ||
                    this.OtherPagesTray != null &&
                    this.OtherPagesTray.Equals(other.OtherPagesTray)
                ) && 
                (
                    this.PageHeight == other.PageHeight ||
                    this.PageHeight != null &&
                    this.PageHeight.Equals(other.PageHeight)
                ) && 
                (
                    this.PageNumberStyle == other.PageNumberStyle ||
                    this.PageNumberStyle != null &&
                    this.PageNumberStyle.Equals(other.PageNumberStyle)
                ) && 
                (
                    this.PageStartingNumber == other.PageStartingNumber ||
                    this.PageStartingNumber != null &&
                    this.PageStartingNumber.Equals(other.PageStartingNumber)
                ) && 
                (
                    this.PageWidth == other.PageWidth ||
                    this.PageWidth != null &&
                    this.PageWidth.Equals(other.PageWidth)
                ) && 
                (
                    this.PaperSize == other.PaperSize ||
                    this.PaperSize != null &&
                    this.PaperSize.Equals(other.PaperSize)
                ) && 
                (
                    this.RestartPageNumbering == other.RestartPageNumbering ||
                    this.RestartPageNumbering != null &&
                    this.RestartPageNumbering.Equals(other.RestartPageNumbering)
                ) && 
                (
                    this.RightMargin == other.RightMargin ||
                    this.RightMargin != null &&
                    this.RightMargin.Equals(other.RightMargin)
                ) && 
                (
                    this.RtlGutter == other.RtlGutter ||
                    this.RtlGutter != null &&
                    this.RtlGutter.Equals(other.RtlGutter)
                ) && 
                (
                    this.SectionStart == other.SectionStart ||
                    this.SectionStart != null &&
                    this.SectionStart.Equals(other.SectionStart)
                ) && 
                (
                    this.SuppressEndnotes == other.SuppressEndnotes ||
                    this.SuppressEndnotes != null &&
                    this.SuppressEndnotes.Equals(other.SuppressEndnotes)
                ) && 
                (
                    this.TopMargin == other.TopMargin ||
                    this.TopMargin != null &&
                    this.TopMargin.Equals(other.TopMargin)
                ) && 
                (
                    this.VerticalAlignment == other.VerticalAlignment ||
                    this.VerticalAlignment != null &&
                    this.VerticalAlignment.Equals(other.VerticalAlignment)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Bidi != null)
                    hash = hash * 59 + this.Bidi.GetHashCode();
                if (this.BorderAlwaysInFront != null)
                    hash = hash * 59 + this.BorderAlwaysInFront.GetHashCode();
                if (this.BorderAppliesTo != null)
                    hash = hash * 59 + this.BorderAppliesTo.GetHashCode();
                if (this.BorderDistanceFrom != null)
                    hash = hash * 59 + this.BorderDistanceFrom.GetHashCode();
                if (this.BottomMargin != null)
                    hash = hash * 59 + this.BottomMargin.GetHashCode();
                if (this.DifferentFirstPageHeaderFooter != null)
                    hash = hash * 59 + this.DifferentFirstPageHeaderFooter.GetHashCode();
                if (this.FirstPageTray != null)
                    hash = hash * 59 + this.FirstPageTray.GetHashCode();
                if (this.FooterDistance != null)
                    hash = hash * 59 + this.FooterDistance.GetHashCode();
                if (this.Gutter != null)
                    hash = hash * 59 + this.Gutter.GetHashCode();
                if (this.HeaderDistance != null)
                    hash = hash * 59 + this.HeaderDistance.GetHashCode();
                if (this.LeftMargin != null)
                    hash = hash * 59 + this.LeftMargin.GetHashCode();
                if (this.LineNumberCountBy != null)
                    hash = hash * 59 + this.LineNumberCountBy.GetHashCode();
                if (this.LineNumberDistanceFromText != null)
                    hash = hash * 59 + this.LineNumberDistanceFromText.GetHashCode();
                if (this.LineNumberRestartMode != null)
                    hash = hash * 59 + this.LineNumberRestartMode.GetHashCode();
                if (this.LineStartingNumber != null)
                    hash = hash * 59 + this.LineStartingNumber.GetHashCode();
                if (this.Orientation != null)
                    hash = hash * 59 + this.Orientation.GetHashCode();
                if (this.OtherPagesTray != null)
                    hash = hash * 59 + this.OtherPagesTray.GetHashCode();
                if (this.PageHeight != null)
                    hash = hash * 59 + this.PageHeight.GetHashCode();
                if (this.PageNumberStyle != null)
                    hash = hash * 59 + this.PageNumberStyle.GetHashCode();
                if (this.PageStartingNumber != null)
                    hash = hash * 59 + this.PageStartingNumber.GetHashCode();
                if (this.PageWidth != null)
                    hash = hash * 59 + this.PageWidth.GetHashCode();
                if (this.PaperSize != null)
                    hash = hash * 59 + this.PaperSize.GetHashCode();
                if (this.RestartPageNumbering != null)
                    hash = hash * 59 + this.RestartPageNumbering.GetHashCode();
                if (this.RightMargin != null)
                    hash = hash * 59 + this.RightMargin.GetHashCode();
                if (this.RtlGutter != null)
                    hash = hash * 59 + this.RtlGutter.GetHashCode();
                if (this.SectionStart != null)
                    hash = hash * 59 + this.SectionStart.GetHashCode();
                if (this.SuppressEndnotes != null)
                    hash = hash * 59 + this.SuppressEndnotes.GetHashCode();
                if (this.TopMargin != null)
                    hash = hash * 59 + this.TopMargin.GetHashCode();
                if (this.VerticalAlignment != null)
                    hash = hash * 59 + this.VerticalAlignment.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
