/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// base container class for save options data
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingSaveOptionsData :  IEquatable<AsposeWordsCloudDTOSavingSaveOptionsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingSaveOptionsData" /> class.
        /// </summary>
        /// <param name="ColorMode">Gets or sets a value determining how colors are rendered.  { Normal | Grayscale}.</param>
        /// <param name="SaveFormat">format of save.</param>
        /// <param name="FileName">name of destination file.</param>
        /// <param name="DmlRenderingMode">Gets or sets a value determining how DrawingML shapes are rendered.  { Fallback | DrawingML }.</param>
        /// <param name="DmlEffectsRenderingMode">Gets or sets a value determining how DrawingML effects are rendered.  { Simplified | None | Fine }.</param>
        /// <param name="ZipOutput">Controls zip output or not.  Default value is false..</param>
        /// <param name="UpdateSdtContent">Gets or sets value determining whether content of {Aspose.Words.Markup.StructuredDocumentTag} is updated before saving..</param>
        /// <param name="UpdateFields">Gets or sets a value determining if fields should be updated before saving the document to a fixed page format.  Default value for this property is &lt;b&gt;true&lt;/b&gt;.</param>
        public AsposeWordsCloudDTOSavingSaveOptionsData(string ColorMode = default(string), string SaveFormat = default(string), string FileName = default(string), string DmlRenderingMode = default(string), string DmlEffectsRenderingMode = default(string), bool? ZipOutput = default(bool?), bool? UpdateSdtContent = default(bool?), bool? UpdateFields = default(bool?))
        {
            this.ColorMode = ColorMode;
            this.SaveFormat = SaveFormat;
            this.FileName = FileName;
            this.DmlRenderingMode = DmlRenderingMode;
            this.DmlEffectsRenderingMode = DmlEffectsRenderingMode;
            this.ZipOutput = ZipOutput;
            this.UpdateSdtContent = UpdateSdtContent;
            this.UpdateFields = UpdateFields;
        }
        
        /// <summary>
        /// Gets or sets a value determining how colors are rendered.  { Normal | Grayscale}
        /// </summary>
        /// <value>Gets or sets a value determining how colors are rendered.  { Normal | Grayscale}</value>
        [DataMember(Name="ColorMode", EmitDefaultValue=false)]
        public string ColorMode { get; set; }

        /// <summary>
        /// format of save
        /// </summary>
        /// <value>format of save</value>
        [DataMember(Name="SaveFormat", EmitDefaultValue=false)]
        public string SaveFormat { get; set; }

        /// <summary>
        /// name of destination file
        /// </summary>
        /// <value>name of destination file</value>
        [DataMember(Name="FileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets a value determining how DrawingML shapes are rendered.  { Fallback | DrawingML }
        /// </summary>
        /// <value>Gets or sets a value determining how DrawingML shapes are rendered.  { Fallback | DrawingML }</value>
        [DataMember(Name="DmlRenderingMode", EmitDefaultValue=false)]
        public string DmlRenderingMode { get; set; }

        /// <summary>
        /// Gets or sets a value determining how DrawingML effects are rendered.  { Simplified | None | Fine }
        /// </summary>
        /// <value>Gets or sets a value determining how DrawingML effects are rendered.  { Simplified | None | Fine }</value>
        [DataMember(Name="DmlEffectsRenderingMode", EmitDefaultValue=false)]
        public string DmlEffectsRenderingMode { get; set; }

        /// <summary>
        /// Controls zip output or not.  Default value is false.
        /// </summary>
        /// <value>Controls zip output or not.  Default value is false.</value>
        [DataMember(Name="ZipOutput", EmitDefaultValue=false)]
        public bool? ZipOutput { get; set; }

        /// <summary>
        /// Gets or sets value determining whether content of {Aspose.Words.Markup.StructuredDocumentTag} is updated before saving.
        /// </summary>
        /// <value>Gets or sets value determining whether content of {Aspose.Words.Markup.StructuredDocumentTag} is updated before saving.</value>
        [DataMember(Name="UpdateSdtContent", EmitDefaultValue=false)]
        public bool? UpdateSdtContent { get; set; }

        /// <summary>
        /// Gets or sets a value determining if fields should be updated before saving the document to a fixed page format.  Default value for this property is &lt;b&gt;true&lt;/b&gt;
        /// </summary>
        /// <value>Gets or sets a value determining if fields should be updated before saving the document to a fixed page format.  Default value for this property is &lt;b&gt;true&lt;/b&gt;</value>
        [DataMember(Name="UpdateFields", EmitDefaultValue=false)]
        public bool? UpdateFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingSaveOptionsData {\n");
            sb.Append("  ColorMode: ").Append(ColorMode).Append("\n");
            sb.Append("  SaveFormat: ").Append(SaveFormat).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  DmlRenderingMode: ").Append(DmlRenderingMode).Append("\n");
            sb.Append("  DmlEffectsRenderingMode: ").Append(DmlEffectsRenderingMode).Append("\n");
            sb.Append("  ZipOutput: ").Append(ZipOutput).Append("\n");
            sb.Append("  UpdateSdtContent: ").Append(UpdateSdtContent).Append("\n");
            sb.Append("  UpdateFields: ").Append(UpdateFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingSaveOptionsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingSaveOptionsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingSaveOptionsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingSaveOptionsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ColorMode == other.ColorMode ||
                    this.ColorMode != null &&
                    this.ColorMode.Equals(other.ColorMode)
                ) && 
                (
                    this.SaveFormat == other.SaveFormat ||
                    this.SaveFormat != null &&
                    this.SaveFormat.Equals(other.SaveFormat)
                ) && 
                (
                    this.FileName == other.FileName ||
                    this.FileName != null &&
                    this.FileName.Equals(other.FileName)
                ) && 
                (
                    this.DmlRenderingMode == other.DmlRenderingMode ||
                    this.DmlRenderingMode != null &&
                    this.DmlRenderingMode.Equals(other.DmlRenderingMode)
                ) && 
                (
                    this.DmlEffectsRenderingMode == other.DmlEffectsRenderingMode ||
                    this.DmlEffectsRenderingMode != null &&
                    this.DmlEffectsRenderingMode.Equals(other.DmlEffectsRenderingMode)
                ) && 
                (
                    this.ZipOutput == other.ZipOutput ||
                    this.ZipOutput != null &&
                    this.ZipOutput.Equals(other.ZipOutput)
                ) && 
                (
                    this.UpdateSdtContent == other.UpdateSdtContent ||
                    this.UpdateSdtContent != null &&
                    this.UpdateSdtContent.Equals(other.UpdateSdtContent)
                ) && 
                (
                    this.UpdateFields == other.UpdateFields ||
                    this.UpdateFields != null &&
                    this.UpdateFields.Equals(other.UpdateFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ColorMode != null)
                    hash = hash * 59 + this.ColorMode.GetHashCode();
                if (this.SaveFormat != null)
                    hash = hash * 59 + this.SaveFormat.GetHashCode();
                if (this.FileName != null)
                    hash = hash * 59 + this.FileName.GetHashCode();
                if (this.DmlRenderingMode != null)
                    hash = hash * 59 + this.DmlRenderingMode.GetHashCode();
                if (this.DmlEffectsRenderingMode != null)
                    hash = hash * 59 + this.DmlEffectsRenderingMode.GetHashCode();
                if (this.ZipOutput != null)
                    hash = hash * 59 + this.ZipOutput.GetHashCode();
                if (this.UpdateSdtContent != null)
                    hash = hash * 59 + this.UpdateSdtContent.GetHashCode();
                if (this.UpdateFields != null)
                    hash = hash * 59 + this.UpdateFields.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
