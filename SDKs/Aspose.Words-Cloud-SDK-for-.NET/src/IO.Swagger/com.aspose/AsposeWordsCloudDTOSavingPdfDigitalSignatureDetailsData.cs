/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// container class for details of digital signature
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData :  IEquatable<AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData" /> class.
        /// </summary>
        /// <param name="CertificateFilename">certificate&#39;s filename using for signing.</param>
        /// <param name="HashAlgorithm">hash algorithm.</param>
        /// <param name="Location">location of the signing.</param>
        /// <param name="Reason">reason for the signing.</param>
        /// <param name="SignatureDate">date of the signing.</param>
        public AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData(string CertificateFilename = default(string), string HashAlgorithm = default(string), string Location = default(string), string Reason = default(string), DateTime? SignatureDate = default(DateTime?))
        {
            this.CertificateFilename = CertificateFilename;
            this.HashAlgorithm = HashAlgorithm;
            this.Location = Location;
            this.Reason = Reason;
            this.SignatureDate = SignatureDate;
        }
        
        /// <summary>
        /// certificate&#39;s filename using for signing
        /// </summary>
        /// <value>certificate&#39;s filename using for signing</value>
        [DataMember(Name="CertificateFilename", EmitDefaultValue=false)]
        public string CertificateFilename { get; set; }

        /// <summary>
        /// hash algorithm
        /// </summary>
        /// <value>hash algorithm</value>
        [DataMember(Name="HashAlgorithm", EmitDefaultValue=false)]
        public string HashAlgorithm { get; set; }

        /// <summary>
        /// location of the signing
        /// </summary>
        /// <value>location of the signing</value>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// reason for the signing
        /// </summary>
        /// <value>reason for the signing</value>
        [DataMember(Name="Reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// date of the signing
        /// </summary>
        /// <value>date of the signing</value>
        [DataMember(Name="SignatureDate", EmitDefaultValue=false)]
        public DateTime? SignatureDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData {\n");
            sb.Append("  CertificateFilename: ").Append(CertificateFilename).Append("\n");
            sb.Append("  HashAlgorithm: ").Append(HashAlgorithm).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SignatureDate: ").Append(SignatureDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTOSavingPdfDigitalSignatureDetailsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CertificateFilename == other.CertificateFilename ||
                    this.CertificateFilename != null &&
                    this.CertificateFilename.Equals(other.CertificateFilename)
                ) && 
                (
                    this.HashAlgorithm == other.HashAlgorithm ||
                    this.HashAlgorithm != null &&
                    this.HashAlgorithm.Equals(other.HashAlgorithm)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.SignatureDate == other.SignatureDate ||
                    this.SignatureDate != null &&
                    this.SignatureDate.Equals(other.SignatureDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CertificateFilename != null)
                    hash = hash * 59 + this.CertificateFilename.GetHashCode();
                if (this.HashAlgorithm != null)
                    hash = hash * 59 + this.HashAlgorithm.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.SignatureDate != null)
                    hash = hash * 59 + this.SignatureDate.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
