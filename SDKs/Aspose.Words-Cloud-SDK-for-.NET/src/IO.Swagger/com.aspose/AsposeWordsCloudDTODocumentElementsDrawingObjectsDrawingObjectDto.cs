/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.com.aspose
{
    /// <summary>
    /// Represents Drawing Object DTO.
    /// </summary>
    [DataContract]
    public partial class AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto :  IEquatable<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto>, IValidatableObject
    {
        /// <summary>
        /// Specifies where the distance to the image is measured from.
        /// </summary>
        /// <value>Specifies where the distance to the image is measured from.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelativeHorizontalPositionEnum
        {
            
            /// <summary>
            /// Enum Margin for "Margin"
            /// </summary>
            [EnumMember(Value = "Margin")]
            Margin,
            
            /// <summary>
            /// Enum Page for "Page"
            /// </summary>
            [EnumMember(Value = "Page")]
            Page,
            
            /// <summary>
            /// Enum Column for "Column"
            /// </summary>
            [EnumMember(Value = "Column")]
            Column,
            
            /// <summary>
            /// Enum Character for "Character"
            /// </summary>
            [EnumMember(Value = "Character")]
            Character,
            
            /// <summary>
            /// Enum LeftMargin for "LeftMargin"
            /// </summary>
            [EnumMember(Value = "LeftMargin")]
            LeftMargin,
            
            /// <summary>
            /// Enum RightMargin for "RightMargin"
            /// </summary>
            [EnumMember(Value = "RightMargin")]
            RightMargin,
            
            /// <summary>
            /// Enum InsideMargin for "InsideMargin"
            /// </summary>
            [EnumMember(Value = "InsideMargin")]
            InsideMargin,
            
            /// <summary>
            /// Enum OutsideMargin for "OutsideMargin"
            /// </summary>
            [EnumMember(Value = "OutsideMargin")]
            OutsideMargin,
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default
        }

        /// <summary>
        /// Specifies where the distance to the image measured from.
        /// </summary>
        /// <value>Specifies where the distance to the image measured from.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelativeVerticalPositionEnum
        {
            
            /// <summary>
            /// Enum Margin for "Margin"
            /// </summary>
            [EnumMember(Value = "Margin")]
            Margin,
            
            /// <summary>
            /// Enum Page for "Page"
            /// </summary>
            [EnumMember(Value = "Page")]
            Page,
            
            /// <summary>
            /// Enum Paragraph for "Paragraph"
            /// </summary>
            [EnumMember(Value = "Paragraph")]
            Paragraph,
            
            /// <summary>
            /// Enum Line for "Line"
            /// </summary>
            [EnumMember(Value = "Line")]
            Line,
            
            /// <summary>
            /// Enum TopMargin for "TopMargin"
            /// </summary>
            [EnumMember(Value = "TopMargin")]
            TopMargin,
            
            /// <summary>
            /// Enum BottomMargin for "BottomMargin"
            /// </summary>
            [EnumMember(Value = "BottomMargin")]
            BottomMargin,
            
            /// <summary>
            /// Enum InsideMargin for "InsideMargin"
            /// </summary>
            [EnumMember(Value = "InsideMargin")]
            InsideMargin,
            
            /// <summary>
            /// Enum OutsideMargin for "OutsideMargin"
            /// </summary>
            [EnumMember(Value = "OutsideMargin")]
            OutsideMargin,
            
            /// <summary>
            /// Enum TableDefault for "TableDefault"
            /// </summary>
            [EnumMember(Value = "TableDefault")]
            TableDefault,
            
            /// <summary>
            /// Enum TextFrameDefault for "TextFrameDefault"
            /// </summary>
            [EnumMember(Value = "TextFrameDefault")]
            TextFrameDefault
        }

        /// <summary>
        /// Specifies how to wrap text around the image.
        /// </summary>
        /// <value>Specifies how to wrap text around the image.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WrapTypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Inline for "Inline"
            /// </summary>
            [EnumMember(Value = "Inline")]
            Inline,
            
            /// <summary>
            /// Enum TopBottom for "TopBottom"
            /// </summary>
            [EnumMember(Value = "TopBottom")]
            TopBottom,
            
            /// <summary>
            /// Enum Square for "Square"
            /// </summary>
            [EnumMember(Value = "Square")]
            Square,
            
            /// <summary>
            /// Enum Tight for "Tight"
            /// </summary>
            [EnumMember(Value = "Tight")]
            Tight,
            
            /// <summary>
            /// Enum Through for "Through"
            /// </summary>
            [EnumMember(Value = "Through")]
            Through
        }

        /// <summary>
        /// Specifies where the distance to the image is measured from.
        /// </summary>
        /// <value>Specifies where the distance to the image is measured from.</value>
        [DataMember(Name="RelativeHorizontalPosition", EmitDefaultValue=false)]
        public RelativeHorizontalPositionEnum? RelativeHorizontalPosition { get; set; }
        /// <summary>
        /// Specifies where the distance to the image measured from.
        /// </summary>
        /// <value>Specifies where the distance to the image measured from.</value>
        [DataMember(Name="RelativeVerticalPosition", EmitDefaultValue=false)]
        public RelativeVerticalPositionEnum? RelativeVerticalPosition { get; set; }
        /// <summary>
        /// Specifies how to wrap text around the image.
        /// </summary>
        /// <value>Specifies how to wrap text around the image.</value>
        [DataMember(Name="WrapType", EmitDefaultValue=false)]
        public WrapTypeEnum? WrapType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto" /> class.
        /// </summary>
        /// <param name="RenderLinks">A list of links that originate from this {Aspose.Words.Cloud.DTO.DocumentElements.DrawingObjects.DrawingObjectDto}..</param>
        /// <param name="Width">Width of the drawing objects in points..</param>
        /// <param name="Height">Height of the drawing object in points..</param>
        /// <param name="OleDataLink">Link to ole object. Can be null if shape does not have ole data..</param>
        /// <param name="ImageDataLink">Link to image data. Can be null if shape does not have an image..</param>
        /// <param name="RelativeHorizontalPosition">Specifies where the distance to the image is measured from..</param>
        /// <param name="Left">Distance in points from the origin to the left side of the image..</param>
        /// <param name="RelativeVerticalPosition">Specifies where the distance to the image measured from..</param>
        /// <param name="Top">Distance in points from the origin to the top side of the image..</param>
        /// <param name="WrapType">Specifies how to wrap text around the image..</param>
        /// <param name="NodeId">Node id.</param>
        /// <param name="Link">Link to the document..</param>
        public AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto(List<AsposeWordsCloudDTOCommonWordsApiLink> RenderLinks = default(List<AsposeWordsCloudDTOCommonWordsApiLink>), double? Width = default(double?), double? Height = default(double?), AsposeWordsCloudDTOCommonWordsApiLink OleDataLink = default(AsposeWordsCloudDTOCommonWordsApiLink), AsposeWordsCloudDTOCommonWordsApiLink ImageDataLink = default(AsposeWordsCloudDTOCommonWordsApiLink), RelativeHorizontalPositionEnum? RelativeHorizontalPosition = default(RelativeHorizontalPositionEnum?), double? Left = default(double?), RelativeVerticalPositionEnum? RelativeVerticalPosition = default(RelativeVerticalPositionEnum?), double? Top = default(double?), WrapTypeEnum? WrapType = default(WrapTypeEnum?), string NodeId = default(string), AsposeWordsCloudDTOCommonWordsApiLink Link = default(AsposeWordsCloudDTOCommonWordsApiLink))
        {
            this.RenderLinks = RenderLinks;
            this.Width = Width;
            this.Height = Height;
            this.OleDataLink = OleDataLink;
            this.ImageDataLink = ImageDataLink;
            this.RelativeHorizontalPosition = RelativeHorizontalPosition;
            this.Left = Left;
            this.RelativeVerticalPosition = RelativeVerticalPosition;
            this.Top = Top;
            this.WrapType = WrapType;
            this.NodeId = NodeId;
            this.Link = Link;
        }
        
        /// <summary>
        /// A list of links that originate from this {Aspose.Words.Cloud.DTO.DocumentElements.DrawingObjects.DrawingObjectDto}.
        /// </summary>
        /// <value>A list of links that originate from this {Aspose.Words.Cloud.DTO.DocumentElements.DrawingObjects.DrawingObjectDto}.</value>
        [DataMember(Name="RenderLinks", EmitDefaultValue=false)]
        public List<AsposeWordsCloudDTOCommonWordsApiLink> RenderLinks { get; set; }

        /// <summary>
        /// Width of the drawing objects in points.
        /// </summary>
        /// <value>Width of the drawing objects in points.</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// Height of the drawing object in points.
        /// </summary>
        /// <value>Height of the drawing object in points.</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// Link to ole object. Can be null if shape does not have ole data.
        /// </summary>
        /// <value>Link to ole object. Can be null if shape does not have ole data.</value>
        [DataMember(Name="OleDataLink", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink OleDataLink { get; set; }

        /// <summary>
        /// Link to image data. Can be null if shape does not have an image.
        /// </summary>
        /// <value>Link to image data. Can be null if shape does not have an image.</value>
        [DataMember(Name="ImageDataLink", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink ImageDataLink { get; set; }


        /// <summary>
        /// Distance in points from the origin to the left side of the image.
        /// </summary>
        /// <value>Distance in points from the origin to the left side of the image.</value>
        [DataMember(Name="Left", EmitDefaultValue=false)]
        public double? Left { get; set; }


        /// <summary>
        /// Distance in points from the origin to the top side of the image.
        /// </summary>
        /// <value>Distance in points from the origin to the top side of the image.</value>
        [DataMember(Name="Top", EmitDefaultValue=false)]
        public double? Top { get; set; }


        /// <summary>
        /// Node id
        /// </summary>
        /// <value>Node id</value>
        [DataMember(Name="NodeId", EmitDefaultValue=false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Link to the document.
        /// </summary>
        /// <value>Link to the document.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public AsposeWordsCloudDTOCommonWordsApiLink Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto {\n");
            sb.Append("  RenderLinks: ").Append(RenderLinks).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  OleDataLink: ").Append(OleDataLink).Append("\n");
            sb.Append("  ImageDataLink: ").Append(ImageDataLink).Append("\n");
            sb.Append("  RelativeHorizontalPosition: ").Append(RelativeHorizontalPosition).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  RelativeVerticalPosition: ").Append(RelativeVerticalPosition).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  WrapType: ").Append(WrapType).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto);
        }

        /// <summary>
        /// Returns true if AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto instances are equal
        /// </summary>
        /// <param name="other">Instance of AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectDto other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RenderLinks == other.RenderLinks ||
                    this.RenderLinks != null &&
                    this.RenderLinks.SequenceEqual(other.RenderLinks)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                ) && 
                (
                    this.OleDataLink == other.OleDataLink ||
                    this.OleDataLink != null &&
                    this.OleDataLink.Equals(other.OleDataLink)
                ) && 
                (
                    this.ImageDataLink == other.ImageDataLink ||
                    this.ImageDataLink != null &&
                    this.ImageDataLink.Equals(other.ImageDataLink)
                ) && 
                (
                    this.RelativeHorizontalPosition == other.RelativeHorizontalPosition ||
                    this.RelativeHorizontalPosition != null &&
                    this.RelativeHorizontalPosition.Equals(other.RelativeHorizontalPosition)
                ) && 
                (
                    this.Left == other.Left ||
                    this.Left != null &&
                    this.Left.Equals(other.Left)
                ) && 
                (
                    this.RelativeVerticalPosition == other.RelativeVerticalPosition ||
                    this.RelativeVerticalPosition != null &&
                    this.RelativeVerticalPosition.Equals(other.RelativeVerticalPosition)
                ) && 
                (
                    this.Top == other.Top ||
                    this.Top != null &&
                    this.Top.Equals(other.Top)
                ) && 
                (
                    this.WrapType == other.WrapType ||
                    this.WrapType != null &&
                    this.WrapType.Equals(other.WrapType)
                ) && 
                (
                    this.NodeId == other.NodeId ||
                    this.NodeId != null &&
                    this.NodeId.Equals(other.NodeId)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RenderLinks != null)
                    hash = hash * 59 + this.RenderLinks.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                if (this.OleDataLink != null)
                    hash = hash * 59 + this.OleDataLink.GetHashCode();
                if (this.ImageDataLink != null)
                    hash = hash * 59 + this.ImageDataLink.GetHashCode();
                if (this.RelativeHorizontalPosition != null)
                    hash = hash * 59 + this.RelativeHorizontalPosition.GetHashCode();
                if (this.Left != null)
                    hash = hash * 59 + this.Left.GetHashCode();
                if (this.RelativeVerticalPosition != null)
                    hash = hash * 59 + this.RelativeVerticalPosition.GetHashCode();
                if (this.Top != null)
                    hash = hash * 59 + this.Top.GetHashCode();
                if (this.WrapType != null)
                    hash = hash * 59 + this.WrapType.GetHashCode();
                if (this.NodeId != null)
                    hash = hash * 59 + this.NodeId.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
