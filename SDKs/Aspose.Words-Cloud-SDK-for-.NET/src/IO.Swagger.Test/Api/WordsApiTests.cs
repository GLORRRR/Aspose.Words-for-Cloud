/* 
 * Aspose Words for Cloud Web API
 *
 * Version of Aspose.Words: 17.9.0.0 <br/>                                                      Version of Aspose.Words.Cloud: 17.8.0.0 <br/>                                                      Build number: 1
 *
 * OpenAPI spec version: v1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.com.aspose;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WordsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WordsApiTests
    {
        private WordsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WordsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WordsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WordsApi
            //Assert.IsInstanceOfType(typeof(WordsApi), instance, "instance is a WordsApi");
        }

        
        /// <summary>
        /// Test AcceptAllRevisions
        /// </summary>
        [Test]
        public void AcceptAllRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.AcceptAllRevisions(version, name, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTORevisionsModificationResponse> (response, "response is AsposeWordsCloudDTORevisionsModificationResponse");
        }
        
        /// <summary>
        /// Test DeleteBorder
        /// </summary>
        [Test]
        public void DeleteBorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteBorder(version, name, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommonBorderResponse");
        }
        
        /// <summary>
        /// Test DeleteBorders
        /// </summary>
        [Test]
        public void DeleteBordersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteBorders(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommonBordersResponse");
        }
        
        /// <summary>
        /// Test DeleteComment
        /// </summary>
        [Test]
        public void DeleteCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? commentIndex = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteComment(version, name, commentIndex, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteDocumentMacros
        /// </summary>
        [Test]
        public void DeleteDocumentMacrosTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteDocumentMacros(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteDocumentProperty
        /// </summary>
        [Test]
        public void DeleteDocumentPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string propertyName = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteDocumentProperty(version, name, propertyName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteDocumentWatermark
        /// </summary>
        [Test]
        public void DeleteDocumentWatermarkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteDocumentWatermark(version, name, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test DeleteDrawingObject
        /// </summary>
        [Test]
        public void DeleteDrawingObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteDrawingObject(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteField
        /// </summary>
        [Test]
        public void DeleteFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteField(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteFields
        /// </summary>
        [Test]
        public void DeleteFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteFields(version, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteFootnote
        /// </summary>
        [Test]
        public void DeleteFootnoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteFootnote(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteFormField
        /// </summary>
        [Test]
        public void DeleteFormFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteFormField(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteHeaderFooter
        /// </summary>
        [Test]
        public void DeleteHeaderFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string sectionPath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteHeaderFooter(version, name, index, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteHeadersFooters
        /// </summary>
        [Test]
        public void DeleteHeadersFootersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string sectionPath = null;
            //string headersFootersTypes = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteHeadersFooters(version, name, sectionPath, headersFootersTypes, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteOfficeMathObject
        /// </summary>
        [Test]
        public void DeleteOfficeMathObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteOfficeMathObject(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteParagraph
        /// </summary>
        [Test]
        public void DeleteParagraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteParagraph(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteRun
        /// </summary>
        [Test]
        public void DeleteRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string paragraphPath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteRun(version, name, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteTable
        /// </summary>
        [Test]
        public void DeleteTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteTable(version, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteTableCell
        /// </summary>
        [Test]
        public void DeleteTableCellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tableRowPath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteTableCell(version, name, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteTableRow
        /// </summary>
        [Test]
        public void DeleteTableRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tablePath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.DeleteTableRow(version, name, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test DeleteUnprotectDocument
        /// </summary>
        [Test]
        public void DeleteUnprotectDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOProtectionRequest protectionRequest = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.DeleteUnprotectDocument(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOProtectionDataResponse> (response, "response is AsposeWordsCloudDTOProtectionDataResponse");
        }
        
        /// <summary>
        /// Test GetBorder
        /// </summary>
        [Test]
        public void GetBorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetBorder(version, name, nodePath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommonBorderResponse");
        }
        
        /// <summary>
        /// Test GetBorders
        /// </summary>
        [Test]
        public void GetBordersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetBorders(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommonBordersResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommonBordersResponse");
        }
        
        /// <summary>
        /// Test GetComment
        /// </summary>
        [Test]
        public void GetCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? commentIndex = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetComment(version, name, commentIndex, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommentsCommentResponse");
        }
        
        /// <summary>
        /// Test GetComments
        /// </summary>
        [Test]
        public void GetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetComments(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommentsCommentsResponse");
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string documentName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocument(version, documentName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test GetDocumentBookmarkByName
        /// </summary>
        [Test]
        public void GetDocumentBookmarkByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string bookmarkName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentBookmarkByName(version, name, bookmarkName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> (response, "response is AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse");
        }
        
        /// <summary>
        /// Test GetDocumentBookmarks
        /// </summary>
        [Test]
        public void GetDocumentBookmarksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentBookmarks(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse> (response, "response is AsposeWordsCloudDTODocumentElementsBookmarksBookmarksResponse");
        }
        
        /// <summary>
        /// Test GetDocumentDrawingObjectByIndex
        /// </summary>
        [Test]
        public void GetDocumentDrawingObjectByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentDrawingObjectByIndex(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> (response, "response is AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse");
        }
        
        /// <summary>
        /// Test GetDocumentDrawingObjectImageData
        /// </summary>
        [Test]
        public void GetDocumentDrawingObjectImageDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentDrawingObjectImageData(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDocumentDrawingObjectOleData
        /// </summary>
        [Test]
        public void GetDocumentDrawingObjectOleDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentDrawingObjectOleData(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDocumentDrawingObjects
        /// </summary>
        [Test]
        public void GetDocumentDrawingObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentDrawingObjects(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectsResponse");
        }
        
        /// <summary>
        /// Test GetDocumentFieldNames
        /// </summary>
        [Test]
        public void GetDocumentFieldNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //bool? useNonMergeFields = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentFieldNames(version, name, useNonMergeFields, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOFieldNamesResponse> (response, "response is AsposeWordsCloudDTOFieldNamesResponse");
        }
        
        /// <summary>
        /// Test GetDocumentHyperlinkByIndex
        /// </summary>
        [Test]
        public void GetDocumentHyperlinkByIndexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? hyperlinkIndex = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentHyperlinkByIndex(version, name, hyperlinkIndex, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinkResponse");
        }
        
        /// <summary>
        /// Test GetDocumentHyperlinks
        /// </summary>
        [Test]
        public void GetDocumentHyperlinksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentHyperlinks(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHyperlinksHyperlinksResponse");
        }
        
        /// <summary>
        /// Test GetDocumentParagraph
        /// </summary>
        [Test]
        public void GetDocumentParagraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentParagraph(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> (response, "response is AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse");
        }
        
        /// <summary>
        /// Test GetDocumentParagraphRun
        /// </summary>
        [Test]
        public void GetDocumentParagraphRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string paragraphPath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentParagraphRun(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsRunsRunResponse> (response, "response is AsposeWordsCloudDTODocumentElementsRunsRunResponse");
        }
        
        /// <summary>
        /// Test GetDocumentParagraphRunFont
        /// </summary>
        [Test]
        public void GetDocumentParagraphRunFontTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string paragraphPath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentParagraphRunFont(version, name, paragraphPath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFontElementFontResponse");
        }
        
        /// <summary>
        /// Test GetDocumentParagraphRuns
        /// </summary>
        [Test]
        public void GetDocumentParagraphRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string paragraphPath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentParagraphRuns(version, name, paragraphPath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsRunsRunsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsRunsRunsResponse");
        }
        
        /// <summary>
        /// Test GetDocumentParagraphs
        /// </summary>
        [Test]
        public void GetDocumentParagraphsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentParagraphs(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse> (response, "response is AsposeWordsCloudDTODocumentElementsParagraphsParagraphLinkCollectionResponse");
        }
        
        /// <summary>
        /// Test GetDocumentProperties
        /// </summary>
        [Test]
        public void GetDocumentPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentProperties(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentPropertiesResponse> (response, "response is AsposeWordsCloudDTODocumentPropertiesResponse");
        }
        
        /// <summary>
        /// Test GetDocumentProperty
        /// </summary>
        [Test]
        public void GetDocumentPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string propertyName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentProperty(version, name, propertyName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentPropertyResponse> (response, "response is AsposeWordsCloudDTODocumentPropertyResponse");
        }
        
        /// <summary>
        /// Test GetDocumentProtection
        /// </summary>
        [Test]
        public void GetDocumentProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentProtection(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOProtectionDataResponse> (response, "response is AsposeWordsCloudDTOProtectionDataResponse");
        }
        
        /// <summary>
        /// Test GetDocumentStatistics
        /// </summary>
        [Test]
        public void GetDocumentStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //bool? includeComments = null;
            //bool? includeFootnotes = null;
            //bool? includeTextInShapes = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentStatistics(version, name, includeComments, includeFootnotes, includeTextInShapes, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOStatDataResponse> (response, "response is AsposeWordsCloudDTOStatDataResponse");
        }
        
        /// <summary>
        /// Test GetDocumentTextItems
        /// </summary>
        [Test]
        public void GetDocumentTextItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetDocumentTextItems(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOTextItemsResponse> (response, "response is AsposeWordsCloudDTOTextItemsResponse");
        }
        
        /// <summary>
        /// Test GetDocumentWithFormat
        /// </summary>
        [Test]
        public void GetDocumentWithFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //string outPath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.GetDocumentWithFormat(version, name, format, outPath, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetField
        /// </summary>
        [Test]
        public void GetFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetField(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFieldsFieldResponse");
        }
        
        /// <summary>
        /// Test GetFields
        /// </summary>
        [Test]
        public void GetFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetFields(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFieldsFieldsResponse");
        }
        
        /// <summary>
        /// Test GetFootnote
        /// </summary>
        [Test]
        public void GetFootnoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetFootnote(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse");
        }
        
        /// <summary>
        /// Test GetFootnotes
        /// </summary>
        [Test]
        public void GetFootnotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetFootnotes(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFootnotesFootnotesResponse");
        }
        
        /// <summary>
        /// Test GetFormField
        /// </summary>
        [Test]
        public void GetFormFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetFormField(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse");
        }
        
        /// <summary>
        /// Test GetFormFields
        /// </summary>
        [Test]
        public void GetFormFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetFormFields(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldsResponse");
        }
        
        /// <summary>
        /// Test GetHeaderFooter
        /// </summary>
        [Test]
        public void GetHeaderFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? headerFooterIndex = null;
            //int? sectionIndex = null;
            //string filterByType = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetHeaderFooter(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse");
        }
        
        /// <summary>
        /// Test GetHeaderFooter_0
        /// </summary>
        [Test]
        public void GetHeaderFooter_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? headerFooterIndex = null;
            //int? sectionIndex = null;
            //string filterByType = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetHeaderFooter_0(version, name, headerFooterIndex, sectionIndex, filterByType, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse");
        }
        
        /// <summary>
        /// Test GetHeaderFooters
        /// </summary>
        [Test]
        public void GetHeaderFootersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string sectionPath = null;
            //string filterByType = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetHeaderFooters(version, name, sectionPath, filterByType, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFootersResponse");
        }
        
        /// <summary>
        /// Test GetOfficeMathObject
        /// </summary>
        [Test]
        public void GetOfficeMathObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetOfficeMathObject(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse> (response, "response is AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectResponse");
        }
        
        /// <summary>
        /// Test GetOfficeMathObjects
        /// </summary>
        [Test]
        public void GetOfficeMathObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetOfficeMathObjects(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse> (response, "response is AsposeWordsCloudDTODocumentElementsOficeMathObjectsOfficeMathObjectsResponse");
        }
        
        /// <summary>
        /// Test GetSection
        /// </summary>
        [Test]
        public void GetSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? sectionIndex = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetSection(version, name, sectionIndex, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsSectionsSectionResponse> (response, "response is AsposeWordsCloudDTODocumentElementsSectionsSectionResponse");
        }
        
        /// <summary>
        /// Test GetSectionPageSetup
        /// </summary>
        [Test]
        public void GetSectionPageSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? sectionIndex = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetSectionPageSetup(version, name, sectionIndex, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> (response, "response is AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse");
        }
        
        /// <summary>
        /// Test GetSections
        /// </summary>
        [Test]
        public void GetSectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetSections(version, name, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse> (response, "response is AsposeWordsCloudDTODocumentElementsSectionsSectionLinkCollectionResponse");
        }
        
        /// <summary>
        /// Test GetTable
        /// </summary>
        [Test]
        public void GetTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTable(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableResponse");
        }
        
        /// <summary>
        /// Test GetTableCell
        /// </summary>
        [Test]
        public void GetTableCellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tableRowPath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTableCell(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableCellResponse");
        }
        
        /// <summary>
        /// Test GetTableCellFormat
        /// </summary>
        [Test]
        public void GetTableCellFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tableRowPath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTableCellFormat(version, name, tableRowPath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse");
        }
        
        /// <summary>
        /// Test GetTableProperties
        /// </summary>
        [Test]
        public void GetTablePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTableProperties(version, name, index, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse");
        }
        
        /// <summary>
        /// Test GetTableRow
        /// </summary>
        [Test]
        public void GetTableRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tablePath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTableRow(version, name, tablePath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableRowResponse");
        }
        
        /// <summary>
        /// Test GetTableRowFormat
        /// </summary>
        [Test]
        public void GetTableRowFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string tablePath = null;
            //int? index = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTableRowFormat(version, name, tablePath, index, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse");
        }
        
        /// <summary>
        /// Test GetTables
        /// </summary>
        [Test]
        public void GetTablesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.GetTables(version, name, nodePath, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableLinkCollectionResponse");
        }
        
        /// <summary>
        /// Test InsertTable
        /// </summary>
        [Test]
        public void InsertTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTableInsertDto table = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.InsertTable(version, name, table, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableResponse");
        }
        
        /// <summary>
        /// Test InsertTableCell
        /// </summary>
        [Test]
        public void InsertTableCellTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTableCellInsertDto cell = null;
            //string tableRowPath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.InsertTableCell(version, name, cell, tableRowPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableCellResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableCellResponse");
        }
        
        /// <summary>
        /// Test InsertTableRow
        /// </summary>
        [Test]
        public void InsertTableRowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTableRowInsertDto row = null;
            //string tablePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.InsertTableRow(version, name, row, tablePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableRowResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableRowResponse");
        }
        
        /// <summary>
        /// Test PostAppendDocument
        /// </summary>
        [Test]
        public void PostAppendDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentEntryList documentList = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostAppendDocument(version, name, documentList, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostChangeDocumentProtection
        /// </summary>
        [Test]
        public void PostChangeDocumentProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOProtectionRequest protectionRequest = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PostChangeDocumentProtection(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOProtectionDataResponse> (response, "response is AsposeWordsCloudDTOProtectionDataResponse");
        }
        
        /// <summary>
        /// Test PostComment
        /// </summary>
        [Test]
        public void PostCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? commentIndex = null;
            //AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostComment(version, name, commentIndex, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommentsCommentResponse");
        }
        
        /// <summary>
        /// Test PostCompareDocument
        /// </summary>
        [Test]
        public void PostCompareDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOCompareCompareData compareData = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PostCompareDocument(version, name, compareData, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostDocumentExecuteMailMerge
        /// </summary>
        [Test]
        public void PostDocumentExecuteMailMergeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //bool? withRegions = null;
            //string data = null;
            //string mailMergeDataFile = null;
            //string cleanup = null;
            //bool? useWholeParagraphAsRegion = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PostDocumentExecuteMailMerge(version, name, withRegions, data, mailMergeDataFile, cleanup, useWholeParagraphAsRegion, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostDocumentParagraphRunFont
        /// </summary>
        [Test]
        public void PostDocumentParagraphRunFontTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFontElementFont fontDto = null;
            //string paragraphPath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostDocumentParagraphRunFont(version, name, fontDto, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFontElementFontResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFontElementFontResponse");
        }
        
        /// <summary>
        /// Test PostDocumentSaveAs
        /// </summary>
        [Test]
        public void PostDocumentSaveAsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOSavingSaveOptionsData saveOptionsData = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.PostDocumentSaveAs(version, name, saveOptionsData, destFileName, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOSaveResponse> (response, "response is AsposeWordsCloudDTOSaveResponse");
        }
        
        /// <summary>
        /// Test PostDrawingObject
        /// </summary>
        [Test]
        public void PostDrawingObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string drawingObject = null;
            //System.IO.Stream imageFile = null;
            //string name = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostDrawingObject(version, drawingObject, imageFile, name, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> (response, "response is AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse");
        }
        
        /// <summary>
        /// Test PostExecuteTemplate
        /// </summary>
        [Test]
        public void PostExecuteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string data = null;
            //string name = null;
            //string cleanup = null;
            //bool? useWholeParagraphAsRegion = null;
            //bool? withRegions = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PostExecuteTemplate(version, data, name, cleanup, useWholeParagraphAsRegion, withRegions, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostField
        /// </summary>
        [Test]
        public void PostFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFieldsFieldDto field = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostField(version, name, field, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFieldsFieldResponse");
        }
        
        /// <summary>
        /// Test PostFootnote
        /// </summary>
        [Test]
        public void PostFootnoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostFootnote(version, name, footnoteDto, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse");
        }
        
        /// <summary>
        /// Test PostFormField
        /// </summary>
        [Test]
        public void PostFormFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostFormField(version, name, formField, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse");
        }
        
        /// <summary>
        /// Test PostInsertDocumentWatermarkImage
        /// </summary>
        [Test]
        public void PostInsertDocumentWatermarkImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //System.IO.Stream imageFile = null;
            //double? rotationAngle = null;
            //string image = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostInsertDocumentWatermarkImage(version, name, imageFile, rotationAngle, image, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostInsertDocumentWatermarkText
        /// </summary>
        [Test]
        public void PostInsertDocumentWatermarkTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOWatermarkText watermarkText = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostInsertDocumentWatermarkText(version, name, watermarkText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostInsertPageNumbers
        /// </summary>
        [Test]
        public void PostInsertPageNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOPageNumber pageNumber = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostInsertPageNumbers(version, name, pageNumber, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PostLoadWebDocument
        /// </summary>
        [Test]
        public void PostLoadWebDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //AsposeWordsCloudDTOLoadWebDocumentLoadWebDocumentData data = null;
            //string storage = null;
            //var response = instance.PostLoadWebDocument(version, data, storage);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOSaveResponse> (response, "response is AsposeWordsCloudDTOSaveResponse");
        }
        
        /// <summary>
        /// Test PostReplaceText
        /// </summary>
        [Test]
        public void PostReplaceTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOReplaceReplaceTextRequest replaceText = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostReplaceText(version, name, replaceText, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOReplaceReplaceTextResponse> (response, "response is AsposeWordsCloudDTOReplaceReplaceTextResponse");
        }
        
        /// <summary>
        /// Test PostRun
        /// </summary>
        [Test]
        public void PostRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsRunsRun run = null;
            //string paragraphPath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostRun(version, name, run, paragraphPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsRunsRunResponse> (response, "response is AsposeWordsCloudDTODocumentElementsRunsRunResponse");
        }
        
        /// <summary>
        /// Test PostRunTask
        /// </summary>
        [Test]
        public void PostRunTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //var response = instance.PostRunTask(version);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test PostSplitDocument
        /// </summary>
        [Test]
        public void PostSplitDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //int? from = null;
            //int? to = null;
            //bool? zipOutput = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.PostSplitDocument(version, name, format, from, to, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOSplitDocumentResponse> (response, "response is AsposeWordsCloudDTOSplitDocumentResponse");
        }
        
        /// <summary>
        /// Test PostUpdateDocumentBookmark
        /// </summary>
        [Test]
        public void PostUpdateDocumentBookmarkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsBookmarksBookmarkData bookmarkData = null;
            //string bookmarkName = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PostUpdateDocumentBookmark(version, name, bookmarkData, bookmarkName, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse> (response, "response is AsposeWordsCloudDTODocumentElementsBookmarksBookmarkResponse");
        }
        
        /// <summary>
        /// Test PostUpdateDocumentFields
        /// </summary>
        [Test]
        public void PostUpdateDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PostUpdateDocumentFields(version, name, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PutComment
        /// </summary>
        [Test]
        public void PutCommentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsCommentsCommentDto comment = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutComment(version, name, comment, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommentsCommentResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommentsCommentResponse");
        }
        
        /// <summary>
        /// Test PutConvertDocument
        /// </summary>
        [Test]
        public void PutConvertDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //System.IO.Stream document = null;
            //string format = null;
            //string outPath = null;
            //string storage = null;
            //string fontsLocation = null;
            //var response = instance.PutConvertDocument(version, document, format, outPath, storage, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PutCreateDocument
        /// </summary>
        [Test]
        public void PutCreateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string fileName = null;
            //string folder = null;
            //string storage = null;
            //var response = instance.PutCreateDocument(version, fileName, folder, storage);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentResponse> (response, "response is AsposeWordsCloudDTODocumentResponse");
        }
        
        /// <summary>
        /// Test PutDocumentFieldNames
        /// </summary>
        [Test]
        public void PutDocumentFieldNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //System.IO.Stream template = null;
            //bool? useNonMergeFields = null;
            //var response = instance.PutDocumentFieldNames(version, template, useNonMergeFields);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOFieldNamesResponse> (response, "response is AsposeWordsCloudDTOFieldNamesResponse");
        }
        
        /// <summary>
        /// Test PutDocumentSaveAsTiff
        /// </summary>
        [Test]
        public void PutDocumentSaveAsTiffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOSavingImagesTiffSaveOptionsData saveOptions = null;
            //string resultFile = null;
            //bool? useAntiAliasing = null;
            //bool? useHighQualityRendering = null;
            //float? imageBrightness = null;
            //string imageColorMode = null;
            //float? imageContrast = null;
            //string numeralFormat = null;
            //int? pageCount = null;
            //int? pageIndex = null;
            //string paperColor = null;
            //string pixelFormat = null;
            //float? resolution = null;
            //float? scale = null;
            //string tiffCompression = null;
            //string dmlRenderingMode = null;
            //string dmlEffectsRenderingMode = null;
            //string tiffBinarizationMethod = null;
            //bool? zipOutput = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.PutDocumentSaveAsTiff(version, name, saveOptions, resultFile, useAntiAliasing, useHighQualityRendering, imageBrightness, imageColorMode, imageContrast, numeralFormat, pageCount, pageIndex, paperColor, pixelFormat, resolution, scale, tiffCompression, dmlRenderingMode, dmlEffectsRenderingMode, tiffBinarizationMethod, zipOutput, destFileName, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOSaveResponse> (response, "response is AsposeWordsCloudDTOSaveResponse");
        }
        
        /// <summary>
        /// Test PutDrawingObject
        /// </summary>
        [Test]
        public void PutDrawingObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string drawingObject = null;
            //System.IO.Stream imageFile = null;
            //string name = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutDrawingObject(version, drawingObject, imageFile, name, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse> (response, "response is AsposeWordsCloudDTODocumentElementsDrawingObjectsDrawingObjectResponse");
        }
        
        /// <summary>
        /// Test PutExecuteMailMergeOnline
        /// </summary>
        [Test]
        public void PutExecuteMailMergeOnlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //System.IO.Stream template = null;
            //System.IO.Stream data = null;
            //bool? withRegions = null;
            //string cleanup = null;
            //var response = instance.PutExecuteMailMergeOnline(version, template, data, withRegions, cleanup);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PutExecuteTemplateOnline
        /// </summary>
        [Test]
        public void PutExecuteTemplateOnlineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //System.IO.Stream template = null;
            //System.IO.Stream data = null;
            //string cleanup = null;
            //bool? useWholeParagraphAsRegion = null;
            //bool? withRegions = null;
            //var response = instance.PutExecuteTemplateOnline(version, template, data, cleanup, useWholeParagraphAsRegion, withRegions);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PutField
        /// </summary>
        [Test]
        public void PutFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFieldsFieldDto field = null;
            //string nodePath = null;
            //string insertBeforeNode = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutField(version, name, field, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFieldsFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFieldsFieldResponse");
        }
        
        /// <summary>
        /// Test PutFootnote
        /// </summary>
        [Test]
        public void PutFootnoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFootnotesFootnoteDto footnoteDto = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutFootnote(version, name, footnoteDto, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFootnotesFootnoteResponse");
        }
        
        /// <summary>
        /// Test PutFormField
        /// </summary>
        [Test]
        public void PutFormFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsFormFieldsFormField formField = null;
            //string nodePath = null;
            //string insertBeforeNode = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutFormField(version, name, formField, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse> (response, "response is AsposeWordsCloudDTODocumentElementsFormFieldsFormFieldResponse");
        }
        
        /// <summary>
        /// Test PutHeaderFooter
        /// </summary>
        [Test]
        public void PutHeaderFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string headerFooterType = null;
            //string sectionPath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutHeaderFooter(version, name, headerFooterType, sectionPath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse> (response, "response is AsposeWordsCloudDTODocumentElementsHeaderFootersHeaderFooterResponse");
        }
        
        /// <summary>
        /// Test PutParagraph
        /// </summary>
        [Test]
        public void PutParagraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsParagraphsParagraphInsertDto paragraph = null;
            //string nodePath = null;
            //string insertBeforeNode = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutParagraph(version, name, paragraph, nodePath, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse> (response, "response is AsposeWordsCloudDTODocumentElementsParagraphsParagraphResponse");
        }
        
        /// <summary>
        /// Test PutProtectDocument
        /// </summary>
        [Test]
        public void PutProtectDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTOProtectionRequest protectionRequest = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.PutProtectDocument(version, name, protectionRequest, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOProtectionDataResponse> (response, "response is AsposeWordsCloudDTOProtectionDataResponse");
        }
        
        /// <summary>
        /// Test PutRun
        /// </summary>
        [Test]
        public void PutRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string paragraphPath = null;
            //AsposeWordsCloudDTODocumentElementsRunsRun run = null;
            //string insertBeforeNode = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutRun(version, name, paragraphPath, run, insertBeforeNode, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsRunsRunResponse> (response, "response is AsposeWordsCloudDTODocumentElementsRunsRunResponse");
        }
        
        /// <summary>
        /// Test PutUpdateDocumentProperty
        /// </summary>
        [Test]
        public void PutUpdateDocumentPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string propertyName = null;
            //AsposeWordsCloudDTODocumentProperty property = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutUpdateDocumentProperty(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentPropertyResponse> (response, "response is AsposeWordsCloudDTODocumentPropertyResponse");
        }
        
        /// <summary>
        /// Test PutUpdateDocumentProperty_0
        /// </summary>
        [Test]
        public void PutUpdateDocumentProperty_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string propertyName = null;
            //AsposeWordsCloudDTODocumentProperty property = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.PutUpdateDocumentProperty_0(version, name, propertyName, property, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentPropertyResponse> (response, "response is AsposeWordsCloudDTODocumentPropertyResponse");
        }
        
        /// <summary>
        /// Test RejectAllRevisions
        /// </summary>
        [Test]
        public void RejectAllRevisionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.RejectAllRevisions(version, name, destFileName, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTORevisionsModificationResponse> (response, "response is AsposeWordsCloudDTORevisionsModificationResponse");
        }
        
        /// <summary>
        /// Test RenderDrawingObject
        /// </summary>
        [Test]
        public void RenderDrawingObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.RenderDrawingObject(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RenderMathObject
        /// </summary>
        [Test]
        public void RenderMathObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.RenderMathObject(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RenderPage
        /// </summary>
        [Test]
        public void RenderPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? pageIndex = null;
            //string format = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.RenderPage(version, name, pageIndex, format, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RenderParagraph
        /// </summary>
        [Test]
        public void RenderParagraphTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.RenderParagraph(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RenderTable
        /// </summary>
        [Test]
        public void RenderTableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string format = null;
            //int? index = null;
            //string nodePath = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //string fontsLocation = null;
            //var response = instance.RenderTable(version, name, format, index, nodePath, storage, folder, loadEncoding, password, fontsLocation);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ResetCache
        /// </summary>
        [Test]
        public void ResetCacheTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //var response = instance.ResetCache(version);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOCommonSaaSposeResponse> (response, "response is AsposeWordsCloudDTOCommonSaaSposeResponse");
        }
        
        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //string pattern = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string password = null;
            //var response = instance.Search(version, name, pattern, storage, folder, loadEncoding, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTOSearchSearchResponse> (response, "response is AsposeWordsCloudDTOSearchSearchResponse");
        }
        
        /// <summary>
        /// Test UpdateBorder
        /// </summary>
        [Test]
        public void UpdateBorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsCommonBorder borderProperties = null;
            //string nodePath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.UpdateBorder(version, name, borderProperties, nodePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsCommonBorderResponse> (response, "response is AsposeWordsCloudDTODocumentElementsCommonBorderResponse");
        }
        
        /// <summary>
        /// Test UpdateSectionPageSetup
        /// </summary>
        [Test]
        public void UpdateSectionPageSetupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //int? sectionIndex = null;
            //AsposeWordsCloudDTODocumentElementsSectionsPageSetup pageSetup = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.UpdateSectionPageSetup(version, name, sectionIndex, pageSetup, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse> (response, "response is AsposeWordsCloudDTODocumentElementsSectionsSectionPageSetupResponse");
        }
        
        /// <summary>
        /// Test UpdateTableCellFormat
        /// </summary>
        [Test]
        public void UpdateTableCellFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTableCellFormatDto format = null;
            //string tableRowPath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.UpdateTableCellFormat(version, name, format, tableRowPath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableCellFormatResponse");
        }
        
        /// <summary>
        /// Test UpdateTableProperties
        /// </summary>
        [Test]
        public void UpdateTablePropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTablePropertiesDto properties = null;
            //int? index = null;
            //string nodePath = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.UpdateTableProperties(version, name, properties, index, nodePath, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTablePropertiesResponse");
        }
        
        /// <summary>
        /// Test UpdateTableRowFormat
        /// </summary>
        [Test]
        public void UpdateTableRowFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string version = null;
            //string name = null;
            //AsposeWordsCloudDTODocumentElementsTablesTableRowFormatDto format = null;
            //string tablePath = null;
            //int? index = null;
            //string destFileName = null;
            //string storage = null;
            //string folder = null;
            //string loadEncoding = null;
            //string revisionAuthor = null;
            //string revisionDateTime = null;
            //string password = null;
            //var response = instance.UpdateTableRowFormat(version, name, format, tablePath, index, destFileName, storage, folder, loadEncoding, revisionAuthor, revisionDateTime, password);
            //Assert.IsInstanceOf<AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse> (response, "response is AsposeWordsCloudDTODocumentElementsTablesTableRowFormatResponse");
        }
        
    }

}
