<?php
namespace {{package}};
use {{package}}\ApiException as Exception;
use {{package}}\ApiClient;

{{#operations}}
class {{classname}} {

	function __construct() {
		$this->apiClient = new ApiClient();
	}

	{{#operation}}
	/**
	 * {{nickname}}
	 * {{summary}}
	{{#allParams}}
	* {{paramName}}, {{dataType}}: {{description}} {{^optional}}(required){{/optional}}{{#optional}}(optional){{/optional}}
	{{newline}}
	{{/allParams}}
	 * @return {{returnType}}
	 */
   
	public function {{nickname}}({{#allParams}}${{paramName}}{{#optional}}=null{{/optional}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
		{{#requiredParamCount}}
		// verify required params are set
		if({{/requiredParamCount}}{{#requiredParams}} ${{paramName}} == '' {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
			throw new Exception("missing required params");
		}
		{{/requiredParamCount}}
	
	
		//parse inputs
		$resourcePath = "{{path}}";
		//$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("toFormat={toFormat}", "format={format}",str_replace("/?", "?",str_replace("&amp;", "&",str_replace("\\*", "",$resourcePath))));
		$method = "{{httpMethod}}";
		$queryParams = array();
		$headerParams = array();
		$headerParams['Accept'] = '{{#produces}}{{mediaType}}{{#hasMore}},{{/hasMore}}{{/produces}}';
		$headerParams['Content-Type'] = '{{#consumes}}{{mediaType}}{{#hasMore}},{{/hasMore}}{{/consumes}}';

		{{#queryParams}}
			if(${{paramName}} != null) {
			$resourcePath = str_replace("{" . "{{baseName}}" . "}" , $this->apiClient->toQueryValue(${{paramName}}), $resourcePath);
			}else{
				$resourcePath = str_replace("&{{baseName}}={" . "{{baseName}}" . "}", "", $resourcePath);
			}
			{{/queryParams}}
		{{#headerParams}}
			if(${{paramName}} != null) {
				$headerParams['{{paramName}}'] = $this->apiClient->toHeaderValue(${{paramName}});
			}
		{{/headerParams}}

		{{#pathParams}}
			if(${{paramName}} != null) {
				$resourcePath = str_replace("{" . "{{paramName}}" . "}",$this->apiClient->toPathValue(${{paramName}}), $resourcePath);
			}
			{{/pathParams}}

			//make the API Call
		if (! isset($body)) {
			$body = null;
		}
		if(isset($file)) {
			$body = $file;
		}
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $body, $headerParams);

		{{#returnType}}

		if(! $response){
			return null;
		}

		$responseObject = $this->apiClient->deserialize($response,
															'{{returnType}}');
		return $responseObject;

		{{/returnType}}
	}
	{{/operation}}
{{newline}}
{{/operations}}
}
