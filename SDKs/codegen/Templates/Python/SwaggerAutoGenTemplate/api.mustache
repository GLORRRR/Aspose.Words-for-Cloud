#!/usr/bin/env python

import sys
import os
import urllib
import json
import re
from models import *
from ApiClient import ApiException


{{#operations}}
class {{classname}}(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    {{newline}}
    {{#operation}}
    def {{nickname}}(self, {{#requiredParams}}{{paramName}}{{#defaultValue}} = None{{/defaultValue}}, {{/requiredParams}}**kwargs):
        """{{summary}}
        Args:
            {{#allParams}}
            {{paramName}} ({{dataType}}): {{description}} {{^optional}}(required){{/optional}}{{#optional}}(optional){{/optional}}
            {{newline}}
            {{/allParams}}
        {{newline}}
        Returns: {{returnType}}
        """

        allParams = dict.fromkeys([{{#allParams}}'{{paramName}}'{{#hasMore}}, {{/hasMore}}{{/allParams}}])

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method {{nickname}}" % key)
            params[key] = val
        
        for (key, val) in params.iteritems():
            if key in allParams:
                allParams[key] = val
        
        resourcePath = '{{path}}'
        {{newline}}    
        resourcePath = resourcePath.replace('&amp;','&').replace("/?","?").replace("toFormat={toFormat}","format={format}").replace("{path}","{Path}")

        {{#queryParams}}if '{{paramName}}' in allParams and allParams['{{paramName}}'] is not None:
            resourcePath = resourcePath.replace("{" + "{{paramName}}" + "}" , str(allParams['{{paramName}}']))
        else:
            resourcePath = re.sub("[&?]{{paramName}}.*?(?=&|\\?|$)", "", resourcePath)
        {{newline}}
        {{/queryParams}}
        method = '{{httpMethod}}'
        queryParams = {}
        headerParams = {}
        formParams = {}
        files = { {{#formParams}}{{#isFile}}'file':open(file, 'rb'){{/isFile}}{{/formParams}} }
        bodyParam = {{#bodyParam}}body{{/bodyParam}}{{^bodyParam}}None{{/bodyParam}}
                {{newline}}
        headerParams['Accept'] = '{{#produces}}{{mediaType}}{{#hasMore}},{{/hasMore}}{{/produces}}'
        headerParams['Content-Type'] = '{{#consumes}}{{mediaType}}{{#hasMore}},{{/hasMore}}{{/consumes}}'

        postData = (formParams if formParams else bodyParam)

        response =  self.apiClient.callAPI(resourcePath, method, queryParams, postData, headerParams, files=files)

        try:
            if response.status_code in [200,201,202]:
                responseObject = self.apiClient.pre_deserialize(response.content, '{{returnType}}', response.headers['content-type'])
                return responseObject
            else:
                raise ApiException(response.status_code,response.content)
        except Exception:
            raise ApiException(response.status_code,response.content)

        {{newline}}
        {{newline}}
    {{/operation}}
{{newline}}
{{/operations}}
{{newline}}
